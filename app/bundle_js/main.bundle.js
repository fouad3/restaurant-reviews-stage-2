"use strict";!function(){function a(n){return new Promise(function(e,t){n.onsuccess=function(){e(n.result)},n.onerror=function(){t(n.error)}})}function i(n,o,r){var i,e=new Promise(function(e,t){a(i=n[o].apply(n,r)).then(e,t)});return e.request=i,e}function e(e,n,t){t.forEach(function(t){Object.defineProperty(e.prototype,t,{get:function(){return this[n][t]},set:function(e){this[n][t]=e}})})}function t(t,n,o,e){e.forEach(function(e){e in o.prototype&&(t.prototype[e]=function(){return i(this[n],e,arguments)})})}function n(t,n,o,e){e.forEach(function(e){e in o.prototype&&(t.prototype[e]=function(){return this[n][e].apply(this[n],arguments)})})}function o(e,o,t,n){n.forEach(function(n){n in t.prototype&&(e.prototype[n]=function(){return e=this[o],(t=i(e,n,arguments)).then(function(e){if(e)return new u(e,t.request)});var e,t})})}function r(e){this._index=e}function u(e,t){this._cursor=e,this._request=t}function s(e){this._store=e}function c(n){this._tx=n,this.complete=new Promise(function(e,t){n.oncomplete=function(){e()},n.onerror=function(){t(n.error)},n.onabort=function(){t(n.error)}})}function d(e,t,n){this._db=e,this.oldVersion=t,this.transaction=new c(n)}function l(e){this._db=e}e(r,"_index",["name","keyPath","multiEntry","unique"]),t(r,"_index",IDBIndex,["get","getKey","getAll","getAllKeys","count"]),o(r,"_index",IDBIndex,["openCursor","openKeyCursor"]),e(u,"_cursor",["direction","key","primaryKey","value"]),t(u,"_cursor",IDBCursor,["update","delete"]),["advance","continue","continuePrimaryKey"].forEach(function(n){n in IDBCursor.prototype&&(u.prototype[n]=function(){var t=this,e=arguments;return Promise.resolve().then(function(){return t._cursor[n].apply(t._cursor,e),a(t._request).then(function(e){if(e)return new u(e,t._request)})})})}),s.prototype.createIndex=function(){return new r(this._store.createIndex.apply(this._store,arguments))},s.prototype.index=function(){return new r(this._store.index.apply(this._store,arguments))},e(s,"_store",["name","keyPath","indexNames","autoIncrement"]),t(s,"_store",IDBObjectStore,["put","add","delete","clear","get","getAll","getKey","getAllKeys","count"]),o(s,"_store",IDBObjectStore,["openCursor","openKeyCursor"]),n(s,"_store",IDBObjectStore,["deleteIndex"]),c.prototype.objectStore=function(){return new s(this._tx.objectStore.apply(this._tx,arguments))},e(c,"_tx",["objectStoreNames","mode"]),n(c,"_tx",IDBTransaction,["abort"]),d.prototype.createObjectStore=function(){return new s(this._db.createObjectStore.apply(this._db,arguments))},e(d,"_db",["name","version","objectStoreNames"]),n(d,"_db",IDBDatabase,["deleteObjectStore","close"]),l.prototype.transaction=function(){return new c(this._db.transaction.apply(this._db,arguments))},e(l,"_db",["name","version","objectStoreNames"]),n(l,"_db",IDBDatabase,["close"]),["openCursor","openKeyCursor"].forEach(function(i){[s,r].forEach(function(e){i in e.prototype&&(e.prototype[i.replace("open","iterate")]=function(){var e,t=(e=arguments,Array.prototype.slice.call(e)),n=t[t.length-1],o=this._store||this._index,r=o[i].apply(o,t.slice(0,-1));r.onsuccess=function(){n(r.result)}})})}),[r,s].forEach(function(e){e.prototype.getAll||(e.prototype.getAll=function(e,n){var o=this,r=[];return new Promise(function(t){o.iterateCursor(e,function(e){e?(r.push(e.value),void 0===n||r.length!=n?e.continue():t(r)):t(r)})})})});var f={open:function(e,t,n){var o=i(indexedDB,"open",[e,t]),r=o.request;return r&&(r.onupgradeneeded=function(e){n&&n(new d(r.result,e.oldVersion,r.transaction))}),o.then(function(e){return new l(e)})},delete:function(e){return i(indexedDB,"deleteDatabase",[e])}};"undefined"!=typeof module?(module.exports=f,module.exports.default=module.exports):self.idb=f}();var _createClass=function(){function o(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(e,t,n){return t&&o(e.prototype,t),n&&o(e,n),e}}();function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}var newMap,DBHelper=function(){function a(){_classCallCheck(this,a)}return _createClass(a,null,[{key:"openIdb",value:function(){return idb.open("restaurant-reviews",1,function(e){e.createObjectStore("restaurant-reviews",{keyPath:"id"}).createIndex("by-date","updatedAt")})}},{key:"getCachedRestaurants",value:function(){return a.openIdb().then(function(e){if(e)return e.transaction("restaurant-reviews").objectStore("restaurant-reviews").index("by-date").getAll().then(function(e){return e.reverse()})})}},{key:"fetchRestaurants",value:function(t){a.getCachedRestaurants().then(function(e){if(0<e.length)return t(null,e)}),fetch(a.DATABASE_URL).then(function(e){return e.json()}).then(function(n){return a.openIdb().then(function(e){if(e){var t=e.transaction("restaurant-reviews","readwrite").objectStore("restaurant-reviews");n.forEach(function(e){t.put(e)})}}),t(null,n)}).catch(function(e){return t(e,null)})}},{key:"fetchRestaurantById",value:function(o,r){a.fetchRestaurants(function(e,t){if(e)r(e,null);else{var n=t.find(function(e){return e.id==o});n?r(null,n):r("Restaurant does not exist",null)}})}},{key:"fetchRestaurantByCuisine",value:function(o,r){a.fetchRestaurants(function(e,t){if(e)r(e,null);else{var n=t.filter(function(e){return e.cuisine_type==o});r(null,n)}})}},{key:"fetchRestaurantByNeighborhood",value:function(o,r){a.fetchRestaurants(function(e,t){if(e)r(e,null);else{var n=t.filter(function(e){return e.neighborhood==o});r(null,n)}})}},{key:"fetchRestaurantByCuisineAndNeighborhood",value:function(o,r,i){a.fetchRestaurants(function(e,t){if(e)i(e,null);else{var n=t;"all"!=o&&(n=n.filter(function(e){return e.cuisine_type==o})),"all"!=r&&(n=n.filter(function(e){return e.neighborhood==r})),i(null,n)}})}},{key:"fetchNeighborhoods",value:function(r){a.fetchRestaurants(function(e,n){if(e)r(e,null);else{var o=n.map(function(e,t){return n[t].neighborhood}),t=o.filter(function(e,t){return o.indexOf(e)==t});r(null,t)}})}},{key:"fetchCuisines",value:function(r){a.fetchRestaurants(function(e,n){if(e)r(e,null);else{var o=n.map(function(e,t){return n[t].cuisine_type}),t=o.filter(function(e,t){return o.indexOf(e)==t});r(null,t)}})}},{key:"urlForRestaurant",value:function(e){return"./restaurant.html?id="+e.id}},{key:"imageUrlForRestaurant",value:function(e){return"/img/"+e.photograph}},{key:"mapMarkerForRestaurant",value:function(e,t){var n=new L.marker([e.latlng.lat,e.latlng.lng],{title:e.name,alt:e.name,url:a.urlForRestaurant(e)});return n.addTo(newMap),n}},{key:"DATABASE_URL",get:function(){return"http://localhost:1337/restaurants"}}]),a}(),restaurants=void 0,neighborhoods=void 0,cuisines=void 0,markers=[];document.addEventListener("DOMContentLoaded",function(e){initMap(),fetchNeighborhoods(),fetchCuisines()});var fetchNeighborhoods=function(){DBHelper.fetchNeighborhoods(function(e,t){e?console.error(e):(self.neighborhoods=t,fillNeighborhoodsHTML())})},fillNeighborhoodsHTML=function(){var e=0<arguments.length&&void 0!==arguments[0]?arguments[0]:self.neighborhoods,n=document.getElementById("neighborhoods-select");n.innerHTML="";var t=document.createElement("option");t.innerHTML="All Neighborhoods",t.value="all",n.append(t),e.forEach(function(e){var t=document.createElement("option");t.innerHTML=e,t.value=e,n.append(t)})},fetchCuisines=function(){DBHelper.fetchCuisines(function(e,t){e?console.error(e):(self.cuisines=t,fillCuisinesHTML())})},fillCuisinesHTML=function(){var e=0<arguments.length&&void 0!==arguments[0]?arguments[0]:self.cuisines,n=document.getElementById("cuisines-select");n.innerHTML="";var t=document.createElement("option");t.innerHTML="All Cuisines",t.value="all",n.append(t),e.forEach(function(e){var t=document.createElement("option");t.innerHTML=e,t.value=e,n.append(t)})},initMap=function(){self.newMap=L.map("map",{center:[40.722216,-73.987501],zoom:12,scrollWheelZoom:!1}),L.tileLayer("https://api.tiles.mapbox.com/v4/{id}/{z}/{x}/{y}.jpg70?access_token={mapboxToken}",{mapboxToken:"pk.eyJ1IjoiZm91YWQtYXNocmFmIiwiYSI6ImNqazE0dm1iNjA3eGszcnQ0dDNlN3k3bnAifQ.uKTfhCxs1NtirqEcRaAZwg",maxZoom:18,attribution:'Map data &copy; <a href="https://www.openstreetmap.org/">OpenStreetMap</a> contributors, <a href="https://creativecommons.org/licenses/by-sa/2.0/">CC-BY-SA</a>, Imagery Â© <a href="https://www.mapbox.com/">Mapbox</a>',id:"mapbox.streets"}).addTo(newMap),updateRestaurants()},updateRestaurants=function(){var e=document.getElementById("cuisines-select"),t=document.getElementById("neighborhoods-select"),n=e.selectedIndex,o=t.selectedIndex,r=e[n].value,i=t[o].value;DBHelper.fetchRestaurantByCuisineAndNeighborhood(r,i,function(e,t){e?console.error(e):(resetRestaurants(t),fillRestaurantsHTML())})},resetRestaurants=function(e){self.restaurants=[],document.getElementById("restaurants-list").innerHTML="",self.markers&&self.markers.forEach(function(e){return e.remove()}),self.markers=[],self.restaurants=e},fillRestaurantsHTML=function(){var e=0<arguments.length&&void 0!==arguments[0]?arguments[0]:self.restaurants,t=document.getElementById("restaurants-list"),n=document.createComment("");e.forEach(function(e){t.append(createRestaurantHTML(e)),t.append(n)}),addMarkersToMap()},createRestaurantHTML=function(e){var t=document.createElement("li"),n=document.createElement("img");n.className="restaurant-img";var o=DBHelper.imageUrlForRestaurant(e),r="webp";n.src=o+"-800_2x."+r,n.setAttribute("srcset",o+"-800_2x."+r+" 800w, "+o+"-400_1x."+r+" 400w"),n.setAttribute("sizes","(max-width: 500px) 90vw, (max-width: 880px) 80vw, (max-width: 1205px) 40vw, (min-width: 1206px) 30vw"),n.setAttribute("alt",e.name+" Restaurant"),t.append(n);var i=document.createElement("h1");i.innerHTML=e.name,t.append(i);var a=document.createElement("p");a.innerHTML=e.neighborhood,t.append(a);var u=document.createElement("p");u.innerHTML=e.address,t.append(u);var s=document.createElement("a");return s.innerHTML="View Details",s.href=DBHelper.urlForRestaurant(e),s.setAttribute("role","button"),s.setAttribute("aria-label","View Restaurant Details"),t.append(s),t},addMarkersToMap=function(){(0<arguments.length&&void 0!==arguments[0]?arguments[0]:self.restaurants).forEach(function(e){var t=DBHelper.mapMarkerForRestaurant(e,self.newMap);t.on("click",function(){window.location.href=t.options.url}),self.markers.push(t)})},_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};!function(e,t){"object"===("undefined"==typeof exports?"undefined":_typeof(exports))&&"undefined"!=typeof module?t():"function"==typeof define&&define.amd?define(t):t()}(0,function(){"undefined"!=typeof document&&function(e){var t;function n(){t||(t=!0,e())}0<=["interactive","complete"].indexOf(document.readyState)?e():(t=!1,document.addEventListener("DOMContentLoaded",n,!1),window.addEventListener("load",n,!1))}(function(){var r=!0,n=!1,o=null,i={text:!0,search:!0,url:!0,tel:!0,email:!0,password:!0,number:!0,date:!0,month:!0,week:!0,time:!0,datetime:!0,"datetime-local":!0};function a(e){return!!(e&&e!==document&&"HTML"!==e.nodeName&&"BODY"!==e.nodeName&&"classList"in e&&"contains"in e.classList)}function u(e){e.classList.contains("focus-visible")||(e.classList.add("focus-visible"),e.setAttribute("data-focus-visible-added",""))}function e(e){r=!1}function t(){document.addEventListener("mousemove",s),document.addEventListener("mousedown",s),document.addEventListener("mouseup",s),document.addEventListener("pointermove",s),document.addEventListener("pointerdown",s),document.addEventListener("pointerup",s),document.addEventListener("touchmove",s),document.addEventListener("touchstart",s),document.addEventListener("touchend",s)}function s(e){"html"!==e.target.nodeName.toLowerCase()&&(r=!1,document.removeEventListener("mousemove",s),document.removeEventListener("mousedown",s),document.removeEventListener("mouseup",s),document.removeEventListener("pointermove",s),document.removeEventListener("pointerdown",s),document.removeEventListener("pointerup",s),document.removeEventListener("touchmove",s),document.removeEventListener("touchstart",s),document.removeEventListener("touchend",s))}document.addEventListener("keydown",function(e){a(document.activeElement)&&u(document.activeElement),r=!0},!0),document.addEventListener("mousedown",e,!0),document.addEventListener("pointerdown",e,!0),document.addEventListener("touchstart",e,!0),document.addEventListener("focus",function(e){var t,n,o;a(e.target)&&(r||(t=e.target,n=t.type,"INPUT"==(o=t.tagName)&&i[n]&&!t.readOnly||"TEXTAREA"==o&&!t.readOnly||t.isContentEditable))&&u(e.target)},!0),document.addEventListener("blur",function(e){var t;a(e.target)&&(e.target.classList.contains("focus-visible")||e.target.hasAttribute("data-focus-visible-added"))&&(n=!0,window.clearTimeout(o),o=window.setTimeout(function(){n=!1,window.clearTimeout(o)},100),(t=e.target).hasAttribute("data-focus-visible-added")&&(t.classList.remove("focus-visible"),t.removeAttribute("data-focus-visible-added")))},!0),document.addEventListener("visibilitychange",function(e){"hidden"==document.visibilityState&&(n&&(r=!0),t())},!0),t(),document.body.classList.add("js-focus-visible")})});
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImlkYi5qcyIsImRiaGVscGVyLmpzIiwibWFpbi5qcyIsImZvY3VzLXZpc2libGUuanMiXSwibmFtZXMiOlsicHJvbWlzaWZ5UmVxdWVzdCIsInJlcXVlc3QiLCJQcm9taXNlIiwicmVzb2x2ZSIsInJlamVjdCIsIm9uc3VjY2VzcyIsInJlc3VsdCIsIm9uZXJyb3IiLCJlcnJvciIsInByb21pc2lmeVJlcXVlc3RDYWxsIiwib2JqIiwibWV0aG9kIiwiYXJncyIsInAiLCJhcHBseSIsInRoZW4iLCJwcm94eVByb3BlcnRpZXMiLCJQcm94eUNsYXNzIiwidGFyZ2V0UHJvcCIsInByb3BlcnRpZXMiLCJmb3JFYWNoIiwicHJvcCIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwicHJvdG90eXBlIiwiZ2V0IiwidGhpcyIsInNldCIsInZhbCIsInByb3h5UmVxdWVzdE1ldGhvZHMiLCJDb25zdHJ1Y3RvciIsImFyZ3VtZW50cyIsInByb3h5TWV0aG9kcyIsInByb3h5Q3Vyc29yUmVxdWVzdE1ldGhvZHMiLCJ2YWx1ZSIsIkN1cnNvciIsIkluZGV4IiwiaW5kZXgiLCJfaW5kZXgiLCJjdXJzb3IiLCJfY3Vyc29yIiwiX3JlcXVlc3QiLCJPYmplY3RTdG9yZSIsInN0b3JlIiwiX3N0b3JlIiwiVHJhbnNhY3Rpb24iLCJpZGJUcmFuc2FjdGlvbiIsIl90eCIsImNvbXBsZXRlIiwib25jb21wbGV0ZSIsIm9uYWJvcnQiLCJVcGdyYWRlREIiLCJkYiIsIm9sZFZlcnNpb24iLCJ0cmFuc2FjdGlvbiIsIl9kYiIsIkRCIiwiSURCSW5kZXgiLCJJREJDdXJzb3IiLCJtZXRob2ROYW1lIiwiY3JlYXRlSW5kZXgiLCJJREJPYmplY3RTdG9yZSIsIm9iamVjdFN0b3JlIiwiSURCVHJhbnNhY3Rpb24iLCJjcmVhdGVPYmplY3RTdG9yZSIsIklEQkRhdGFiYXNlIiwiZnVuY05hbWUiLCJyZXBsYWNlIiwiYXJyIiwiQXJyYXkiLCJzbGljZSIsImNhbGwiLCJjYWxsYmFjayIsImxlbmd0aCIsIm5hdGl2ZU9iamVjdCIsImdldEFsbCIsInF1ZXJ5IiwiY291bnQiLCJpbnN0YW5jZSIsIml0ZW1zIiwiaXRlcmF0ZUN1cnNvciIsInB1c2giLCJ1bmRlZmluZWQiLCJjb250aW51ZSIsImV4cCIsIm9wZW4iLCJuYW1lIiwidmVyc2lvbiIsInVwZ3JhZGVDYWxsYmFjayIsImluZGV4ZWREQiIsIm9udXBncmFkZW5lZWRlZCIsImV2ZW50IiwiZGVsZXRlIiwibW9kdWxlIiwiZXhwb3J0cyIsImRlZmF1bHQiLCJzZWxmIiwiaWRiIiwiX2NyZWF0ZUNsYXNzIiwiZGVmaW5lUHJvcGVydGllcyIsInRhcmdldCIsInByb3BzIiwiaSIsImRlc2NyaXB0b3IiLCJlbnVtZXJhYmxlIiwiY29uZmlndXJhYmxlIiwid3JpdGFibGUiLCJrZXkiLCJwcm90b1Byb3BzIiwic3RhdGljUHJvcHMiLCJfY2xhc3NDYWxsQ2hlY2siLCJUeXBlRXJyb3IiLCJuZXdNYXAiLCJEQkhlbHBlciIsInVwZ3JhZGVEYiIsImtleVBhdGgiLCJvcGVuSWRiIiwicmVzdGF1cmFudHMiLCJyZXZlcnNlIiwiZ2V0Q2FjaGVkUmVzdGF1cmFudHMiLCJmZXRjaCIsIkRBVEFCQVNFX1VSTCIsInJlc3BvbnNlIiwianNvbiIsInJlc3RhdXJhbnQiLCJwdXQiLCJjYXRjaCIsImVyciIsImlkIiwiZmV0Y2hSZXN0YXVyYW50cyIsImZpbmQiLCJyIiwiY3Vpc2luZSIsInJlc3VsdHMiLCJmaWx0ZXIiLCJjdWlzaW5lX3R5cGUiLCJuZWlnaGJvcmhvb2QiLCJuZWlnaGJvcmhvb2RzIiwibWFwIiwidiIsInVuaXF1ZU5laWdoYm9yaG9vZHMiLCJpbmRleE9mIiwiY3Vpc2luZXMiLCJ1bmlxdWVDdWlzaW5lcyIsInBob3RvZ3JhcGgiLCJtYXJrZXIiLCJMIiwibGF0bG5nIiwibGF0IiwibG5nIiwidGl0bGUiLCJhbHQiLCJ1cmwiLCJ1cmxGb3JSZXN0YXVyYW50IiwiYWRkVG8iLCJtYXJrZXJzIiwiZG9jdW1lbnQiLCJhZGRFdmVudExpc3RlbmVyIiwiaW5pdE1hcCIsImZldGNoTmVpZ2hib3Job29kcyIsImZldGNoQ3Vpc2luZXMiLCJjb25zb2xlIiwiZmlsbE5laWdoYm9yaG9vZHNIVE1MIiwic2VsZWN0IiwiZ2V0RWxlbWVudEJ5SWQiLCJpbm5lckhUTUwiLCJvcHRpb24iLCJjcmVhdGVFbGVtZW50IiwiYXBwZW5kIiwiZmlsbEN1aXNpbmVzSFRNTCIsImNlbnRlciIsInpvb20iLCJzY3JvbGxXaGVlbFpvb20iLCJ0aWxlTGF5ZXIiLCJtYXBib3hUb2tlbiIsIm1heFpvb20iLCJhdHRyaWJ1dGlvbiIsInVwZGF0ZVJlc3RhdXJhbnRzIiwiY1NlbGVjdCIsIm5TZWxlY3QiLCJjSW5kZXgiLCJzZWxlY3RlZEluZGV4IiwibkluZGV4IiwiZmV0Y2hSZXN0YXVyYW50QnlDdWlzaW5lQW5kTmVpZ2hib3Job29kIiwicmVzZXRSZXN0YXVyYW50cyIsImZpbGxSZXN0YXVyYW50c0hUTUwiLCJyZW1vdmUiLCJ1bCIsImNvbW1lbnQiLCJjcmVhdGVDb21tZW50IiwiY3JlYXRlUmVzdGF1cmFudEhUTUwiLCJhZGRNYXJrZXJzVG9NYXAiLCJsaSIsImltYWdlIiwiY2xhc3NOYW1lIiwiaW1hZ2VVcmxOYW1lIiwiaW1hZ2VVcmxGb3JSZXN0YXVyYW50IiwiaW1hZ2VUeXBlIiwic3JjIiwic2V0QXR0cmlidXRlIiwiYWRkcmVzcyIsIm1vcmUiLCJocmVmIiwibWFwTWFya2VyRm9yUmVzdGF1cmFudCIsIm9uIiwid2luZG93IiwibG9jYXRpb24iLCJvcHRpb25zIiwiX3R5cGVvZiIsIlN5bWJvbCIsIml0ZXJhdG9yIiwiY29uc3RydWN0b3IiLCJnbG9iYWwiLCJmYWN0b3J5IiwiZGVmaW5lIiwiYW1kIiwibG9hZGVkIiwibG9hZCIsInJlYWR5U3RhdGUiLCJvbkRPTVJlYWR5IiwiaGFkS2V5Ym9hcmRFdmVudCIsImhhZEZvY3VzVmlzaWJsZVJlY2VudGx5IiwiaGFkRm9jdXNWaXNpYmxlUmVjZW50bHlUaW1lb3V0IiwiaW5wdXRUeXBlc1doaXRlbGlzdCIsInRleHQiLCJzZWFyY2giLCJ0ZWwiLCJlbWFpbCIsInBhc3N3b3JkIiwibnVtYmVyIiwiZGF0ZSIsIm1vbnRoIiwid2VlayIsInRpbWUiLCJkYXRldGltZSIsImRhdGV0aW1lLWxvY2FsIiwiaXNWYWxpZEZvY3VzVGFyZ2V0IiwiZWwiLCJub2RlTmFtZSIsImNsYXNzTGlzdCIsImFkZEZvY3VzVmlzaWJsZUNsYXNzIiwiY29udGFpbnMiLCJhZGQiLCJvblBvaW50ZXJEb3duIiwiZSIsImFkZEluaXRpYWxQb2ludGVyTW92ZUxpc3RlbmVycyIsIm9uSW5pdGlhbFBvaW50ZXJNb3ZlIiwidG9Mb3dlckNhc2UiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwiYWN0aXZlRWxlbWVudCIsInR5cGUiLCJ0YWdOYW1lIiwicmVhZE9ubHkiLCJpc0NvbnRlbnRFZGl0YWJsZSIsImhhc0F0dHJpYnV0ZSIsImNsZWFyVGltZW91dCIsInNldFRpbWVvdXQiLCJyZW1vdmVBdHRyaWJ1dGUiLCJ2aXNpYmlsaXR5U3RhdGUiLCJib2R5Il0sIm1hcHBpbmdzIjoiQUFBQSxjQUVBLFdBS0EsU0FBQUEsRUFBQUMsR0FDQSxPQUFBLElBQUFDLFFBQUEsU0FBQUMsRUFBQUMsR0FDQUgsRUFBQUksVUFBQSxXQUNBRixFQUFBRixFQUFBSyxTQUdBTCxFQUFBTSxRQUFBLFdBQ0FILEVBQUFILEVBQUFPLFVBS0EsU0FBQUMsRUFBQUMsRUFBQUMsRUFBQUMsR0FDQSxJQUFBWCxFQUNBWSxFQUFBLElBQUFYLFFBQUEsU0FBQUMsRUFBQUMsR0FFQUosRUFEQUMsRUFBQVMsRUFBQUMsR0FBQUcsTUFBQUosRUFBQUUsSUFDQUcsS0FBQVosRUFBQUMsS0FJQSxPQURBUyxFQUFBWixRQUFBQSxFQUNBWSxFQVdBLFNBQUFHLEVBQUFDLEVBQUFDLEVBQUFDLEdBQ0FBLEVBQUFDLFFBQUEsU0FBQUMsR0FDQUMsT0FBQUMsZUFBQU4sRUFBQU8sVUFBQUgsRUFBQSxDQUNBSSxJQUFBLFdBQ0EsT0FBQUMsS0FBQVIsR0FBQUcsSUFFQU0sSUFBQSxTQUFBQyxHQUNBRixLQUFBUixHQUFBRyxHQUFBTyxPQU1BLFNBQUFDLEVBQUFaLEVBQUFDLEVBQUFZLEVBQUFYLEdBQ0FBLEVBQUFDLFFBQUEsU0FBQUMsR0FDQUEsS0FBQVMsRUFBQU4sWUFDQVAsRUFBQU8sVUFBQUgsR0FBQSxXQUNBLE9BQUFaLEVBQUFpQixLQUFBUixHQUFBRyxFQUFBVSxlQUtBLFNBQUFDLEVBQUFmLEVBQUFDLEVBQUFZLEVBQUFYLEdBQ0FBLEVBQUFDLFFBQUEsU0FBQUMsR0FDQUEsS0FBQVMsRUFBQU4sWUFDQVAsRUFBQU8sVUFBQUgsR0FBQSxXQUNBLE9BQUFLLEtBQUFSLEdBQUFHLEdBQUFQLE1BQUFZLEtBQUFSLEdBQUFhLGVBS0EsU0FBQUUsRUFBQWhCLEVBQUFDLEVBQUFZLEVBQUFYLEdBQ0FBLEVBQUFDLFFBQUEsU0FBQUMsR0FDQUEsS0FBQVMsRUFBQU4sWUFDQVAsRUFBQU8sVUFBQUgsR0FBQSxXQUNBLE9BM0NBWCxFQTJDQWdCLEtBQUFSLElBMUNBTCxFQUFBSixFQUFBQyxFQTBDQVcsRUFBQVUsWUF6Q0FoQixLQUFBLFNBQUFtQixHQUNBLEdBQUFBLEVBQ0EsT0FBQSxJQUFBQyxFQUFBRCxFQUFBckIsRUFBQVosV0FKQSxJQUFBUyxFQUNBRyxNQStDQSxTQUFBdUIsRUFBQUMsR0FDQVgsS0FBQVksT0FBQUQsRUFTQSxTQUFBRixFQUFBSSxFQUFBdEMsR0FDQXlCLEtBQUFjLFFBQUFELEVBQ0FiLEtBQUFlLFNBQUF4QyxFQXVCQSxTQUFBeUMsRUFBQUMsR0FDQWpCLEtBQUFrQixPQUFBRCxFQW1CQSxTQUFBRSxFQUFBQyxHQUNBcEIsS0FBQXFCLElBQUFELEVBQ0FwQixLQUFBc0IsU0FBQSxJQUFBOUMsUUFBQSxTQUFBQyxFQUFBQyxHQUNBMEMsRUFBQUcsV0FBQSxXQUNBOUMsS0FFQTJDLEVBQUF2QyxRQUFBLFdBQ0FILEVBQUEwQyxFQUFBdEMsUUFFQXNDLEVBQUFJLFFBQUEsV0FDQTlDLEVBQUEwQyxFQUFBdEMsVUFhQSxTQUFBMkMsRUFBQUMsRUFBQUMsRUFBQUMsR0FDQTVCLEtBQUE2QixJQUFBSCxFQUNBMUIsS0FBQTJCLFdBQUFBLEVBQ0EzQixLQUFBNEIsWUFBQSxJQUFBVCxFQUFBUyxHQVdBLFNBQUFFLEVBQUFKLEdBQ0ExQixLQUFBNkIsSUFBQUgsRUF6RkFwQyxFQUFBb0IsRUFBQSxTQUFBLENBQUEsT0FBQSxVQUFBLGFBQUEsV0FFQVAsRUFBQU8sRUFBQSxTQUFBcUIsU0FBQSxDQUFBLE1BQUEsU0FBQSxTQUFBLGFBQUEsVUFFQXhCLEVBQUFHLEVBQUEsU0FBQXFCLFNBQUEsQ0FBQSxhQUFBLGtCQU9BekMsRUFBQW1CLEVBQUEsVUFBQSxDQUFBLFlBQUEsTUFBQSxhQUFBLFVBRUFOLEVBQUFNLEVBQUEsVUFBQXVCLFVBQUEsQ0FBQSxTQUFBLFdBR0EsQ0FBQSxVQUFBLFdBQUEsc0JBQUF0QyxRQUFBLFNBQUF1QyxHQUNBQSxLQUFBRCxVQUFBbEMsWUFDQVcsRUFBQVgsVUFBQW1DLEdBQUEsV0FDQSxJQUFBcEIsRUFBQWIsS0FDQWQsRUFBQW1CLFVBQ0EsT0FBQTdCLFFBQUFDLFVBQUFZLEtBQUEsV0FFQSxPQURBd0IsRUFBQUMsUUFBQW1CLEdBQUE3QyxNQUFBeUIsRUFBQUMsUUFBQTVCLEdBQ0FaLEVBQUF1QyxFQUFBRSxVQUFBMUIsS0FBQSxTQUFBbUIsR0FDQSxHQUFBQSxFQUNBLE9BQUEsSUFBQUMsRUFBQUQsRUFBQUssRUFBQUUsa0JBVUFDLEVBQUFsQixVQUFBb0MsWUFBQSxXQUNBLE9BQUEsSUFBQXhCLEVBQUFWLEtBQUFrQixPQUFBZ0IsWUFBQTlDLE1BQUFZLEtBQUFrQixPQUFBYixhQUdBVyxFQUFBbEIsVUFBQWEsTUFBQSxXQUNBLE9BQUEsSUFBQUQsRUFBQVYsS0FBQWtCLE9BQUFQLE1BQUF2QixNQUFBWSxLQUFBa0IsT0FBQWIsYUFHQWYsRUFBQTBCLEVBQUEsU0FBQSxDQUFBLE9BQUEsVUFBQSxhQUFBLGtCQUVBYixFQUFBYSxFQUFBLFNBQUFtQixlQUFBLENBQUEsTUFBQSxNQUFBLFNBQUEsUUFBQSxNQUFBLFNBQUEsU0FBQSxhQUFBLFVBRUE1QixFQUFBUyxFQUFBLFNBQUFtQixlQUFBLENBQUEsYUFBQSxrQkFFQTdCLEVBQUFVLEVBQUEsU0FBQW1CLGVBQUEsQ0FBQSxnQkFpQkFoQixFQUFBckIsVUFBQXNDLFlBQUEsV0FDQSxPQUFBLElBQUFwQixFQUFBaEIsS0FBQXFCLElBQUFlLFlBQUFoRCxNQUFBWSxLQUFBcUIsSUFBQWhCLGFBR0FmLEVBQUE2QixFQUFBLE1BQUEsQ0FBQSxtQkFBQSxTQUVBYixFQUFBYSxFQUFBLE1BQUFrQixlQUFBLENBQUEsVUFRQVosRUFBQTNCLFVBQUF3QyxrQkFBQSxXQUNBLE9BQUEsSUFBQXRCLEVBQUFoQixLQUFBNkIsSUFBQVMsa0JBQUFsRCxNQUFBWSxLQUFBNkIsSUFBQXhCLGFBR0FmLEVBQUFtQyxFQUFBLE1BQUEsQ0FBQSxPQUFBLFVBQUEscUJBRUFuQixFQUFBbUIsRUFBQSxNQUFBYyxZQUFBLENBQUEsb0JBQUEsVUFNQVQsRUFBQWhDLFVBQUE4QixZQUFBLFdBQ0EsT0FBQSxJQUFBVCxFQUFBbkIsS0FBQTZCLElBQUFELFlBQUF4QyxNQUFBWSxLQUFBNkIsSUFBQXhCLGFBR0FmLEVBQUF3QyxFQUFBLE1BQUEsQ0FBQSxPQUFBLFVBQUEscUJBRUF4QixFQUFBd0IsRUFBQSxNQUFBUyxZQUFBLENBQUEsVUFJQSxDQUFBLGFBQUEsaUJBQUE3QyxRQUFBLFNBQUE4QyxHQUNBLENBQUF4QixFQUFBTixHQUFBaEIsUUFBQSxTQUFBVSxHQUVBb0MsS0FBQXBDLEVBQUFOLFlBRUFNLEVBQUFOLFVBQUEwQyxFQUFBQyxRQUFBLE9BQUEsWUFBQSxXQUNBLElBM0xBQyxFQTJMQXhELEdBM0xBd0QsRUEyTEFyQyxVQTFMQXNDLE1BQUE3QyxVQUFBOEMsTUFBQUMsS0FBQUgsSUEyTEFJLEVBQUE1RCxFQUFBQSxFQUFBNkQsT0FBQSxHQUNBQyxFQUFBaEQsS0FBQWtCLFFBQUFsQixLQUFBWSxPQUNBckMsRUFBQXlFLEVBQUFSLEdBQUFwRCxNQUFBNEQsRUFBQTlELEVBQUEwRCxNQUFBLEdBQUEsSUFDQXJFLEVBQUFJLFVBQUEsV0FDQW1FLEVBQUF2RSxFQUFBSyxlQU9BLENBQUE4QixFQUFBTSxHQUFBdEIsUUFBQSxTQUFBVSxHQUNBQSxFQUFBTixVQUFBbUQsU0FDQTdDLEVBQUFOLFVBQUFtRCxPQUFBLFNBQUFDLEVBQUFDLEdBQ0EsSUFBQUMsRUFBQXBELEtBQ0FxRCxFQUFBLEdBRUEsT0FBQSxJQUFBN0UsUUFBQSxTQUFBQyxHQUNBMkUsRUFBQUUsY0FBQUosRUFBQSxTQUFBckMsR0FDQUEsR0FJQXdDLEVBQUFFLEtBQUExQyxFQUFBTCxZQUVBZ0QsSUFBQUwsR0FBQUUsRUFBQU4sUUFBQUksRUFJQXRDLEVBQUE0QyxXQUhBaEYsRUFBQTRFLElBTkE1RSxFQUFBNEUsV0FlQSxJQUFBSyxFQUFBLENBQ0FDLEtBQUEsU0FBQUMsRUFBQUMsRUFBQUMsR0FDQSxJQUFBM0UsRUFBQUosRUFBQWdGLFVBQUEsT0FBQSxDQUFBSCxFQUFBQyxJQUNBdEYsRUFBQVksRUFBQVosUUFVQSxPQVJBQSxJQUNBQSxFQUFBeUYsZ0JBQUEsU0FBQUMsR0FDQUgsR0FDQUEsRUFBQSxJQUFBckMsRUFBQWxELEVBQUFLLE9BQUFxRixFQUFBdEMsV0FBQXBELEVBQUFxRCxnQkFLQXpDLEVBQUFFLEtBQUEsU0FBQXFDLEdBQ0EsT0FBQSxJQUFBSSxFQUFBSixNQUdBd0MsT0FBQSxTQUFBTixHQUNBLE9BQUE3RSxFQUFBZ0YsVUFBQSxpQkFBQSxDQUFBSCxNQUlBLG9CQUFBTyxRQUNBQSxPQUFBQyxRQUFBVixFQUNBUyxPQUFBQyxRQUFBQyxRQUFBRixPQUFBQyxTQUVBRSxLQUFBQyxJQUFBYixFQTFQQSxHQ0FBLElBQUFjLGFBQUEsV0FBQSxTQUFBQyxFQUFBQyxFQUFBQyxHQUFBLElBQUEsSUFBQUMsRUFBQSxFQUFBQSxFQUFBRCxFQUFBNUIsT0FBQTZCLElBQUEsQ0FBQSxJQUFBQyxFQUFBRixFQUFBQyxHQUFBQyxFQUFBQyxXQUFBRCxFQUFBQyxhQUFBLEVBQUFELEVBQUFFLGNBQUEsRUFBQSxVQUFBRixJQUFBQSxFQUFBRyxVQUFBLEdBQUFwRixPQUFBQyxlQUFBNkUsRUFBQUcsRUFBQUksSUFBQUosSUFBQSxPQUFBLFNBQUF6RSxFQUFBOEUsRUFBQUMsR0FBQSxPQUFBRCxHQUFBVCxFQUFBckUsRUFBQU4sVUFBQW9GLEdBQUFDLEdBQUFWLEVBQUFyRSxFQUFBK0UsR0FBQS9FLEdBQUEsR0FFQSxTQUFBZ0YsZ0JBQUFoQyxFQUFBaEQsR0FBQSxLQUFBZ0QsYUFBQWhELEdBQUEsTUFBQSxJQUFBaUYsVUFBQSxxQ0FNQSxJQ0xBQyxPREtBQyxTQUFBLFdBQ0EsU0FBQUEsSUFDQUgsZ0JBQUFwRixLQUFBdUYsR0E4UEEsT0EzUEFmLGFBQUFlLEVBQUEsS0FBQSxDQUFBLENBQ0FOLElBQUEsVUFDQXpFLE1BQUEsV0FDQSxPQUFBK0QsSUFBQVosS0FBQSxxQkFBQSxFQUFBLFNBQUE2QixHQUNBQSxFQUFBbEQsa0JBQUEscUJBQUEsQ0FDQW1ELFFBQUEsT0FFQXZELFlBQUEsVUFBQSxpQkFHQSxDQUNBK0MsSUFBQSx1QkFDQXpFLE1BQUEsV0FDQSxPQUFBK0UsRUFBQUcsVUFBQXJHLEtBQUEsU0FBQXFDLEdBQ0EsR0FBQUEsRUFHQSxPQUZBQSxFQUFBRSxZQUFBLHNCQUFBUSxZQUFBLHNCQUFBekIsTUFBQSxXQUVBc0MsU0FBQTVELEtBQUEsU0FBQXNHLEdBQ0EsT0FBQUEsRUFBQUMsZ0JBUUEsQ0FDQVgsSUFBQSxtQkFDQXpFLE1BQUEsU0FBQXNDLEdBRUF5QyxFQUFBTSx1QkFBQXhHLEtBQUEsU0FBQXNHLEdBQ0EsR0FBQSxFQUFBQSxFQUFBNUMsT0FDQSxPQUFBRCxFQUFBLEtBQUE2QyxLQUtBRyxNQUFBUCxFQUFBUSxjQUFBMUcsS0FBQSxTQUFBMkcsR0FDQSxPQUFBQSxFQUFBQyxTQUNBNUcsS0FBQSxTQUFBc0csR0FTQSxPQVJBSixFQUFBRyxVQUFBckcsS0FBQSxTQUFBcUMsR0FDQSxHQUFBQSxFQUFBLENBQ0EsSUFDQVQsRUFEQVMsRUFBQUUsWUFBQSxxQkFBQSxhQUNBUSxZQUFBLHNCQUNBdUQsRUFBQWpHLFFBQUEsU0FBQXdHLEdBQ0FqRixFQUFBa0YsSUFBQUQsUUFHQXBELEVBQUEsS0FBQTZDLEtBQ0FTLE1BQUEsU0FBQUMsR0FDQSxPQUFBdkQsRUFBQXVELEVBQUEsVUFRQSxDQUNBcEIsSUFBQSxzQkFDQXpFLE1BQUEsU0FBQThGLEVBQUF4RCxHQUVBeUMsRUFBQWdCLGlCQUFBLFNBQUF6SCxFQUFBNkcsR0FDQSxHQUFBN0csRUFDQWdFLEVBQUFoRSxFQUFBLFVBQ0EsQ0FDQSxJQUFBb0gsRUFBQVAsRUFBQWEsS0FBQSxTQUFBQyxHQUNBLE9BQUFBLEVBQUFILElBQUFBLElBRUFKLEVBRUFwRCxFQUFBLEtBQUFvRCxHQUdBcEQsRUFBQSw0QkFBQSxXQVVBLENBQ0FtQyxJQUFBLDJCQUNBekUsTUFBQSxTQUFBa0csRUFBQTVELEdBRUF5QyxFQUFBZ0IsaUJBQUEsU0FBQXpILEVBQUE2RyxHQUNBLEdBQUE3RyxFQUNBZ0UsRUFBQWhFLEVBQUEsVUFDQSxDQUVBLElBQUE2SCxFQUFBaEIsRUFBQWlCLE9BQUEsU0FBQUgsR0FDQSxPQUFBQSxFQUFBSSxjQUFBSCxJQUVBNUQsRUFBQSxLQUFBNkQsUUFTQSxDQUNBMUIsSUFBQSxnQ0FDQXpFLE1BQUEsU0FBQXNHLEVBQUFoRSxHQUVBeUMsRUFBQWdCLGlCQUFBLFNBQUF6SCxFQUFBNkcsR0FDQSxHQUFBN0csRUFDQWdFLEVBQUFoRSxFQUFBLFVBQ0EsQ0FFQSxJQUFBNkgsRUFBQWhCLEVBQUFpQixPQUFBLFNBQUFILEdBQ0EsT0FBQUEsRUFBQUssY0FBQUEsSUFFQWhFLEVBQUEsS0FBQTZELFFBU0EsQ0FDQTFCLElBQUEsMENBQ0F6RSxNQUFBLFNBQUFrRyxFQUFBSSxFQUFBaEUsR0FFQXlDLEVBQUFnQixpQkFBQSxTQUFBekgsRUFBQTZHLEdBQ0EsR0FBQTdHLEVBQ0FnRSxFQUFBaEUsRUFBQSxVQUNBLENBQ0EsSUFBQTZILEVBQUFoQixFQUNBLE9BQUFlLElBRUFDLEVBQUFBLEVBQUFDLE9BQUEsU0FBQUgsR0FDQSxPQUFBQSxFQUFBSSxjQUFBSCxLQUdBLE9BQUFJLElBRUFILEVBQUFBLEVBQUFDLE9BQUEsU0FBQUgsR0FDQSxPQUFBQSxFQUFBSyxjQUFBQSxLQUdBaEUsRUFBQSxLQUFBNkQsUUFTQSxDQUNBMUIsSUFBQSxxQkFDQXpFLE1BQUEsU0FBQXNDLEdBRUF5QyxFQUFBZ0IsaUJBQUEsU0FBQXpILEVBQUE2RyxHQUNBLEdBQUE3RyxFQUNBZ0UsRUFBQWhFLEVBQUEsVUFDQSxDQUVBLElBQUFpSSxFQUFBcEIsRUFBQXFCLElBQUEsU0FBQUMsRUFBQXJDLEdBQ0EsT0FBQWUsRUFBQWYsR0FBQWtDLGVBR0FJLEVBQUFILEVBQUFILE9BQUEsU0FBQUssRUFBQXJDLEdBQ0EsT0FBQW1DLEVBQUFJLFFBQUFGLElBQUFyQyxJQUVBOUIsRUFBQSxLQUFBb0UsUUFTQSxDQUNBakMsSUFBQSxnQkFDQXpFLE1BQUEsU0FBQXNDLEdBRUF5QyxFQUFBZ0IsaUJBQUEsU0FBQXpILEVBQUE2RyxHQUNBLEdBQUE3RyxFQUNBZ0UsRUFBQWhFLEVBQUEsVUFDQSxDQUVBLElBQUFzSSxFQUFBekIsRUFBQXFCLElBQUEsU0FBQUMsRUFBQXJDLEdBQ0EsT0FBQWUsRUFBQWYsR0FBQWlDLGVBR0FRLEVBQUFELEVBQUFSLE9BQUEsU0FBQUssRUFBQXJDLEdBQ0EsT0FBQXdDLEVBQUFELFFBQUFGLElBQUFyQyxJQUVBOUIsRUFBQSxLQUFBdUUsUUFTQSxDQUNBcEMsSUFBQSxtQkFDQXpFLE1BQUEsU0FBQTBGLEdBQ0EsTUFBQSx3QkFBQUEsRUFBQUksS0FPQSxDQUNBckIsSUFBQSx3QkFDQXpFLE1BQUEsU0FBQTBGLEdBQ0EsTUFBQSxRQUFBQSxFQUFBb0IsYUFPQSxDQUNBckMsSUFBQSx5QkFDQXpFLE1BQUEsU0FBQTBGLEVBQUFjLEdBRUEsSUFBQU8sRUFBQSxJQUFBQyxFQUFBRCxPQUFBLENBQUFyQixFQUFBdUIsT0FBQUMsSUFBQXhCLEVBQUF1QixPQUFBRSxLQUFBLENBQUFDLE1BQUExQixFQUFBdEMsS0FDQWlFLElBQUEzQixFQUFBdEMsS0FDQWtFLElBQUF2QyxFQUFBd0MsaUJBQUE3QixLQUdBLE9BREFxQixFQUFBUyxNQUFBMUMsUUFDQWlDLElBRUEsQ0FDQXRDLElBQUEsZUFPQWxGLElBQUEsV0FFQSxNQUFBLHdDQUlBd0YsRUFoUUEsR0NSQUksaUJBQUEsRUFDQW9CLG1CQUFBLEVBQ0FLLGNBQUEsRUFFQWEsUUFBQSxHQUtBQyxTQUFBQyxpQkFBQSxtQkFBQSxTQUFBbEUsR0FDQW1FLFVBQ0FDLHFCQUNBQyxrQkFNQSxJQUFBRCxtQkFBQSxXQUNBOUMsU0FBQThDLG1CQUFBLFNBQUF2SixFQUFBaUksR0FDQWpJLEVBRUF5SixRQUFBekosTUFBQUEsSUFFQXdGLEtBQUF5QyxjQUFBQSxFQUNBeUIsNEJBUUFBLHNCQUFBLFdBQ0EsSUFBQXpCLEVBQUEsRUFBQTFHLFVBQUEwQyxhQUFBUyxJQUFBbkQsVUFBQSxHQUFBQSxVQUFBLEdBQUFpRSxLQUFBeUMsY0FFQTBCLEVBQUFQLFNBQUFRLGVBQUEsd0JBQ0FELEVBQUFFLFVBQUEsR0FDQSxJQUFBQyxFQUFBVixTQUFBVyxjQUFBLFVBQ0FELEVBQUFELFVBQUEsb0JBQ0FDLEVBQUFwSSxNQUFBLE1BQ0FpSSxFQUFBSyxPQUFBRixHQUNBN0IsRUFBQXJILFFBQUEsU0FBQW9ILEdBQ0EsSUFBQThCLEVBQUFWLFNBQUFXLGNBQUEsVUFDQUQsRUFBQUQsVUFBQTdCLEVBQ0E4QixFQUFBcEksTUFBQXNHLEVBQ0EyQixFQUFBSyxPQUFBRixNQU9BTixjQUFBLFdBQ0EvQyxTQUFBK0MsY0FBQSxTQUFBeEosRUFBQXNJLEdBQ0F0SSxFQUVBeUosUUFBQXpKLE1BQUFBLElBRUF3RixLQUFBOEMsU0FBQUEsRUFDQTJCLHVCQVFBQSxpQkFBQSxXQUNBLElBQUEzQixFQUFBLEVBQUEvRyxVQUFBMEMsYUFBQVMsSUFBQW5ELFVBQUEsR0FBQUEsVUFBQSxHQUFBaUUsS0FBQThDLFNBRUFxQixFQUFBUCxTQUFBUSxlQUFBLG1CQUNBRCxFQUFBRSxVQUFBLEdBQ0EsSUFBQUMsRUFBQVYsU0FBQVcsY0FBQSxVQUNBRCxFQUFBRCxVQUFBLGVBQ0FDLEVBQUFwSSxNQUFBLE1BQ0FpSSxFQUFBSyxPQUFBRixHQUNBeEIsRUFBQTFILFFBQUEsU0FBQWdILEdBQ0EsSUFBQWtDLEVBQUFWLFNBQUFXLGNBQUEsVUFDQUQsRUFBQUQsVUFBQWpDLEVBQ0FrQyxFQUFBcEksTUFBQWtHLEVBQ0ErQixFQUFBSyxPQUFBRixNQU9BUixRQUFBLFdBQ0E5RCxLQUFBZ0IsT0FBQWtDLEVBQUFSLElBQUEsTUFBQSxDQUNBZ0MsT0FBQSxDQUFBLFdBQUEsV0FDQUMsS0FBQSxHQUNBQyxpQkFBQSxJQUVBMUIsRUFBQTJCLFVBQUEsb0ZBQUEsQ0FDQUMsWUFBQSxtR0FDQUMsUUFBQSxHQUNBQyxZQUFBLDBOQUNBaEQsR0FBQSxtQkFDQTBCLE1BQUExQyxRQUVBaUUscUJBTUFBLGtCQUFBLFdBQ0EsSUFBQUMsRUFBQXRCLFNBQUFRLGVBQUEsbUJBQ0FlLEVBQUF2QixTQUFBUSxlQUFBLHdCQUVBZ0IsRUFBQUYsRUFBQUcsY0FDQUMsRUFBQUgsRUFBQUUsY0FFQWpELEVBQUE4QyxFQUFBRSxHQUFBbEosTUFDQXNHLEVBQUEyQyxFQUFBRyxHQUFBcEosTUFFQStFLFNBQUFzRSx3Q0FBQW5ELEVBQUFJLEVBQUEsU0FBQWhJLEVBQUE2RyxHQUNBN0csRUFFQXlKLFFBQUF6SixNQUFBQSxJQUVBZ0wsaUJBQUFuRSxHQUNBb0UsMEJBUUFELGlCQUFBLFNBQUFuRSxHQUVBckIsS0FBQXFCLFlBQUEsR0FDQXVDLFNBQUFRLGVBQUEsb0JBQ0FDLFVBQUEsR0FHQXJFLEtBQUEyRCxTQUNBM0QsS0FBQTJELFFBQUF2SSxRQUFBLFNBQUE2SCxHQUNBLE9BQUFBLEVBQUF5QyxXQUdBMUYsS0FBQTJELFFBQUEsR0FDQTNELEtBQUFxQixZQUFBQSxHQU1Bb0Usb0JBQUEsV0FDQSxJQUFBcEUsRUFBQSxFQUFBdEYsVUFBQTBDLGFBQUFTLElBQUFuRCxVQUFBLEdBQUFBLFVBQUEsR0FBQWlFLEtBQUFxQixZQUVBc0UsRUFBQS9CLFNBQUFRLGVBQUEsb0JBQ0F3QixFQUFBaEMsU0FBQWlDLGNBQUEsSUFDQXhFLEVBQUFqRyxRQUFBLFNBQUF3RyxHQUNBK0QsRUFBQW5CLE9BQUFzQixxQkFBQWxFLElBQ0ErRCxFQUFBbkIsT0FBQW9CLEtBRUFHLG1CQU1BRCxxQkFBQSxTQUFBbEUsR0FDQSxJQUFBb0UsRUFBQXBDLFNBQUFXLGNBQUEsTUFFQTBCLEVBQUFyQyxTQUFBVyxjQUFBLE9BQ0EwQixFQUFBQyxVQUFBLGlCQUNBLElBQ0FDLEVBREFsRixTQUFBbUYsc0JBQUF4RSxHQUVBeUUsRUFBQSxPQUNBSixFQUFBSyxJQUFBSCxFQUFBLFdBQUFFLEVBQ0FKLEVBQUFNLGFBQUEsU0FBQUosRUFBQSxXQUFBRSxFQUFBLFVBQUFGLEVBQUEsV0FBQUUsRUFBQSxTQUNBSixFQUFBTSxhQUFBLFFBQUEsd0dBQ0FOLEVBQUFNLGFBQUEsTUFBQTNFLEVBQUF0QyxLQUFBLGVBQ0EwRyxFQUFBeEIsT0FBQXlCLEdBRUEsSUFBQTNHLEVBQUFzRSxTQUFBVyxjQUFBLE1BQ0FqRixFQUFBK0UsVUFBQXpDLEVBQUF0QyxLQUNBMEcsRUFBQXhCLE9BQUFsRixHQUVBLElBQUFrRCxFQUFBb0IsU0FBQVcsY0FBQSxLQUNBL0IsRUFBQTZCLFVBQUF6QyxFQUFBWSxhQUNBd0QsRUFBQXhCLE9BQUFoQyxHQUVBLElBQUFnRSxFQUFBNUMsU0FBQVcsY0FBQSxLQUNBaUMsRUFBQW5DLFVBQUF6QyxFQUFBNEUsUUFDQVIsRUFBQXhCLE9BQUFnQyxHQUVBLElBQUFDLEVBQUE3QyxTQUFBVyxjQUFBLEtBT0EsT0FOQWtDLEVBQUFwQyxVQUFBLGVBQ0FvQyxFQUFBQyxLQUFBekYsU0FBQXdDLGlCQUFBN0IsR0FDQTZFLEVBQUFGLGFBQUEsT0FBQSxVQUNBRSxFQUFBRixhQUFBLGFBQUEsMkJBQ0FQLEVBQUF4QixPQUFBaUMsR0FFQVQsR0FNQUQsZ0JBQUEsWUFDQSxFQUFBaEssVUFBQTBDLGFBQUFTLElBQUFuRCxVQUFBLEdBQUFBLFVBQUEsR0FBQWlFLEtBQUFxQixhQUVBakcsUUFBQSxTQUFBd0csR0FFQSxJQUFBcUIsRUFBQWhDLFNBQUEwRix1QkFBQS9FLEVBQUE1QixLQUFBZ0IsUUFDQWlDLEVBQUEyRCxHQUFBLFFBQ0EsV0FDQUMsT0FBQUMsU0FBQUosS0FBQXpELEVBQUE4RCxRQUFBdkQsTUFFQXhELEtBQUEyRCxRQUFBMUUsS0FBQWdFLE1DdE5BK0QsUUFBQSxtQkFBQUMsUUFBQSxpQkFBQUEsT0FBQUMsU0FBQSxTQUFBeE0sR0FBQSxjQUFBQSxHQUFBLFNBQUFBLEdBQUEsT0FBQUEsR0FBQSxtQkFBQXVNLFFBQUF2TSxFQUFBeU0sY0FBQUYsUUFBQXZNLElBQUF1TSxPQUFBekwsVUFBQSxnQkFBQWQsSUFFQSxTQUFBME0sRUFBQUMsR0FDQSxZQUFBLG9CQUFBdkgsUUFBQSxZQUFBa0gsUUFBQWxILFdBQUEsb0JBQUFELE9BQUF3SCxJQUFBLG1CQUFBQyxRQUFBQSxPQUFBQyxJQUFBRCxPQUFBRCxHQUFBQSxJQURBLENBRUFuSSxFQUFBLFdBdVFBLG9CQUFBMEUsVUF2QkEsU0FBQXBGLEdBQ0EsSUFBQWdKLEVBS0EsU0FBQUMsSUFDQUQsSUFDQUEsR0FBQSxFQUVBaEosS0FJQSxHQUFBLENBQUEsY0FBQSxZQUFBcUUsUUFBQWUsU0FBQThELFlBQ0FsSixLQUVBZ0osR0FBQSxFQUNBNUQsU0FBQUMsaUJBQUEsbUJBQUE0RCxHQUFBLEdBQ0FaLE9BQUFoRCxpQkFBQSxPQUFBNEQsR0FBQSxJQUtBRSxDQW5RQSxXQUNBLElBQUFDLEdBQUEsRUFDQUMsR0FBQSxFQUNBQyxFQUFBLEtBRUFDLEVBQUEsQ0FDQUMsTUFBQSxFQUNBQyxRQUFBLEVBQ0F6RSxLQUFBLEVBQ0EwRSxLQUFBLEVBQ0FDLE9BQUEsRUFDQUMsVUFBQSxFQUNBQyxRQUFBLEVBQ0FDLE1BQUEsRUFDQUMsT0FBQSxFQUNBQyxNQUFBLEVBQ0FDLE1BQUEsRUFDQUMsVUFBQSxFQUNBQyxrQkFBQSxHQVFBLFNBQUFDLEVBQUFDLEdBQ0EsU0FBQUEsR0FBQUEsSUFBQWpGLFVBQUEsU0FBQWlGLEVBQUFDLFVBQUEsU0FBQUQsRUFBQUMsVUFBQSxjQUFBRCxHQUFBLGFBQUFBLEVBQUFFLFdBcUNBLFNBQUFDLEVBQUFILEdBQ0FBLEVBQUFFLFVBQUFFLFNBQUEsbUJBR0FKLEVBQUFFLFVBQUFHLElBQUEsaUJBQ0FMLEVBQUF0QyxhQUFBLDJCQUFBLEtBc0NBLFNBQUE0QyxFQUFBQyxHQUNBeEIsR0FBQSxFQXFFQSxTQUFBeUIsSUFDQXpGLFNBQUFDLGlCQUFBLFlBQUF5RixHQUNBMUYsU0FBQUMsaUJBQUEsWUFBQXlGLEdBQ0ExRixTQUFBQyxpQkFBQSxVQUFBeUYsR0FDQTFGLFNBQUFDLGlCQUFBLGNBQUF5RixHQUNBMUYsU0FBQUMsaUJBQUEsY0FBQXlGLEdBQ0ExRixTQUFBQyxpQkFBQSxZQUFBeUYsR0FDQTFGLFNBQUFDLGlCQUFBLFlBQUF5RixHQUNBMUYsU0FBQUMsaUJBQUEsYUFBQXlGLEdBQ0ExRixTQUFBQyxpQkFBQSxXQUFBeUYsR0FzQkEsU0FBQUEsRUFBQUYsR0FHQSxTQUFBQSxFQUFBaEosT0FBQTBJLFNBQUFTLGdCQUlBM0IsR0FBQSxFQXpCQWhFLFNBQUE0RixvQkFBQSxZQUFBRixHQUNBMUYsU0FBQTRGLG9CQUFBLFlBQUFGLEdBQ0ExRixTQUFBNEYsb0JBQUEsVUFBQUYsR0FDQTFGLFNBQUE0RixvQkFBQSxjQUFBRixHQUNBMUYsU0FBQTRGLG9CQUFBLGNBQUFGLEdBQ0ExRixTQUFBNEYsb0JBQUEsWUFBQUYsR0FDQTFGLFNBQUE0RixvQkFBQSxZQUFBRixHQUNBMUYsU0FBQTRGLG9CQUFBLGFBQUFGLEdBQ0ExRixTQUFBNEYsb0JBQUEsV0FBQUYsSUFxQkExRixTQUFBQyxpQkFBQSxVQWhJQSxTQUFBdUYsR0FDQVIsRUFBQWhGLFNBQUE2RixnQkFDQVQsRUFBQXBGLFNBQUE2RixlQUdBN0IsR0FBQSxJQTJIQSxHQUNBaEUsU0FBQUMsaUJBQUEsWUFBQXNGLEdBQUEsR0FDQXZGLFNBQUFDLGlCQUFBLGNBQUFzRixHQUFBLEdBQ0F2RixTQUFBQyxpQkFBQSxhQUFBc0YsR0FBQSxHQUNBdkYsU0FBQUMsaUJBQUEsUUF6R0EsU0FBQXVGLEdBOUVBLElBQUFQLEVBQ0FhLEVBQ0FDLEVBOEVBZixFQUFBUSxFQUFBaEosVUFJQXdILElBcEZBaUIsRUFvRkFPLEVBQUFoSixPQW5GQXNKLEVBQUFiLEVBQUFhLEtBR0EsVUFGQUMsRUFBQWQsRUFBQWMsVUFFQTVCLEVBQUEyQixLQUFBYixFQUFBZSxVQUlBLFlBQUFELElBQUFkLEVBQUFlLFVBSUFmLEVBQUFnQixxQkF5RUFiLEVBQUFJLEVBQUFoSixVQWtHQSxHQUNBd0QsU0FBQUMsaUJBQUEsT0EzRkEsU0FBQXVGLEdBeERBLElBQUFQLEVBeURBRCxFQUFBUSxFQUFBaEosVUFJQWdKLEVBQUFoSixPQUFBMkksVUFBQUUsU0FBQSxrQkFBQUcsRUFBQWhKLE9BQUEwSixhQUFBLCtCQUtBakMsR0FBQSxFQUNBaEIsT0FBQWtELGFBQUFqQyxHQUNBQSxFQUFBakIsT0FBQW1ELFdBQUEsV0FDQW5DLEdBQUEsRUFDQWhCLE9BQUFrRCxhQUFBakMsSUFDQSxNQXZFQWUsRUF3RUFPLEVBQUFoSixRQXZFQTBKLGFBQUEsOEJBR0FqQixFQUFBRSxVQUFBckQsT0FBQSxpQkFDQW1ELEVBQUFvQixnQkFBQSxnQ0E4SUEsR0FDQXJHLFNBQUFDLGlCQUFBLG1CQW5FQSxTQUFBdUYsR0FDQSxVQUFBeEYsU0FBQXNHLGtCQUtBckMsSUFDQUQsR0FBQSxHQUVBeUIsT0EwREEsR0FDQUEsSUFFQXpGLFNBQUF1RyxLQUFBcEIsVUFBQUcsSUFBQSIsImZpbGUiOiJtYWluLmJ1bmRsZS5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuKGZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gdG9BcnJheShhcnIpIHtcbiAgICByZXR1cm4gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJyKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHByb21pc2lmeVJlcXVlc3QocmVxdWVzdCkge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICByZXF1ZXN0Lm9uc3VjY2VzcyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmVzb2x2ZShyZXF1ZXN0LnJlc3VsdCk7XG4gICAgICB9O1xuXG4gICAgICByZXF1ZXN0Lm9uZXJyb3IgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJlamVjdChyZXF1ZXN0LmVycm9yKTtcbiAgICAgIH07XG4gICAgfSk7XG4gIH1cblxuICBmdW5jdGlvbiBwcm9taXNpZnlSZXF1ZXN0Q2FsbChvYmosIG1ldGhvZCwgYXJncykge1xuICAgIHZhciByZXF1ZXN0O1xuICAgIHZhciBwID0gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgcmVxdWVzdCA9IG9ialttZXRob2RdLmFwcGx5KG9iaiwgYXJncyk7XG4gICAgICBwcm9taXNpZnlSZXF1ZXN0KHJlcXVlc3QpLnRoZW4ocmVzb2x2ZSwgcmVqZWN0KTtcbiAgICB9KTtcblxuICAgIHAucmVxdWVzdCA9IHJlcXVlc3Q7XG4gICAgcmV0dXJuIHA7XG4gIH1cblxuICBmdW5jdGlvbiBwcm9taXNpZnlDdXJzb3JSZXF1ZXN0Q2FsbChvYmosIG1ldGhvZCwgYXJncykge1xuICAgIHZhciBwID0gcHJvbWlzaWZ5UmVxdWVzdENhbGwob2JqLCBtZXRob2QsIGFyZ3MpO1xuICAgIHJldHVybiBwLnRoZW4oZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICBpZiAoIXZhbHVlKSByZXR1cm47XG4gICAgICByZXR1cm4gbmV3IEN1cnNvcih2YWx1ZSwgcC5yZXF1ZXN0KTtcbiAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHByb3h5UHJvcGVydGllcyhQcm94eUNsYXNzLCB0YXJnZXRQcm9wLCBwcm9wZXJ0aWVzKSB7XG4gICAgcHJvcGVydGllcy5mb3JFYWNoKGZ1bmN0aW9uIChwcm9wKSB7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoUHJveHlDbGFzcy5wcm90b3R5cGUsIHByb3AsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgICAgcmV0dXJuIHRoaXNbdGFyZ2V0UHJvcF1bcHJvcF07XG4gICAgICAgIH0sXG4gICAgICAgIHNldDogZnVuY3Rpb24gc2V0KHZhbCkge1xuICAgICAgICAgIHRoaXNbdGFyZ2V0UHJvcF1bcHJvcF0gPSB2YWw7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gcHJveHlSZXF1ZXN0TWV0aG9kcyhQcm94eUNsYXNzLCB0YXJnZXRQcm9wLCBDb25zdHJ1Y3RvciwgcHJvcGVydGllcykge1xuICAgIHByb3BlcnRpZXMuZm9yRWFjaChmdW5jdGlvbiAocHJvcCkge1xuICAgICAgaWYgKCEocHJvcCBpbiBDb25zdHJ1Y3Rvci5wcm90b3R5cGUpKSByZXR1cm47XG4gICAgICBQcm94eUNsYXNzLnByb3RvdHlwZVtwcm9wXSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHByb21pc2lmeVJlcXVlc3RDYWxsKHRoaXNbdGFyZ2V0UHJvcF0sIHByb3AsIGFyZ3VtZW50cyk7XG4gICAgICB9O1xuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gcHJveHlNZXRob2RzKFByb3h5Q2xhc3MsIHRhcmdldFByb3AsIENvbnN0cnVjdG9yLCBwcm9wZXJ0aWVzKSB7XG4gICAgcHJvcGVydGllcy5mb3JFYWNoKGZ1bmN0aW9uIChwcm9wKSB7XG4gICAgICBpZiAoIShwcm9wIGluIENvbnN0cnVjdG9yLnByb3RvdHlwZSkpIHJldHVybjtcbiAgICAgIFByb3h5Q2xhc3MucHJvdG90eXBlW3Byb3BdID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpc1t0YXJnZXRQcm9wXVtwcm9wXS5hcHBseSh0aGlzW3RhcmdldFByb3BdLCBhcmd1bWVudHMpO1xuICAgICAgfTtcbiAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHByb3h5Q3Vyc29yUmVxdWVzdE1ldGhvZHMoUHJveHlDbGFzcywgdGFyZ2V0UHJvcCwgQ29uc3RydWN0b3IsIHByb3BlcnRpZXMpIHtcbiAgICBwcm9wZXJ0aWVzLmZvckVhY2goZnVuY3Rpb24gKHByb3ApIHtcbiAgICAgIGlmICghKHByb3AgaW4gQ29uc3RydWN0b3IucHJvdG90eXBlKSkgcmV0dXJuO1xuICAgICAgUHJveHlDbGFzcy5wcm90b3R5cGVbcHJvcF0gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBwcm9taXNpZnlDdXJzb3JSZXF1ZXN0Q2FsbCh0aGlzW3RhcmdldFByb3BdLCBwcm9wLCBhcmd1bWVudHMpO1xuICAgICAgfTtcbiAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIEluZGV4KGluZGV4KSB7XG4gICAgdGhpcy5faW5kZXggPSBpbmRleDtcbiAgfVxuXG4gIHByb3h5UHJvcGVydGllcyhJbmRleCwgJ19pbmRleCcsIFsnbmFtZScsICdrZXlQYXRoJywgJ211bHRpRW50cnknLCAndW5pcXVlJ10pO1xuXG4gIHByb3h5UmVxdWVzdE1ldGhvZHMoSW5kZXgsICdfaW5kZXgnLCBJREJJbmRleCwgWydnZXQnLCAnZ2V0S2V5JywgJ2dldEFsbCcsICdnZXRBbGxLZXlzJywgJ2NvdW50J10pO1xuXG4gIHByb3h5Q3Vyc29yUmVxdWVzdE1ldGhvZHMoSW5kZXgsICdfaW5kZXgnLCBJREJJbmRleCwgWydvcGVuQ3Vyc29yJywgJ29wZW5LZXlDdXJzb3InXSk7XG5cbiAgZnVuY3Rpb24gQ3Vyc29yKGN1cnNvciwgcmVxdWVzdCkge1xuICAgIHRoaXMuX2N1cnNvciA9IGN1cnNvcjtcbiAgICB0aGlzLl9yZXF1ZXN0ID0gcmVxdWVzdDtcbiAgfVxuXG4gIHByb3h5UHJvcGVydGllcyhDdXJzb3IsICdfY3Vyc29yJywgWydkaXJlY3Rpb24nLCAna2V5JywgJ3ByaW1hcnlLZXknLCAndmFsdWUnXSk7XG5cbiAgcHJveHlSZXF1ZXN0TWV0aG9kcyhDdXJzb3IsICdfY3Vyc29yJywgSURCQ3Vyc29yLCBbJ3VwZGF0ZScsICdkZWxldGUnXSk7XG5cbiAgLy8gcHJveHkgJ25leHQnIG1ldGhvZHNcbiAgWydhZHZhbmNlJywgJ2NvbnRpbnVlJywgJ2NvbnRpbnVlUHJpbWFyeUtleSddLmZvckVhY2goZnVuY3Rpb24gKG1ldGhvZE5hbWUpIHtcbiAgICBpZiAoIShtZXRob2ROYW1lIGluIElEQkN1cnNvci5wcm90b3R5cGUpKSByZXR1cm47XG4gICAgQ3Vyc29yLnByb3RvdHlwZVttZXRob2ROYW1lXSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBjdXJzb3IgPSB0aGlzO1xuICAgICAgdmFyIGFyZ3MgPSBhcmd1bWVudHM7XG4gICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCkudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgICAgIGN1cnNvci5fY3Vyc29yW21ldGhvZE5hbWVdLmFwcGx5KGN1cnNvci5fY3Vyc29yLCBhcmdzKTtcbiAgICAgICAgcmV0dXJuIHByb21pc2lmeVJlcXVlc3QoY3Vyc29yLl9yZXF1ZXN0KS50aGVuKGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgIGlmICghdmFsdWUpIHJldHVybjtcbiAgICAgICAgICByZXR1cm4gbmV3IEN1cnNvcih2YWx1ZSwgY3Vyc29yLl9yZXF1ZXN0KTtcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9O1xuICB9KTtcblxuICBmdW5jdGlvbiBPYmplY3RTdG9yZShzdG9yZSkge1xuICAgIHRoaXMuX3N0b3JlID0gc3RvcmU7XG4gIH1cblxuICBPYmplY3RTdG9yZS5wcm90b3R5cGUuY3JlYXRlSW5kZXggPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIG5ldyBJbmRleCh0aGlzLl9zdG9yZS5jcmVhdGVJbmRleC5hcHBseSh0aGlzLl9zdG9yZSwgYXJndW1lbnRzKSk7XG4gIH07XG5cbiAgT2JqZWN0U3RvcmUucHJvdG90eXBlLmluZGV4ID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBuZXcgSW5kZXgodGhpcy5fc3RvcmUuaW5kZXguYXBwbHkodGhpcy5fc3RvcmUsIGFyZ3VtZW50cykpO1xuICB9O1xuXG4gIHByb3h5UHJvcGVydGllcyhPYmplY3RTdG9yZSwgJ19zdG9yZScsIFsnbmFtZScsICdrZXlQYXRoJywgJ2luZGV4TmFtZXMnLCAnYXV0b0luY3JlbWVudCddKTtcblxuICBwcm94eVJlcXVlc3RNZXRob2RzKE9iamVjdFN0b3JlLCAnX3N0b3JlJywgSURCT2JqZWN0U3RvcmUsIFsncHV0JywgJ2FkZCcsICdkZWxldGUnLCAnY2xlYXInLCAnZ2V0JywgJ2dldEFsbCcsICdnZXRLZXknLCAnZ2V0QWxsS2V5cycsICdjb3VudCddKTtcblxuICBwcm94eUN1cnNvclJlcXVlc3RNZXRob2RzKE9iamVjdFN0b3JlLCAnX3N0b3JlJywgSURCT2JqZWN0U3RvcmUsIFsnb3BlbkN1cnNvcicsICdvcGVuS2V5Q3Vyc29yJ10pO1xuXG4gIHByb3h5TWV0aG9kcyhPYmplY3RTdG9yZSwgJ19zdG9yZScsIElEQk9iamVjdFN0b3JlLCBbJ2RlbGV0ZUluZGV4J10pO1xuXG4gIGZ1bmN0aW9uIFRyYW5zYWN0aW9uKGlkYlRyYW5zYWN0aW9uKSB7XG4gICAgdGhpcy5fdHggPSBpZGJUcmFuc2FjdGlvbjtcbiAgICB0aGlzLmNvbXBsZXRlID0gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgaWRiVHJhbnNhY3Rpb24ub25jb21wbGV0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmVzb2x2ZSgpO1xuICAgICAgfTtcbiAgICAgIGlkYlRyYW5zYWN0aW9uLm9uZXJyb3IgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJlamVjdChpZGJUcmFuc2FjdGlvbi5lcnJvcik7XG4gICAgICB9O1xuICAgICAgaWRiVHJhbnNhY3Rpb24ub25hYm9ydCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmVqZWN0KGlkYlRyYW5zYWN0aW9uLmVycm9yKTtcbiAgICAgIH07XG4gICAgfSk7XG4gIH1cblxuICBUcmFuc2FjdGlvbi5wcm90b3R5cGUub2JqZWN0U3RvcmUgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIG5ldyBPYmplY3RTdG9yZSh0aGlzLl90eC5vYmplY3RTdG9yZS5hcHBseSh0aGlzLl90eCwgYXJndW1lbnRzKSk7XG4gIH07XG5cbiAgcHJveHlQcm9wZXJ0aWVzKFRyYW5zYWN0aW9uLCAnX3R4JywgWydvYmplY3RTdG9yZU5hbWVzJywgJ21vZGUnXSk7XG5cbiAgcHJveHlNZXRob2RzKFRyYW5zYWN0aW9uLCAnX3R4JywgSURCVHJhbnNhY3Rpb24sIFsnYWJvcnQnXSk7XG5cbiAgZnVuY3Rpb24gVXBncmFkZURCKGRiLCBvbGRWZXJzaW9uLCB0cmFuc2FjdGlvbikge1xuICAgIHRoaXMuX2RiID0gZGI7XG4gICAgdGhpcy5vbGRWZXJzaW9uID0gb2xkVmVyc2lvbjtcbiAgICB0aGlzLnRyYW5zYWN0aW9uID0gbmV3IFRyYW5zYWN0aW9uKHRyYW5zYWN0aW9uKTtcbiAgfVxuXG4gIFVwZ3JhZGVEQi5wcm90b3R5cGUuY3JlYXRlT2JqZWN0U3RvcmUgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIG5ldyBPYmplY3RTdG9yZSh0aGlzLl9kYi5jcmVhdGVPYmplY3RTdG9yZS5hcHBseSh0aGlzLl9kYiwgYXJndW1lbnRzKSk7XG4gIH07XG5cbiAgcHJveHlQcm9wZXJ0aWVzKFVwZ3JhZGVEQiwgJ19kYicsIFsnbmFtZScsICd2ZXJzaW9uJywgJ29iamVjdFN0b3JlTmFtZXMnXSk7XG5cbiAgcHJveHlNZXRob2RzKFVwZ3JhZGVEQiwgJ19kYicsIElEQkRhdGFiYXNlLCBbJ2RlbGV0ZU9iamVjdFN0b3JlJywgJ2Nsb3NlJ10pO1xuXG4gIGZ1bmN0aW9uIERCKGRiKSB7XG4gICAgdGhpcy5fZGIgPSBkYjtcbiAgfVxuXG4gIERCLnByb3RvdHlwZS50cmFuc2FjdGlvbiA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gbmV3IFRyYW5zYWN0aW9uKHRoaXMuX2RiLnRyYW5zYWN0aW9uLmFwcGx5KHRoaXMuX2RiLCBhcmd1bWVudHMpKTtcbiAgfTtcblxuICBwcm94eVByb3BlcnRpZXMoREIsICdfZGInLCBbJ25hbWUnLCAndmVyc2lvbicsICdvYmplY3RTdG9yZU5hbWVzJ10pO1xuXG4gIHByb3h5TWV0aG9kcyhEQiwgJ19kYicsIElEQkRhdGFiYXNlLCBbJ2Nsb3NlJ10pO1xuXG4gIC8vIEFkZCBjdXJzb3IgaXRlcmF0b3JzXG4gIC8vIFRPRE86IHJlbW92ZSB0aGlzIG9uY2UgYnJvd3NlcnMgZG8gdGhlIHJpZ2h0IHRoaW5nIHdpdGggcHJvbWlzZXNcbiAgWydvcGVuQ3Vyc29yJywgJ29wZW5LZXlDdXJzb3InXS5mb3JFYWNoKGZ1bmN0aW9uIChmdW5jTmFtZSkge1xuICAgIFtPYmplY3RTdG9yZSwgSW5kZXhdLmZvckVhY2goZnVuY3Rpb24gKENvbnN0cnVjdG9yKSB7XG4gICAgICAvLyBEb24ndCBjcmVhdGUgaXRlcmF0ZUtleUN1cnNvciBpZiBvcGVuS2V5Q3Vyc29yIGRvZXNuJ3QgZXhpc3QuXG4gICAgICBpZiAoIShmdW5jTmFtZSBpbiBDb25zdHJ1Y3Rvci5wcm90b3R5cGUpKSByZXR1cm47XG5cbiAgICAgIENvbnN0cnVjdG9yLnByb3RvdHlwZVtmdW5jTmFtZS5yZXBsYWNlKCdvcGVuJywgJ2l0ZXJhdGUnKV0gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBhcmdzID0gdG9BcnJheShhcmd1bWVudHMpO1xuICAgICAgICB2YXIgY2FsbGJhY2sgPSBhcmdzW2FyZ3MubGVuZ3RoIC0gMV07XG4gICAgICAgIHZhciBuYXRpdmVPYmplY3QgPSB0aGlzLl9zdG9yZSB8fCB0aGlzLl9pbmRleDtcbiAgICAgICAgdmFyIHJlcXVlc3QgPSBuYXRpdmVPYmplY3RbZnVuY05hbWVdLmFwcGx5KG5hdGl2ZU9iamVjdCwgYXJncy5zbGljZSgwLCAtMSkpO1xuICAgICAgICByZXF1ZXN0Lm9uc3VjY2VzcyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBjYWxsYmFjayhyZXF1ZXN0LnJlc3VsdCk7XG4gICAgICAgIH07XG4gICAgICB9O1xuICAgIH0pO1xuICB9KTtcblxuICAvLyBwb2x5ZmlsbCBnZXRBbGxcbiAgW0luZGV4LCBPYmplY3RTdG9yZV0uZm9yRWFjaChmdW5jdGlvbiAoQ29uc3RydWN0b3IpIHtcbiAgICBpZiAoQ29uc3RydWN0b3IucHJvdG90eXBlLmdldEFsbCkgcmV0dXJuO1xuICAgIENvbnN0cnVjdG9yLnByb3RvdHlwZS5nZXRBbGwgPSBmdW5jdGlvbiAocXVlcnksIGNvdW50KSB7XG4gICAgICB2YXIgaW5zdGFuY2UgPSB0aGlzO1xuICAgICAgdmFyIGl0ZW1zID0gW107XG5cbiAgICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSkge1xuICAgICAgICBpbnN0YW5jZS5pdGVyYXRlQ3Vyc29yKHF1ZXJ5LCBmdW5jdGlvbiAoY3Vyc29yKSB7XG4gICAgICAgICAgaWYgKCFjdXJzb3IpIHtcbiAgICAgICAgICAgIHJlc29sdmUoaXRlbXMpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpdGVtcy5wdXNoKGN1cnNvci52YWx1ZSk7XG5cbiAgICAgICAgICBpZiAoY291bnQgIT09IHVuZGVmaW5lZCAmJiBpdGVtcy5sZW5ndGggPT0gY291bnQpIHtcbiAgICAgICAgICAgIHJlc29sdmUoaXRlbXMpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cbiAgICAgICAgICBjdXJzb3IuY29udGludWUoKTtcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9O1xuICB9KTtcblxuICB2YXIgZXhwID0ge1xuICAgIG9wZW46IGZ1bmN0aW9uIG9wZW4obmFtZSwgdmVyc2lvbiwgdXBncmFkZUNhbGxiYWNrKSB7XG4gICAgICB2YXIgcCA9IHByb21pc2lmeVJlcXVlc3RDYWxsKGluZGV4ZWREQiwgJ29wZW4nLCBbbmFtZSwgdmVyc2lvbl0pO1xuICAgICAgdmFyIHJlcXVlc3QgPSBwLnJlcXVlc3Q7XG5cbiAgICAgIGlmIChyZXF1ZXN0KSB7XG4gICAgICAgIHJlcXVlc3Qub251cGdyYWRlbmVlZGVkID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgICAgaWYgKHVwZ3JhZGVDYWxsYmFjaykge1xuICAgICAgICAgICAgdXBncmFkZUNhbGxiYWNrKG5ldyBVcGdyYWRlREIocmVxdWVzdC5yZXN1bHQsIGV2ZW50Lm9sZFZlcnNpb24sIHJlcXVlc3QudHJhbnNhY3Rpb24pKTtcbiAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBwLnRoZW4oZnVuY3Rpb24gKGRiKSB7XG4gICAgICAgIHJldHVybiBuZXcgREIoZGIpO1xuICAgICAgfSk7XG4gICAgfSxcbiAgICBkZWxldGU6IGZ1bmN0aW9uIF9kZWxldGUobmFtZSkge1xuICAgICAgcmV0dXJuIHByb21pc2lmeVJlcXVlc3RDYWxsKGluZGV4ZWREQiwgJ2RlbGV0ZURhdGFiYXNlJywgW25hbWVdKTtcbiAgICB9XG4gIH07XG5cbiAgaWYgKHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgbW9kdWxlLmV4cG9ydHMgPSBleHA7XG4gICAgbW9kdWxlLmV4cG9ydHMuZGVmYXVsdCA9IG1vZHVsZS5leHBvcnRzO1xuICB9IGVsc2Uge1xuICAgIHNlbGYuaWRiID0gZXhwO1xuICB9XG59KSgpOyIsIid1c2Ugc3RyaWN0JztcblxudmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0oKTtcblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuLyoqXHJcbiAqIENvbW1vbiBkYXRhYmFzZSBoZWxwZXIgZnVuY3Rpb25zLlxyXG4gKi9cblxudmFyIERCSGVscGVyID0gZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBEQkhlbHBlcigpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgREJIZWxwZXIpO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKERCSGVscGVyLCBudWxsLCBbe1xuICAgIGtleTogJ29wZW5JZGInLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBvcGVuSWRiKCkge1xuICAgICAgcmV0dXJuIGlkYi5vcGVuKCdyZXN0YXVyYW50LXJldmlld3MnLCAxLCBmdW5jdGlvbiAodXBncmFkZURiKSB7XG4gICAgICAgIHZhciBzdG9yZSA9IHVwZ3JhZGVEYi5jcmVhdGVPYmplY3RTdG9yZSgncmVzdGF1cmFudC1yZXZpZXdzJywge1xuICAgICAgICAgIGtleVBhdGg6ICdpZCdcbiAgICAgICAgfSk7XG4gICAgICAgIHN0b3JlLmNyZWF0ZUluZGV4KCdieS1kYXRlJywgJ3VwZGF0ZWRBdCcpO1xuICAgICAgfSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnZ2V0Q2FjaGVkUmVzdGF1cmFudHMnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRDYWNoZWRSZXN0YXVyYW50cygpIHtcbiAgICAgIHJldHVybiBEQkhlbHBlci5vcGVuSWRiKCkudGhlbihmdW5jdGlvbiAoZGIpIHtcbiAgICAgICAgaWYgKCFkYikgcmV0dXJuO1xuICAgICAgICB2YXIgaW5kZXggPSBkYi50cmFuc2FjdGlvbigncmVzdGF1cmFudC1yZXZpZXdzJykub2JqZWN0U3RvcmUoJ3Jlc3RhdXJhbnQtcmV2aWV3cycpLmluZGV4KCdieS1kYXRlJyk7XG5cbiAgICAgICAgcmV0dXJuIGluZGV4LmdldEFsbCgpLnRoZW4oZnVuY3Rpb24gKHJlc3RhdXJhbnRzKSB7XG4gICAgICAgICAgcmV0dXJuIHJlc3RhdXJhbnRzLnJldmVyc2UoKTtcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9XG4gICAgLyoqXHJcbiAgICAgKiBGZXRjaCBhbGwgcmVzdGF1cmFudHMuXHJcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnZmV0Y2hSZXN0YXVyYW50cycsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGZldGNoUmVzdGF1cmFudHMoY2FsbGJhY2spIHtcbiAgICAgIC8vIGdldCBkYXRhIGZyb20gaWRiIGlmIHRoZXJlIGFyZSBkYXRhXG4gICAgICBEQkhlbHBlci5nZXRDYWNoZWRSZXN0YXVyYW50cygpLnRoZW4oZnVuY3Rpb24gKHJlc3RhdXJhbnRzKSB7XG4gICAgICAgIGlmIChyZXN0YXVyYW50cy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgcmV0dXJuIGNhbGxiYWNrKG51bGwsIHJlc3RhdXJhbnRzKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG5cbiAgICAgIC8vIGZldGNoIGRhdGEgZnJvbSB0aGUgbmV0d29yayBhbmQgdXBkYXRlIHRoZSBpZGJcbiAgICAgIGZldGNoKERCSGVscGVyLkRBVEFCQVNFX1VSTCkudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHtcbiAgICAgICAgcmV0dXJuIHJlc3BvbnNlLmpzb24oKTtcbiAgICAgIH0pLnRoZW4oZnVuY3Rpb24gKHJlc3RhdXJhbnRzKSB7XG4gICAgICAgIERCSGVscGVyLm9wZW5JZGIoKS50aGVuKGZ1bmN0aW9uIChkYikge1xuICAgICAgICAgIGlmICghZGIpIHJldHVybjtcbiAgICAgICAgICB2YXIgdHggPSBkYi50cmFuc2FjdGlvbigncmVzdGF1cmFudC1yZXZpZXdzJywgJ3JlYWR3cml0ZScpO1xuICAgICAgICAgIHZhciBzdG9yZSA9IHR4Lm9iamVjdFN0b3JlKCdyZXN0YXVyYW50LXJldmlld3MnKTtcbiAgICAgICAgICByZXN0YXVyYW50cy5mb3JFYWNoKGZ1bmN0aW9uIChyZXN0YXVyYW50KSB7XG4gICAgICAgICAgICBzdG9yZS5wdXQocmVzdGF1cmFudCk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gY2FsbGJhY2sobnVsbCwgcmVzdGF1cmFudHMpO1xuICAgICAgfSkuY2F0Y2goZnVuY3Rpb24gKGVycikge1xuICAgICAgICByZXR1cm4gY2FsbGJhY2soZXJyLCBudWxsKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxyXG4gICAgICogRmV0Y2ggYSByZXN0YXVyYW50IGJ5IGl0cyBJRC5cclxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdmZXRjaFJlc3RhdXJhbnRCeUlkJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gZmV0Y2hSZXN0YXVyYW50QnlJZChpZCwgY2FsbGJhY2spIHtcbiAgICAgIC8vIGZldGNoIGFsbCByZXN0YXVyYW50cyB3aXRoIHByb3BlciBlcnJvciBoYW5kbGluZy5cbiAgICAgIERCSGVscGVyLmZldGNoUmVzdGF1cmFudHMoZnVuY3Rpb24gKGVycm9yLCByZXN0YXVyYW50cykge1xuICAgICAgICBpZiAoZXJyb3IpIHtcbiAgICAgICAgICBjYWxsYmFjayhlcnJvciwgbnVsbCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdmFyIHJlc3RhdXJhbnQgPSByZXN0YXVyYW50cy5maW5kKGZ1bmN0aW9uIChyKSB7XG4gICAgICAgICAgICByZXR1cm4gci5pZCA9PSBpZDtcbiAgICAgICAgICB9KTtcbiAgICAgICAgICBpZiAocmVzdGF1cmFudCkge1xuICAgICAgICAgICAgLy8gR290IHRoZSByZXN0YXVyYW50XG4gICAgICAgICAgICBjYWxsYmFjayhudWxsLCByZXN0YXVyYW50KTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gUmVzdGF1cmFudCBkb2VzIG5vdCBleGlzdCBpbiB0aGUgZGF0YWJhc2VcbiAgICAgICAgICAgIGNhbGxiYWNrKCdSZXN0YXVyYW50IGRvZXMgbm90IGV4aXN0JywgbnVsbCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcclxuICAgICAqIEZldGNoIHJlc3RhdXJhbnRzIGJ5IGEgY3Vpc2luZSB0eXBlIHdpdGggcHJvcGVyIGVycm9yIGhhbmRsaW5nLlxyXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ2ZldGNoUmVzdGF1cmFudEJ5Q3Vpc2luZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGZldGNoUmVzdGF1cmFudEJ5Q3Vpc2luZShjdWlzaW5lLCBjYWxsYmFjaykge1xuICAgICAgLy8gRmV0Y2ggYWxsIHJlc3RhdXJhbnRzICB3aXRoIHByb3BlciBlcnJvciBoYW5kbGluZ1xuICAgICAgREJIZWxwZXIuZmV0Y2hSZXN0YXVyYW50cyhmdW5jdGlvbiAoZXJyb3IsIHJlc3RhdXJhbnRzKSB7XG4gICAgICAgIGlmIChlcnJvcikge1xuICAgICAgICAgIGNhbGxiYWNrKGVycm9yLCBudWxsKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyBGaWx0ZXIgcmVzdGF1cmFudHMgdG8gaGF2ZSBvbmx5IGdpdmVuIGN1aXNpbmUgdHlwZVxuICAgICAgICAgIHZhciByZXN1bHRzID0gcmVzdGF1cmFudHMuZmlsdGVyKGZ1bmN0aW9uIChyKSB7XG4gICAgICAgICAgICByZXR1cm4gci5jdWlzaW5lX3R5cGUgPT0gY3Vpc2luZTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgICBjYWxsYmFjayhudWxsLCByZXN1bHRzKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLyoqXHJcbiAgICAgKiBGZXRjaCByZXN0YXVyYW50cyBieSBhIG5laWdoYm9yaG9vZCB3aXRoIHByb3BlciBlcnJvciBoYW5kbGluZy5cclxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdmZXRjaFJlc3RhdXJhbnRCeU5laWdoYm9yaG9vZCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGZldGNoUmVzdGF1cmFudEJ5TmVpZ2hib3Job29kKG5laWdoYm9yaG9vZCwgY2FsbGJhY2spIHtcbiAgICAgIC8vIEZldGNoIGFsbCByZXN0YXVyYW50c1xuICAgICAgREJIZWxwZXIuZmV0Y2hSZXN0YXVyYW50cyhmdW5jdGlvbiAoZXJyb3IsIHJlc3RhdXJhbnRzKSB7XG4gICAgICAgIGlmIChlcnJvcikge1xuICAgICAgICAgIGNhbGxiYWNrKGVycm9yLCBudWxsKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyBGaWx0ZXIgcmVzdGF1cmFudHMgdG8gaGF2ZSBvbmx5IGdpdmVuIG5laWdoYm9yaG9vZFxuICAgICAgICAgIHZhciByZXN1bHRzID0gcmVzdGF1cmFudHMuZmlsdGVyKGZ1bmN0aW9uIChyKSB7XG4gICAgICAgICAgICByZXR1cm4gci5uZWlnaGJvcmhvb2QgPT0gbmVpZ2hib3Job29kO1xuICAgICAgICAgIH0pO1xuICAgICAgICAgIGNhbGxiYWNrKG51bGwsIHJlc3VsdHMpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcclxuICAgICAqIEZldGNoIHJlc3RhdXJhbnRzIGJ5IGEgY3Vpc2luZSBhbmQgYSBuZWlnaGJvcmhvb2Qgd2l0aCBwcm9wZXIgZXJyb3IgaGFuZGxpbmcuXHJcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnZmV0Y2hSZXN0YXVyYW50QnlDdWlzaW5lQW5kTmVpZ2hib3Job29kJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gZmV0Y2hSZXN0YXVyYW50QnlDdWlzaW5lQW5kTmVpZ2hib3Job29kKGN1aXNpbmUsIG5laWdoYm9yaG9vZCwgY2FsbGJhY2spIHtcbiAgICAgIC8vIEZldGNoIGFsbCByZXN0YXVyYW50c1xuICAgICAgREJIZWxwZXIuZmV0Y2hSZXN0YXVyYW50cyhmdW5jdGlvbiAoZXJyb3IsIHJlc3RhdXJhbnRzKSB7XG4gICAgICAgIGlmIChlcnJvcikge1xuICAgICAgICAgIGNhbGxiYWNrKGVycm9yLCBudWxsKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB2YXIgcmVzdWx0cyA9IHJlc3RhdXJhbnRzO1xuICAgICAgICAgIGlmIChjdWlzaW5lICE9ICdhbGwnKSB7XG4gICAgICAgICAgICAvLyBmaWx0ZXIgYnkgY3Vpc2luZVxuICAgICAgICAgICAgcmVzdWx0cyA9IHJlc3VsdHMuZmlsdGVyKGZ1bmN0aW9uIChyKSB7XG4gICAgICAgICAgICAgIHJldHVybiByLmN1aXNpbmVfdHlwZSA9PSBjdWlzaW5lO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChuZWlnaGJvcmhvb2QgIT0gJ2FsbCcpIHtcbiAgICAgICAgICAgIC8vIGZpbHRlciBieSBuZWlnaGJvcmhvb2RcbiAgICAgICAgICAgIHJlc3VsdHMgPSByZXN1bHRzLmZpbHRlcihmdW5jdGlvbiAocikge1xuICAgICAgICAgICAgICByZXR1cm4gci5uZWlnaGJvcmhvb2QgPT0gbmVpZ2hib3Job29kO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGNhbGxiYWNrKG51bGwsIHJlc3VsdHMpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcclxuICAgICAqIEZldGNoIGFsbCBuZWlnaGJvcmhvb2RzIHdpdGggcHJvcGVyIGVycm9yIGhhbmRsaW5nLlxyXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ2ZldGNoTmVpZ2hib3Job29kcycsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGZldGNoTmVpZ2hib3Job29kcyhjYWxsYmFjaykge1xuICAgICAgLy8gRmV0Y2ggYWxsIHJlc3RhdXJhbnRzXG4gICAgICBEQkhlbHBlci5mZXRjaFJlc3RhdXJhbnRzKGZ1bmN0aW9uIChlcnJvciwgcmVzdGF1cmFudHMpIHtcbiAgICAgICAgaWYgKGVycm9yKSB7XG4gICAgICAgICAgY2FsbGJhY2soZXJyb3IsIG51bGwpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIEdldCBhbGwgbmVpZ2hib3Job29kcyBmcm9tIGFsbCByZXN0YXVyYW50c1xuICAgICAgICAgIHZhciBuZWlnaGJvcmhvb2RzID0gcmVzdGF1cmFudHMubWFwKGZ1bmN0aW9uICh2LCBpKSB7XG4gICAgICAgICAgICByZXR1cm4gcmVzdGF1cmFudHNbaV0ubmVpZ2hib3Job29kO1xuICAgICAgICAgIH0pO1xuICAgICAgICAgIC8vIFJlbW92ZSBkdXBsaWNhdGVzIGZyb20gbmVpZ2hib3Job29kc1xuICAgICAgICAgIHZhciB1bmlxdWVOZWlnaGJvcmhvb2RzID0gbmVpZ2hib3Job29kcy5maWx0ZXIoZnVuY3Rpb24gKHYsIGkpIHtcbiAgICAgICAgICAgIHJldHVybiBuZWlnaGJvcmhvb2RzLmluZGV4T2YodikgPT0gaTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgICBjYWxsYmFjayhudWxsLCB1bmlxdWVOZWlnaGJvcmhvb2RzKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLyoqXHJcbiAgICAgKiBGZXRjaCBhbGwgY3Vpc2luZXMgd2l0aCBwcm9wZXIgZXJyb3IgaGFuZGxpbmcuXHJcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnZmV0Y2hDdWlzaW5lcycsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGZldGNoQ3Vpc2luZXMoY2FsbGJhY2spIHtcbiAgICAgIC8vIEZldGNoIGFsbCByZXN0YXVyYW50c1xuICAgICAgREJIZWxwZXIuZmV0Y2hSZXN0YXVyYW50cyhmdW5jdGlvbiAoZXJyb3IsIHJlc3RhdXJhbnRzKSB7XG4gICAgICAgIGlmIChlcnJvcikge1xuICAgICAgICAgIGNhbGxiYWNrKGVycm9yLCBudWxsKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyBHZXQgYWxsIGN1aXNpbmVzIGZyb20gYWxsIHJlc3RhdXJhbnRzXG4gICAgICAgICAgdmFyIGN1aXNpbmVzID0gcmVzdGF1cmFudHMubWFwKGZ1bmN0aW9uICh2LCBpKSB7XG4gICAgICAgICAgICByZXR1cm4gcmVzdGF1cmFudHNbaV0uY3Vpc2luZV90eXBlO1xuICAgICAgICAgIH0pO1xuICAgICAgICAgIC8vIFJlbW92ZSBkdXBsaWNhdGVzIGZyb20gY3Vpc2luZXNcbiAgICAgICAgICB2YXIgdW5pcXVlQ3Vpc2luZXMgPSBjdWlzaW5lcy5maWx0ZXIoZnVuY3Rpb24gKHYsIGkpIHtcbiAgICAgICAgICAgIHJldHVybiBjdWlzaW5lcy5pbmRleE9mKHYpID09IGk7XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgY2FsbGJhY2sobnVsbCwgdW5pcXVlQ3Vpc2luZXMpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcclxuICAgICAqIFJlc3RhdXJhbnQgcGFnZSBVUkwuXHJcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAndXJsRm9yUmVzdGF1cmFudCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHVybEZvclJlc3RhdXJhbnQocmVzdGF1cmFudCkge1xuICAgICAgcmV0dXJuICcuL3Jlc3RhdXJhbnQuaHRtbD9pZD0nICsgcmVzdGF1cmFudC5pZDtcbiAgICB9XG5cbiAgICAvKipcclxuICAgICAqIFJlc3RhdXJhbnQgaW1hZ2UgVVJMLlxyXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ2ltYWdlVXJsRm9yUmVzdGF1cmFudCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGltYWdlVXJsRm9yUmVzdGF1cmFudChyZXN0YXVyYW50KSB7XG4gICAgICByZXR1cm4gJy9pbWcvJyArIHJlc3RhdXJhbnQucGhvdG9ncmFwaDtcbiAgICB9XG5cbiAgICAvKipcclxuICAgICAqIE1hcCBtYXJrZXIgZm9yIGEgcmVzdGF1cmFudC5cclxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdtYXBNYXJrZXJGb3JSZXN0YXVyYW50JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gbWFwTWFya2VyRm9yUmVzdGF1cmFudChyZXN0YXVyYW50LCBtYXApIHtcbiAgICAgIC8vIGh0dHBzOi8vbGVhZmxldGpzLmNvbS9yZWZlcmVuY2UtMS4zLjAuaHRtbCNtYXJrZXIgIFxuICAgICAgdmFyIG1hcmtlciA9IG5ldyBMLm1hcmtlcihbcmVzdGF1cmFudC5sYXRsbmcubGF0LCByZXN0YXVyYW50LmxhdGxuZy5sbmddLCB7IHRpdGxlOiByZXN0YXVyYW50Lm5hbWUsXG4gICAgICAgIGFsdDogcmVzdGF1cmFudC5uYW1lLFxuICAgICAgICB1cmw6IERCSGVscGVyLnVybEZvclJlc3RhdXJhbnQocmVzdGF1cmFudClcbiAgICAgIH0pO1xuICAgICAgbWFya2VyLmFkZFRvKG5ld01hcCk7XG4gICAgICByZXR1cm4gbWFya2VyO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ0RBVEFCQVNFX1VSTCcsXG5cblxuICAgIC8qKlxyXG4gICAgICogRGF0YWJhc2UgVVJMLlxyXG4gICAgICogQ2hhbmdlIHRoaXMgdG8gcmVzdGF1cmFudHMuanNvbiBmaWxlIGxvY2F0aW9uIG9uIHlvdXIgc2VydmVyLlxyXG4gICAgICovXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICB2YXIgcG9ydCA9IDEzMzc7XG4gICAgICByZXR1cm4gJ2h0dHA6Ly9sb2NhbGhvc3Q6JyArIHBvcnQgKyAnL3Jlc3RhdXJhbnRzJztcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gREJIZWxwZXI7XG59KCk7IiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgcmVzdGF1cmFudHMgPSB2b2lkIDAsXG4gICAgbmVpZ2hib3Job29kcyA9IHZvaWQgMCxcbiAgICBjdWlzaW5lcyA9IHZvaWQgMDtcbnZhciBuZXdNYXA7XG52YXIgbWFya2VycyA9IFtdO1xuXG4vKipcclxuICogRmV0Y2ggbmVpZ2hib3Job29kcyBhbmQgY3Vpc2luZXMgYXMgc29vbiBhcyB0aGUgcGFnZSBpcyBsb2FkZWQuXHJcbiAqL1xuZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignRE9NQ29udGVudExvYWRlZCcsIGZ1bmN0aW9uIChldmVudCkge1xuICBpbml0TWFwKCk7IC8vIGFkZGVkIFxuICBmZXRjaE5laWdoYm9yaG9vZHMoKTtcbiAgZmV0Y2hDdWlzaW5lcygpO1xufSk7XG5cbi8qKlxyXG4gKiBGZXRjaCBhbGwgbmVpZ2hib3Job29kcyBhbmQgc2V0IHRoZWlyIEhUTUwuXHJcbiAqL1xudmFyIGZldGNoTmVpZ2hib3Job29kcyA9IGZ1bmN0aW9uIGZldGNoTmVpZ2hib3Job29kcygpIHtcbiAgREJIZWxwZXIuZmV0Y2hOZWlnaGJvcmhvb2RzKGZ1bmN0aW9uIChlcnJvciwgbmVpZ2hib3Job29kcykge1xuICAgIGlmIChlcnJvcikge1xuICAgICAgLy8gR290IGFuIGVycm9yXG4gICAgICBjb25zb2xlLmVycm9yKGVycm9yKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc2VsZi5uZWlnaGJvcmhvb2RzID0gbmVpZ2hib3Job29kcztcbiAgICAgIGZpbGxOZWlnaGJvcmhvb2RzSFRNTCgpO1xuICAgIH1cbiAgfSk7XG59O1xuXG4vKipcclxuICogU2V0IG5laWdoYm9yaG9vZHMgSFRNTC5cclxuICovXG52YXIgZmlsbE5laWdoYm9yaG9vZHNIVE1MID0gZnVuY3Rpb24gZmlsbE5laWdoYm9yaG9vZHNIVE1MKCkge1xuICB2YXIgbmVpZ2hib3Job29kcyA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogc2VsZi5uZWlnaGJvcmhvb2RzO1xuXG4gIHZhciBzZWxlY3QgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnbmVpZ2hib3Job29kcy1zZWxlY3QnKTtcbiAgc2VsZWN0LmlubmVySFRNTCA9ICcnO1xuICB2YXIgb3B0aW9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnb3B0aW9uJyk7XG4gIG9wdGlvbi5pbm5lckhUTUwgPSAnQWxsIE5laWdoYm9yaG9vZHMnO1xuICBvcHRpb24udmFsdWUgPSAnYWxsJztcbiAgc2VsZWN0LmFwcGVuZChvcHRpb24pO1xuICBuZWlnaGJvcmhvb2RzLmZvckVhY2goZnVuY3Rpb24gKG5laWdoYm9yaG9vZCkge1xuICAgIHZhciBvcHRpb24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdvcHRpb24nKTtcbiAgICBvcHRpb24uaW5uZXJIVE1MID0gbmVpZ2hib3Job29kO1xuICAgIG9wdGlvbi52YWx1ZSA9IG5laWdoYm9yaG9vZDtcbiAgICBzZWxlY3QuYXBwZW5kKG9wdGlvbik7XG4gIH0pO1xufTtcblxuLyoqXHJcbiAqIEZldGNoIGFsbCBjdWlzaW5lcyBhbmQgc2V0IHRoZWlyIEhUTUwuXHJcbiAqL1xudmFyIGZldGNoQ3Vpc2luZXMgPSBmdW5jdGlvbiBmZXRjaEN1aXNpbmVzKCkge1xuICBEQkhlbHBlci5mZXRjaEN1aXNpbmVzKGZ1bmN0aW9uIChlcnJvciwgY3Vpc2luZXMpIHtcbiAgICBpZiAoZXJyb3IpIHtcbiAgICAgIC8vIEdvdCBhbiBlcnJvciFcbiAgICAgIGNvbnNvbGUuZXJyb3IoZXJyb3IpO1xuICAgIH0gZWxzZSB7XG4gICAgICBzZWxmLmN1aXNpbmVzID0gY3Vpc2luZXM7XG4gICAgICBmaWxsQ3Vpc2luZXNIVE1MKCk7XG4gICAgfVxuICB9KTtcbn07XG5cbi8qKlxyXG4gKiBTZXQgY3Vpc2luZXMgSFRNTC5cclxuICovXG52YXIgZmlsbEN1aXNpbmVzSFRNTCA9IGZ1bmN0aW9uIGZpbGxDdWlzaW5lc0hUTUwoKSB7XG4gIHZhciBjdWlzaW5lcyA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogc2VsZi5jdWlzaW5lcztcblxuICB2YXIgc2VsZWN0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2N1aXNpbmVzLXNlbGVjdCcpO1xuICBzZWxlY3QuaW5uZXJIVE1MID0gJyc7XG4gIHZhciBvcHRpb24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdvcHRpb24nKTtcbiAgb3B0aW9uLmlubmVySFRNTCA9ICdBbGwgQ3Vpc2luZXMnO1xuICBvcHRpb24udmFsdWUgPSAnYWxsJztcbiAgc2VsZWN0LmFwcGVuZChvcHRpb24pO1xuICBjdWlzaW5lcy5mb3JFYWNoKGZ1bmN0aW9uIChjdWlzaW5lKSB7XG4gICAgdmFyIG9wdGlvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ29wdGlvbicpO1xuICAgIG9wdGlvbi5pbm5lckhUTUwgPSBjdWlzaW5lO1xuICAgIG9wdGlvbi52YWx1ZSA9IGN1aXNpbmU7XG4gICAgc2VsZWN0LmFwcGVuZChvcHRpb24pO1xuICB9KTtcbn07XG5cbi8qKlxyXG4gKiBJbml0aWFsaXplIGxlYWZsZXQgbWFwLCBjYWxsZWQgZnJvbSBIVE1MLlxyXG4gKi9cbnZhciBpbml0TWFwID0gZnVuY3Rpb24gaW5pdE1hcCgpIHtcbiAgc2VsZi5uZXdNYXAgPSBMLm1hcCgnbWFwJywge1xuICAgIGNlbnRlcjogWzQwLjcyMjIxNiwgLTczLjk4NzUwMV0sXG4gICAgem9vbTogMTIsXG4gICAgc2Nyb2xsV2hlZWxab29tOiBmYWxzZVxuICB9KTtcbiAgTC50aWxlTGF5ZXIoJ2h0dHBzOi8vYXBpLnRpbGVzLm1hcGJveC5jb20vdjQve2lkfS97en0ve3h9L3t5fS5qcGc3MD9hY2Nlc3NfdG9rZW49e21hcGJveFRva2VufScsIHtcbiAgICBtYXBib3hUb2tlbjogJ3BrLmV5SjFJam9pWm05MVlXUXRZWE5vY21GbUlpd2lZU0k2SW1OcWF6RTBkbTFpTmpBM2VHc3pjblEwZERObE4zazNibkFpZlEudUtUZmhDeHMxTnRpcnFFY1JhQVp3ZycsXG4gICAgbWF4Wm9vbTogMTgsXG4gICAgYXR0cmlidXRpb246ICdNYXAgZGF0YSAmY29weTsgPGEgaHJlZj1cImh0dHBzOi8vd3d3Lm9wZW5zdHJlZXRtYXAub3JnL1wiPk9wZW5TdHJlZXRNYXA8L2E+IGNvbnRyaWJ1dG9ycywgJyArICc8YSBocmVmPVwiaHR0cHM6Ly9jcmVhdGl2ZWNvbW1vbnMub3JnL2xpY2Vuc2VzL2J5LXNhLzIuMC9cIj5DQy1CWS1TQTwvYT4sICcgKyAnSW1hZ2VyeSDCqSA8YSBocmVmPVwiaHR0cHM6Ly93d3cubWFwYm94LmNvbS9cIj5NYXBib3g8L2E+JyxcbiAgICBpZDogJ21hcGJveC5zdHJlZXRzJ1xuICB9KS5hZGRUbyhuZXdNYXApO1xuXG4gIHVwZGF0ZVJlc3RhdXJhbnRzKCk7XG59O1xuXG4vKipcclxuICogVXBkYXRlIHBhZ2UgYW5kIG1hcCBmb3IgY3VycmVudCByZXN0YXVyYW50cy5cclxuICovXG52YXIgdXBkYXRlUmVzdGF1cmFudHMgPSBmdW5jdGlvbiB1cGRhdGVSZXN0YXVyYW50cygpIHtcbiAgdmFyIGNTZWxlY3QgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnY3Vpc2luZXMtc2VsZWN0Jyk7XG4gIHZhciBuU2VsZWN0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ25laWdoYm9yaG9vZHMtc2VsZWN0Jyk7XG5cbiAgdmFyIGNJbmRleCA9IGNTZWxlY3Quc2VsZWN0ZWRJbmRleDtcbiAgdmFyIG5JbmRleCA9IG5TZWxlY3Quc2VsZWN0ZWRJbmRleDtcblxuICB2YXIgY3Vpc2luZSA9IGNTZWxlY3RbY0luZGV4XS52YWx1ZTtcbiAgdmFyIG5laWdoYm9yaG9vZCA9IG5TZWxlY3RbbkluZGV4XS52YWx1ZTtcblxuICBEQkhlbHBlci5mZXRjaFJlc3RhdXJhbnRCeUN1aXNpbmVBbmROZWlnaGJvcmhvb2QoY3Vpc2luZSwgbmVpZ2hib3Job29kLCBmdW5jdGlvbiAoZXJyb3IsIHJlc3RhdXJhbnRzKSB7XG4gICAgaWYgKGVycm9yKSB7XG4gICAgICAvLyBHb3QgYW4gZXJyb3IhXG4gICAgICBjb25zb2xlLmVycm9yKGVycm9yKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVzZXRSZXN0YXVyYW50cyhyZXN0YXVyYW50cyk7XG4gICAgICBmaWxsUmVzdGF1cmFudHNIVE1MKCk7XG4gICAgfVxuICB9KTtcbn07XG5cbi8qKlxyXG4gKiBDbGVhciBjdXJyZW50IHJlc3RhdXJhbnRzLCB0aGVpciBIVE1MIGFuZCByZW1vdmUgdGhlaXIgbWFwIG1hcmtlcnMuXHJcbiAqL1xudmFyIHJlc2V0UmVzdGF1cmFudHMgPSBmdW5jdGlvbiByZXNldFJlc3RhdXJhbnRzKHJlc3RhdXJhbnRzKSB7XG4gIC8vIFJlbW92ZSBhbGwgcmVzdGF1cmFudHNcbiAgc2VsZi5yZXN0YXVyYW50cyA9IFtdO1xuICB2YXIgdWwgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncmVzdGF1cmFudHMtbGlzdCcpO1xuICB1bC5pbm5lckhUTUwgPSAnJztcblxuICAvLyBSZW1vdmUgYWxsIG1hcCBtYXJrZXJzXG4gIGlmIChzZWxmLm1hcmtlcnMpIHtcbiAgICBzZWxmLm1hcmtlcnMuZm9yRWFjaChmdW5jdGlvbiAobWFya2VyKSB7XG4gICAgICByZXR1cm4gbWFya2VyLnJlbW92ZSgpO1xuICAgIH0pO1xuICB9XG4gIHNlbGYubWFya2VycyA9IFtdO1xuICBzZWxmLnJlc3RhdXJhbnRzID0gcmVzdGF1cmFudHM7XG59O1xuXG4vKipcclxuICogQ3JlYXRlIGFsbCByZXN0YXVyYW50cyBIVE1MIGFuZCBhZGQgdGhlbSB0byB0aGUgd2VicGFnZS5cclxuICovXG52YXIgZmlsbFJlc3RhdXJhbnRzSFRNTCA9IGZ1bmN0aW9uIGZpbGxSZXN0YXVyYW50c0hUTUwoKSB7XG4gIHZhciByZXN0YXVyYW50cyA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogc2VsZi5yZXN0YXVyYW50cztcblxuICB2YXIgdWwgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncmVzdGF1cmFudHMtbGlzdCcpO1xuICB2YXIgY29tbWVudCA9IGRvY3VtZW50LmNyZWF0ZUNvbW1lbnQoXCJcIik7XG4gIHJlc3RhdXJhbnRzLmZvckVhY2goZnVuY3Rpb24gKHJlc3RhdXJhbnQpIHtcbiAgICB1bC5hcHBlbmQoY3JlYXRlUmVzdGF1cmFudEhUTUwocmVzdGF1cmFudCkpO1xuICAgIHVsLmFwcGVuZChjb21tZW50KTtcbiAgfSk7XG4gIGFkZE1hcmtlcnNUb01hcCgpO1xufTtcblxuLyoqXHJcbiAqIENyZWF0ZSByZXN0YXVyYW50IEhUTUwuXHJcbiAqL1xudmFyIGNyZWF0ZVJlc3RhdXJhbnRIVE1MID0gZnVuY3Rpb24gY3JlYXRlUmVzdGF1cmFudEhUTUwocmVzdGF1cmFudCkge1xuICB2YXIgbGkgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdsaScpO1xuXG4gIHZhciBpbWFnZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2ltZycpO1xuICBpbWFnZS5jbGFzc05hbWUgPSAncmVzdGF1cmFudC1pbWcnO1xuICB2YXIgaW1hZ2VVcmwgPSBEQkhlbHBlci5pbWFnZVVybEZvclJlc3RhdXJhbnQocmVzdGF1cmFudCk7XG4gIHZhciBpbWFnZVVybE5hbWUgPSBpbWFnZVVybDtcbiAgdmFyIGltYWdlVHlwZSA9ICd3ZWJwJztcbiAgaW1hZ2Uuc3JjID0gaW1hZ2VVcmxOYW1lICsgJy04MDBfMnguJyArIGltYWdlVHlwZTtcbiAgaW1hZ2Uuc2V0QXR0cmlidXRlKCdzcmNzZXQnLCBpbWFnZVVybE5hbWUgKyAnLTgwMF8yeC4nICsgaW1hZ2VUeXBlICsgJyA4MDB3LCAnICsgaW1hZ2VVcmxOYW1lICsgJy00MDBfMXguJyArIGltYWdlVHlwZSArICcgNDAwdycpO1xuICBpbWFnZS5zZXRBdHRyaWJ1dGUoJ3NpemVzJywgJyhtYXgtd2lkdGg6IDUwMHB4KSA5MHZ3LCAobWF4LXdpZHRoOiA4ODBweCkgODB2dywgKG1heC13aWR0aDogMTIwNXB4KSA0MHZ3LCAobWluLXdpZHRoOiAxMjA2cHgpIDMwdncnKTtcbiAgaW1hZ2Uuc2V0QXR0cmlidXRlKCdhbHQnLCByZXN0YXVyYW50Lm5hbWUgKyAnIFJlc3RhdXJhbnQnKTtcbiAgbGkuYXBwZW5kKGltYWdlKTtcblxuICB2YXIgbmFtZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2gxJyk7XG4gIG5hbWUuaW5uZXJIVE1MID0gcmVzdGF1cmFudC5uYW1lO1xuICBsaS5hcHBlbmQobmFtZSk7XG5cbiAgdmFyIG5laWdoYm9yaG9vZCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3AnKTtcbiAgbmVpZ2hib3Job29kLmlubmVySFRNTCA9IHJlc3RhdXJhbnQubmVpZ2hib3Job29kO1xuICBsaS5hcHBlbmQobmVpZ2hib3Job29kKTtcblxuICB2YXIgYWRkcmVzcyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3AnKTtcbiAgYWRkcmVzcy5pbm5lckhUTUwgPSByZXN0YXVyYW50LmFkZHJlc3M7XG4gIGxpLmFwcGVuZChhZGRyZXNzKTtcblxuICB2YXIgbW9yZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2EnKTtcbiAgbW9yZS5pbm5lckhUTUwgPSAnVmlldyBEZXRhaWxzJztcbiAgbW9yZS5ocmVmID0gREJIZWxwZXIudXJsRm9yUmVzdGF1cmFudChyZXN0YXVyYW50KTtcbiAgbW9yZS5zZXRBdHRyaWJ1dGUoJ3JvbGUnLCAnYnV0dG9uJyk7XG4gIG1vcmUuc2V0QXR0cmlidXRlKCdhcmlhLWxhYmVsJywgJ1ZpZXcgUmVzdGF1cmFudCBEZXRhaWxzJyk7XG4gIGxpLmFwcGVuZChtb3JlKTtcblxuICByZXR1cm4gbGk7XG59O1xuXG4vKipcclxuICogQWRkIG1hcmtlcnMgZm9yIGN1cnJlbnQgcmVzdGF1cmFudHMgdG8gdGhlIG1hcC5cclxuICovXG52YXIgYWRkTWFya2Vyc1RvTWFwID0gZnVuY3Rpb24gYWRkTWFya2Vyc1RvTWFwKCkge1xuICB2YXIgcmVzdGF1cmFudHMgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHNlbGYucmVzdGF1cmFudHM7XG5cbiAgcmVzdGF1cmFudHMuZm9yRWFjaChmdW5jdGlvbiAocmVzdGF1cmFudCkge1xuICAgIC8vIEFkZCBtYXJrZXIgdG8gdGhlIG1hcFxuICAgIHZhciBtYXJrZXIgPSBEQkhlbHBlci5tYXBNYXJrZXJGb3JSZXN0YXVyYW50KHJlc3RhdXJhbnQsIHNlbGYubmV3TWFwKTtcbiAgICBtYXJrZXIub24oXCJjbGlja1wiLCBvbkNsaWNrKTtcbiAgICBmdW5jdGlvbiBvbkNsaWNrKCkge1xuICAgICAgd2luZG93LmxvY2F0aW9uLmhyZWYgPSBtYXJrZXIub3B0aW9ucy51cmw7XG4gICAgfVxuICAgIHNlbGYubWFya2Vycy5wdXNoKG1hcmtlcik7XG4gIH0pO1xufTsiLCIndXNlIHN0cmljdCc7XG5cbnZhciBfdHlwZW9mID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIgPyBmdW5jdGlvbiAob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9IDogZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajsgfTtcblxuKGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgKHR5cGVvZiBleHBvcnRzID09PSAndW5kZWZpbmVkJyA/ICd1bmRlZmluZWQnIDogX3R5cGVvZihleHBvcnRzKSkgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnID8gZmFjdG9yeSgpIDogdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKGZhY3RvcnkpIDogZmFjdG9yeSgpO1xufSkodW5kZWZpbmVkLCBmdW5jdGlvbiAoKSB7XG5cbiAgLyoqXG4gICAqIGh0dHBzOi8vZ2l0aHViLmNvbS9XSUNHL2ZvY3VzLXZpc2libGVcbiAgICovXG4gIGZ1bmN0aW9uIGluaXQoKSB7XG4gICAgdmFyIGhhZEtleWJvYXJkRXZlbnQgPSB0cnVlO1xuICAgIHZhciBoYWRGb2N1c1Zpc2libGVSZWNlbnRseSA9IGZhbHNlO1xuICAgIHZhciBoYWRGb2N1c1Zpc2libGVSZWNlbnRseVRpbWVvdXQgPSBudWxsO1xuXG4gICAgdmFyIGlucHV0VHlwZXNXaGl0ZWxpc3QgPSB7XG4gICAgICB0ZXh0OiB0cnVlLFxuICAgICAgc2VhcmNoOiB0cnVlLFxuICAgICAgdXJsOiB0cnVlLFxuICAgICAgdGVsOiB0cnVlLFxuICAgICAgZW1haWw6IHRydWUsXG4gICAgICBwYXNzd29yZDogdHJ1ZSxcbiAgICAgIG51bWJlcjogdHJ1ZSxcbiAgICAgIGRhdGU6IHRydWUsXG4gICAgICBtb250aDogdHJ1ZSxcbiAgICAgIHdlZWs6IHRydWUsXG4gICAgICB0aW1lOiB0cnVlLFxuICAgICAgZGF0ZXRpbWU6IHRydWUsXG4gICAgICAnZGF0ZXRpbWUtbG9jYWwnOiB0cnVlXG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIEhlbHBlciBmdW5jdGlvbiBmb3IgbGVnYWN5IGJyb3dzZXJzIGFuZCBpZnJhbWVzIHdoaWNoIHNvbWV0aW1lcyBmb2N1c1xuICAgICAqIGVsZW1lbnRzIGxpa2UgZG9jdW1lbnQsIGJvZHksIGFuZCBub24taW50ZXJhY3RpdmUgU1ZHLlxuICAgICAqIEBwYXJhbSB7RWxlbWVudH0gZWxcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc1ZhbGlkRm9jdXNUYXJnZXQoZWwpIHtcbiAgICAgIGlmIChlbCAmJiBlbCAhPT0gZG9jdW1lbnQgJiYgZWwubm9kZU5hbWUgIT09ICdIVE1MJyAmJiBlbC5ub2RlTmFtZSAhPT0gJ0JPRFknICYmICdjbGFzc0xpc3QnIGluIGVsICYmICdjb250YWlucycgaW4gZWwuY2xhc3NMaXN0KSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvbXB1dGVzIHdoZXRoZXIgdGhlIGdpdmVuIGVsZW1lbnQgc2hvdWxkIGF1dG9tYXRpY2FsbHkgdHJpZ2dlciB0aGVcbiAgICAgKiBgZm9jdXMtdmlzaWJsZWAgY2xhc3MgYmVpbmcgYWRkZWQsIGkuZS4gd2hldGhlciBpdCBzaG91bGQgYWx3YXlzIG1hdGNoXG4gICAgICogYDpmb2N1cy12aXNpYmxlYCB3aGVuIGZvY3VzZWQuXG4gICAgICogQHBhcmFtIHtFbGVtZW50fSBlbFxuICAgICAqIEByZXR1cm4ge2Jvb2xlYW59XG4gICAgICovXG4gICAgZnVuY3Rpb24gZm9jdXNUcmlnZ2Vyc0tleWJvYXJkTW9kYWxpdHkoZWwpIHtcbiAgICAgIHZhciB0eXBlID0gZWwudHlwZTtcbiAgICAgIHZhciB0YWdOYW1lID0gZWwudGFnTmFtZTtcblxuICAgICAgaWYgKHRhZ05hbWUgPT0gJ0lOUFVUJyAmJiBpbnB1dFR5cGVzV2hpdGVsaXN0W3R5cGVdICYmICFlbC5yZWFkT25seSkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cblxuICAgICAgaWYgKHRhZ05hbWUgPT0gJ1RFWFRBUkVBJyAmJiAhZWwucmVhZE9ubHkpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG5cbiAgICAgIGlmIChlbC5pc0NvbnRlbnRFZGl0YWJsZSkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEFkZCB0aGUgYGZvY3VzLXZpc2libGVgIGNsYXNzIHRvIHRoZSBnaXZlbiBlbGVtZW50IGlmIGl0IHdhcyBub3QgYWRkZWQgYnlcbiAgICAgKiB0aGUgYXV0aG9yLlxuICAgICAqIEBwYXJhbSB7RWxlbWVudH0gZWxcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBhZGRGb2N1c1Zpc2libGVDbGFzcyhlbCkge1xuICAgICAgaWYgKGVsLmNsYXNzTGlzdC5jb250YWlucygnZm9jdXMtdmlzaWJsZScpKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGVsLmNsYXNzTGlzdC5hZGQoJ2ZvY3VzLXZpc2libGUnKTtcbiAgICAgIGVsLnNldEF0dHJpYnV0ZSgnZGF0YS1mb2N1cy12aXNpYmxlLWFkZGVkJywgJycpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlbW92ZSB0aGUgYGZvY3VzLXZpc2libGVgIGNsYXNzIGZyb20gdGhlIGdpdmVuIGVsZW1lbnQgaWYgaXQgd2FzIG5vdFxuICAgICAqIG9yaWdpbmFsbHkgYWRkZWQgYnkgdGhlIGF1dGhvci5cbiAgICAgKiBAcGFyYW0ge0VsZW1lbnR9IGVsXG4gICAgICovXG4gICAgZnVuY3Rpb24gcmVtb3ZlRm9jdXNWaXNpYmxlQ2xhc3MoZWwpIHtcbiAgICAgIGlmICghZWwuaGFzQXR0cmlidXRlKCdkYXRhLWZvY3VzLXZpc2libGUtYWRkZWQnKSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBlbC5jbGFzc0xpc3QucmVtb3ZlKCdmb2N1cy12aXNpYmxlJyk7XG4gICAgICBlbC5yZW1vdmVBdHRyaWJ1dGUoJ2RhdGEtZm9jdXMtdmlzaWJsZS1hZGRlZCcpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRyZWF0IGBrZXlkb3duYCBhcyBhIHNpZ25hbCB0aGF0IHRoZSB1c2VyIGlzIGluIGtleWJvYXJkIG1vZGFsaXR5LlxuICAgICAqIEFwcGx5IGBmb2N1cy12aXNpYmxlYCB0byBhbnkgY3VycmVudCBhY3RpdmUgZWxlbWVudCBhbmQga2VlcCB0cmFja1xuICAgICAqIG9mIG91ciBrZXlib2FyZCBtb2RhbGl0eSBzdGF0ZSB3aXRoIGBoYWRLZXlib2FyZEV2ZW50YC5cbiAgICAgKiBAcGFyYW0ge0V2ZW50fSBlXG4gICAgICovXG4gICAgZnVuY3Rpb24gb25LZXlEb3duKGUpIHtcbiAgICAgIGlmIChpc1ZhbGlkRm9jdXNUYXJnZXQoZG9jdW1lbnQuYWN0aXZlRWxlbWVudCkpIHtcbiAgICAgICAgYWRkRm9jdXNWaXNpYmxlQ2xhc3MoZG9jdW1lbnQuYWN0aXZlRWxlbWVudCk7XG4gICAgICB9XG5cbiAgICAgIGhhZEtleWJvYXJkRXZlbnQgPSB0cnVlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIElmIGF0IGFueSBwb2ludCBhIHVzZXIgY2xpY2tzIHdpdGggYSBwb2ludGluZyBkZXZpY2UsIGVuc3VyZSB0aGF0IHdlIGNoYW5nZVxuICAgICAqIHRoZSBtb2RhbGl0eSBhd2F5IGZyb20ga2V5Ym9hcmQuXG4gICAgICogVGhpcyBhdm9pZHMgdGhlIHNpdHVhdGlvbiB3aGVyZSBhIHVzZXIgcHJlc3NlcyBhIGtleSBvbiBhbiBhbHJlYWR5IGZvY3VzZWRcbiAgICAgKiBlbGVtZW50LCBhbmQgdGhlbiBjbGlja3Mgb24gYSBkaWZmZXJlbnQgZWxlbWVudCwgZm9jdXNpbmcgaXQgd2l0aCBhXG4gICAgICogcG9pbnRpbmcgZGV2aWNlLCB3aGlsZSB3ZSBzdGlsbCB0aGluayB3ZSdyZSBpbiBrZXlib2FyZCBtb2RhbGl0eS5cbiAgICAgKiBAcGFyYW0ge0V2ZW50fSBlXG4gICAgICovXG4gICAgZnVuY3Rpb24gb25Qb2ludGVyRG93bihlKSB7XG4gICAgICBoYWRLZXlib2FyZEV2ZW50ID0gZmFsc2U7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogT24gYGZvY3VzYCwgYWRkIHRoZSBgZm9jdXMtdmlzaWJsZWAgY2xhc3MgdG8gdGhlIHRhcmdldCBpZjpcbiAgICAgKiAtIHRoZSB0YXJnZXQgcmVjZWl2ZWQgZm9jdXMgYXMgYSByZXN1bHQgb2Yga2V5Ym9hcmQgbmF2aWdhdGlvbiwgb3JcbiAgICAgKiAtIHRoZSBldmVudCB0YXJnZXQgaXMgYW4gZWxlbWVudCB0aGF0IHdpbGwgbGlrZWx5IHJlcXVpcmUgaW50ZXJhY3Rpb25cbiAgICAgKiAgIHZpYSB0aGUga2V5Ym9hcmQgKGUuZy4gYSB0ZXh0IGJveClcbiAgICAgKiBAcGFyYW0ge0V2ZW50fSBlXG4gICAgICovXG4gICAgZnVuY3Rpb24gb25Gb2N1cyhlKSB7XG4gICAgICAvLyBQcmV2ZW50IElFIGZyb20gZm9jdXNpbmcgdGhlIGRvY3VtZW50IG9yIEhUTUwgZWxlbWVudC5cbiAgICAgIGlmICghaXNWYWxpZEZvY3VzVGFyZ2V0KGUudGFyZ2V0KSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGlmIChoYWRLZXlib2FyZEV2ZW50IHx8IGZvY3VzVHJpZ2dlcnNLZXlib2FyZE1vZGFsaXR5KGUudGFyZ2V0KSkge1xuICAgICAgICBhZGRGb2N1c1Zpc2libGVDbGFzcyhlLnRhcmdldCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogT24gYGJsdXJgLCByZW1vdmUgdGhlIGBmb2N1cy12aXNpYmxlYCBjbGFzcyBmcm9tIHRoZSB0YXJnZXQuXG4gICAgICogQHBhcmFtIHtFdmVudH0gZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG9uQmx1cihlKSB7XG4gICAgICBpZiAoIWlzVmFsaWRGb2N1c1RhcmdldChlLnRhcmdldCkpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAoZS50YXJnZXQuY2xhc3NMaXN0LmNvbnRhaW5zKCdmb2N1cy12aXNpYmxlJykgfHwgZS50YXJnZXQuaGFzQXR0cmlidXRlKCdkYXRhLWZvY3VzLXZpc2libGUtYWRkZWQnKSkge1xuICAgICAgICAvLyBUbyBkZXRlY3QgYSB0YWIvd2luZG93IHN3aXRjaCwgd2UgbG9vayBmb3IgYSBibHVyIGV2ZW50IGZvbGxvd2VkXG4gICAgICAgIC8vIHJhcGlkbHkgYnkgYSB2aXNpYmlsaXR5IGNoYW5nZS5cbiAgICAgICAgLy8gSWYgd2UgZG9uJ3Qgc2VlIGEgdmlzaWJpbGl0eSBjaGFuZ2Ugd2l0aGluIDEwMG1zLCBpdCdzIHByb2JhYmx5IGFcbiAgICAgICAgLy8gcmVndWxhciBmb2N1cyBjaGFuZ2UuXG4gICAgICAgIGhhZEZvY3VzVmlzaWJsZVJlY2VudGx5ID0gdHJ1ZTtcbiAgICAgICAgd2luZG93LmNsZWFyVGltZW91dChoYWRGb2N1c1Zpc2libGVSZWNlbnRseVRpbWVvdXQpO1xuICAgICAgICBoYWRGb2N1c1Zpc2libGVSZWNlbnRseVRpbWVvdXQgPSB3aW5kb3cuc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgaGFkRm9jdXNWaXNpYmxlUmVjZW50bHkgPSBmYWxzZTtcbiAgICAgICAgICB3aW5kb3cuY2xlYXJUaW1lb3V0KGhhZEZvY3VzVmlzaWJsZVJlY2VudGx5VGltZW91dCk7XG4gICAgICAgIH0sIDEwMCk7XG4gICAgICAgIHJlbW92ZUZvY3VzVmlzaWJsZUNsYXNzKGUudGFyZ2V0KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBJZiB0aGUgdXNlciBjaGFuZ2VzIHRhYnMsIGtlZXAgdHJhY2sgb2Ygd2hldGhlciBvciBub3QgdGhlIHByZXZpb3VzbHlcbiAgICAgKiBmb2N1c2VkIGVsZW1lbnQgaGFkIC5mb2N1cy12aXNpYmxlLlxuICAgICAqIEBwYXJhbSB7RXZlbnR9IGVcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBvblZpc2liaWxpdHlDaGFuZ2UoZSkge1xuICAgICAgaWYgKGRvY3VtZW50LnZpc2liaWxpdHlTdGF0ZSA9PSAnaGlkZGVuJykge1xuICAgICAgICAvLyBJZiB0aGUgdGFiIGJlY29tZXMgYWN0aXZlIGFnYWluLCB0aGUgYnJvd3NlciB3aWxsIGhhbmRsZSBjYWxsaW5nIGZvY3VzXG4gICAgICAgIC8vIG9uIHRoZSBlbGVtZW50IChTYWZhcmkgYWN0dWFsbHkgY2FsbHMgaXQgdHdpY2UpLlxuICAgICAgICAvLyBJZiB0aGlzIHRhYiBjaGFuZ2UgY2F1c2VkIGEgYmx1ciBvbiBhbiBlbGVtZW50IHdpdGggZm9jdXMtdmlzaWJsZSxcbiAgICAgICAgLy8gcmUtYXBwbHkgdGhlIGNsYXNzIHdoZW4gdGhlIHVzZXIgc3dpdGNoZXMgYmFjayB0byB0aGUgdGFiLlxuICAgICAgICBpZiAoaGFkRm9jdXNWaXNpYmxlUmVjZW50bHkpIHtcbiAgICAgICAgICBoYWRLZXlib2FyZEV2ZW50ID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBhZGRJbml0aWFsUG9pbnRlck1vdmVMaXN0ZW5lcnMoKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBZGQgYSBncm91cCBvZiBsaXN0ZW5lcnMgdG8gZGV0ZWN0IHVzYWdlIG9mIGFueSBwb2ludGluZyBkZXZpY2VzLlxuICAgICAqIFRoZXNlIGxpc3RlbmVycyB3aWxsIGJlIGFkZGVkIHdoZW4gdGhlIHBvbHlmaWxsIGZpcnN0IGxvYWRzLCBhbmQgYW55dGltZVxuICAgICAqIHRoZSB3aW5kb3cgaXMgYmx1cnJlZCwgc28gdGhhdCB0aGV5IGFyZSBhY3RpdmUgd2hlbiB0aGUgd2luZG93IHJlZ2FpbnNcbiAgICAgKiBmb2N1cy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBhZGRJbml0aWFsUG9pbnRlck1vdmVMaXN0ZW5lcnMoKSB7XG4gICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdtb3VzZW1vdmUnLCBvbkluaXRpYWxQb2ludGVyTW92ZSk7XG4gICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdtb3VzZWRvd24nLCBvbkluaXRpYWxQb2ludGVyTW92ZSk7XG4gICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdtb3VzZXVwJywgb25Jbml0aWFsUG9pbnRlck1vdmUpO1xuICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcigncG9pbnRlcm1vdmUnLCBvbkluaXRpYWxQb2ludGVyTW92ZSk7XG4gICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdwb2ludGVyZG93bicsIG9uSW5pdGlhbFBvaW50ZXJNb3ZlKTtcbiAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ3BvaW50ZXJ1cCcsIG9uSW5pdGlhbFBvaW50ZXJNb3ZlKTtcbiAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ3RvdWNobW92ZScsIG9uSW5pdGlhbFBvaW50ZXJNb3ZlKTtcbiAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ3RvdWNoc3RhcnQnLCBvbkluaXRpYWxQb2ludGVyTW92ZSk7XG4gICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCd0b3VjaGVuZCcsIG9uSW5pdGlhbFBvaW50ZXJNb3ZlKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiByZW1vdmVJbml0aWFsUG9pbnRlck1vdmVMaXN0ZW5lcnMoKSB7XG4gICAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdtb3VzZW1vdmUnLCBvbkluaXRpYWxQb2ludGVyTW92ZSk7XG4gICAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdtb3VzZWRvd24nLCBvbkluaXRpYWxQb2ludGVyTW92ZSk7XG4gICAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdtb3VzZXVwJywgb25Jbml0aWFsUG9pbnRlck1vdmUpO1xuICAgICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcigncG9pbnRlcm1vdmUnLCBvbkluaXRpYWxQb2ludGVyTW92ZSk7XG4gICAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdwb2ludGVyZG93bicsIG9uSW5pdGlhbFBvaW50ZXJNb3ZlKTtcbiAgICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3BvaW50ZXJ1cCcsIG9uSW5pdGlhbFBvaW50ZXJNb3ZlKTtcbiAgICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3RvdWNobW92ZScsIG9uSW5pdGlhbFBvaW50ZXJNb3ZlKTtcbiAgICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3RvdWNoc3RhcnQnLCBvbkluaXRpYWxQb2ludGVyTW92ZSk7XG4gICAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCd0b3VjaGVuZCcsIG9uSW5pdGlhbFBvaW50ZXJNb3ZlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBXaGVuIHRoZSBwb2xmeWlsbCBmaXJzdCBsb2FkcywgYXNzdW1lIHRoZSB1c2VyIGlzIGluIGtleWJvYXJkIG1vZGFsaXR5LlxuICAgICAqIElmIGFueSBldmVudCBpcyByZWNlaXZlZCBmcm9tIGEgcG9pbnRpbmcgZGV2aWNlIChlLmcuIG1vdXNlLCBwb2ludGVyLFxuICAgICAqIHRvdWNoKSwgdHVybiBvZmYga2V5Ym9hcmQgbW9kYWxpdHkuXG4gICAgICogVGhpcyBhY2NvdW50cyBmb3Igc2l0dWF0aW9ucyB3aGVyZSBmb2N1cyBlbnRlcnMgdGhlIHBhZ2UgZnJvbSB0aGUgVVJMIGJhci5cbiAgICAgKiBAcGFyYW0ge0V2ZW50fSBlXG4gICAgICovXG4gICAgZnVuY3Rpb24gb25Jbml0aWFsUG9pbnRlck1vdmUoZSkge1xuICAgICAgLy8gV29yayBhcm91bmQgYSBTYWZhcmkgcXVpcmsgdGhhdCBmaXJlcyBhIG1vdXNlbW92ZSBvbiA8aHRtbD4gd2hlbmV2ZXIgdGhlXG4gICAgICAvLyB3aW5kb3cgYmx1cnMsIGV2ZW4gaWYgeW91J3JlIHRhYmJpbmcgb3V0IG9mIHRoZSBwYWdlLiDCr1xcXyjjg4QpXy/Cr1xuICAgICAgaWYgKGUudGFyZ2V0Lm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09ICdodG1sJykge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGhhZEtleWJvYXJkRXZlbnQgPSBmYWxzZTtcbiAgICAgIHJlbW92ZUluaXRpYWxQb2ludGVyTW92ZUxpc3RlbmVycygpO1xuICAgIH1cblxuICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCBvbktleURvd24sIHRydWUpO1xuICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlZG93bicsIG9uUG9pbnRlckRvd24sIHRydWUpO1xuICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ3BvaW50ZXJkb3duJywgb25Qb2ludGVyRG93biwgdHJ1ZSk7XG4gICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcigndG91Y2hzdGFydCcsIG9uUG9pbnRlckRvd24sIHRydWUpO1xuICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2ZvY3VzJywgb25Gb2N1cywgdHJ1ZSk7XG4gICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignYmx1cicsIG9uQmx1ciwgdHJ1ZSk7XG4gICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcigndmlzaWJpbGl0eWNoYW5nZScsIG9uVmlzaWJpbGl0eUNoYW5nZSwgdHJ1ZSk7XG4gICAgYWRkSW5pdGlhbFBvaW50ZXJNb3ZlTGlzdGVuZXJzKCk7XG5cbiAgICBkb2N1bWVudC5ib2R5LmNsYXNzTGlzdC5hZGQoJ2pzLWZvY3VzLXZpc2libGUnKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTdWJzY3JpcHRpb24gd2hlbiB0aGUgRE9NIGlzIHJlYWR5XG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrXG4gICAqL1xuICBmdW5jdGlvbiBvbkRPTVJlYWR5KGNhbGxiYWNrKSB7XG4gICAgdmFyIGxvYWRlZDtcblxuICAgIC8qKlxuICAgICAqIENhbGxiYWNrIHdyYXBwZXIgZm9yIGNoZWNrIGxvYWRlZCBzdGF0ZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGxvYWQoKSB7XG4gICAgICBpZiAoIWxvYWRlZCkge1xuICAgICAgICBsb2FkZWQgPSB0cnVlO1xuXG4gICAgICAgIGNhbGxiYWNrKCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKFsnaW50ZXJhY3RpdmUnLCAnY29tcGxldGUnXS5pbmRleE9mKGRvY3VtZW50LnJlYWR5U3RhdGUpID49IDApIHtcbiAgICAgIGNhbGxiYWNrKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGxvYWRlZCA9IGZhbHNlO1xuICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignRE9NQ29udGVudExvYWRlZCcsIGxvYWQsIGZhbHNlKTtcbiAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdsb2FkJywgbG9hZCwgZmFsc2UpO1xuICAgIH1cbiAgfVxuXG4gIGlmICh0eXBlb2YgZG9jdW1lbnQgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgb25ET01SZWFkeShpbml0KTtcbiAgfVxufSk7Il19
