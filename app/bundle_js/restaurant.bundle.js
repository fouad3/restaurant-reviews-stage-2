"use strict";!function(){function a(n){return new Promise(function(e,t){n.onsuccess=function(){e(n.result)},n.onerror=function(){t(n.error)}})}function i(n,r,o){var i,e=new Promise(function(e,t){a(i=n[r].apply(n,o)).then(e,t)});return e.request=i,e}function e(e,n,t){t.forEach(function(t){Object.defineProperty(e.prototype,t,{get:function(){return this[n][t]},set:function(e){this[n][t]=e}})})}function t(t,n,r,e){e.forEach(function(e){e in r.prototype&&(t.prototype[e]=function(){return i(this[n],e,arguments)})})}function n(t,n,r,e){e.forEach(function(e){e in r.prototype&&(t.prototype[e]=function(){return this[n][e].apply(this[n],arguments)})})}function r(e,r,t,n){n.forEach(function(n){n in t.prototype&&(e.prototype[n]=function(){return e=this[r],(t=i(e,n,arguments)).then(function(e){if(e)return new u(e,t.request)});var e,t})})}function o(e){this._index=e}function u(e,t){this._cursor=e,this._request=t}function s(e){this._store=e}function c(n){this._tx=n,this.complete=new Promise(function(e,t){n.oncomplete=function(){e()},n.onerror=function(){t(n.error)},n.onabort=function(){t(n.error)}})}function d(e,t,n){this._db=e,this.oldVersion=t,this.transaction=new c(n)}function l(e){this._db=e}e(o,"_index",["name","keyPath","multiEntry","unique"]),t(o,"_index",IDBIndex,["get","getKey","getAll","getAllKeys","count"]),r(o,"_index",IDBIndex,["openCursor","openKeyCursor"]),e(u,"_cursor",["direction","key","primaryKey","value"]),t(u,"_cursor",IDBCursor,["update","delete"]),["advance","continue","continuePrimaryKey"].forEach(function(n){n in IDBCursor.prototype&&(u.prototype[n]=function(){var t=this,e=arguments;return Promise.resolve().then(function(){return t._cursor[n].apply(t._cursor,e),a(t._request).then(function(e){if(e)return new u(e,t._request)})})})}),s.prototype.createIndex=function(){return new o(this._store.createIndex.apply(this._store,arguments))},s.prototype.index=function(){return new o(this._store.index.apply(this._store,arguments))},e(s,"_store",["name","keyPath","indexNames","autoIncrement"]),t(s,"_store",IDBObjectStore,["put","add","delete","clear","get","getAll","getKey","getAllKeys","count"]),r(s,"_store",IDBObjectStore,["openCursor","openKeyCursor"]),n(s,"_store",IDBObjectStore,["deleteIndex"]),c.prototype.objectStore=function(){return new s(this._tx.objectStore.apply(this._tx,arguments))},e(c,"_tx",["objectStoreNames","mode"]),n(c,"_tx",IDBTransaction,["abort"]),d.prototype.createObjectStore=function(){return new s(this._db.createObjectStore.apply(this._db,arguments))},e(d,"_db",["name","version","objectStoreNames"]),n(d,"_db",IDBDatabase,["deleteObjectStore","close"]),l.prototype.transaction=function(){return new c(this._db.transaction.apply(this._db,arguments))},e(l,"_db",["name","version","objectStoreNames"]),n(l,"_db",IDBDatabase,["close"]),["openCursor","openKeyCursor"].forEach(function(i){[s,o].forEach(function(e){i in e.prototype&&(e.prototype[i.replace("open","iterate")]=function(){var e,t=(e=arguments,Array.prototype.slice.call(e)),n=t[t.length-1],r=this._store||this._index,o=r[i].apply(r,t.slice(0,-1));o.onsuccess=function(){n(o.result)}})})}),[o,s].forEach(function(e){e.prototype.getAll||(e.prototype.getAll=function(e,n){var r=this,o=[];return new Promise(function(t){r.iterateCursor(e,function(e){e?(o.push(e.value),void 0===n||o.length!=n?e.continue():t(o)):t(o)})})})});var f={open:function(e,t,n){var r=i(indexedDB,"open",[e,t]),o=r.request;return o&&(o.onupgradeneeded=function(e){n&&n(new d(o.result,e.oldVersion,o.transaction))}),r.then(function(e){return new l(e)})},delete:function(e){return i(indexedDB,"deleteDatabase",[e])}};"undefined"!=typeof module?(module.exports=f,module.exports.default=module.exports):self.idb=f}();var _createClass=function(){function r(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(e,t,n){return t&&r(e.prototype,t),n&&r(e,n),e}}();function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}var newMap,DBHelper=function(){function a(){_classCallCheck(this,a)}return _createClass(a,null,[{key:"openIdb",value:function(){return idb.open("restaurant-reviews",1,function(e){e.createObjectStore("restaurant-reviews",{keyPath:"id"}).createIndex("by-date","updatedAt")})}},{key:"getCachedRestaurants",value:function(){return a.openIdb().then(function(e){if(e)return e.transaction("restaurant-reviews").objectStore("restaurant-reviews").index("by-date").getAll().then(function(e){return e.reverse()})})}},{key:"fetchRestaurants",value:function(t){a.getCachedRestaurants().then(function(e){if(0<e.length)return t(null,e)}),fetch(a.DATABASE_URL).then(function(e){return e.json()}).then(function(n){return a.openIdb().then(function(e){if(e){var t=e.transaction("restaurant-reviews","readwrite").objectStore("restaurant-reviews");n.forEach(function(e){t.put(e)})}}),t(null,n)}).catch(function(e){return t(e,null)})}},{key:"fetchRestaurantById",value:function(r,o){a.fetchRestaurants(function(e,t){if(e)o(e,null);else{var n=t.find(function(e){return e.id==r});n?o(null,n):o("Restaurant does not exist",null)}})}},{key:"fetchRestaurantByCuisine",value:function(r,o){a.fetchRestaurants(function(e,t){if(e)o(e,null);else{var n=t.filter(function(e){return e.cuisine_type==r});o(null,n)}})}},{key:"fetchRestaurantByNeighborhood",value:function(r,o){a.fetchRestaurants(function(e,t){if(e)o(e,null);else{var n=t.filter(function(e){return e.neighborhood==r});o(null,n)}})}},{key:"fetchRestaurantByCuisineAndNeighborhood",value:function(r,o,i){a.fetchRestaurants(function(e,t){if(e)i(e,null);else{var n=t;"all"!=r&&(n=n.filter(function(e){return e.cuisine_type==r})),"all"!=o&&(n=n.filter(function(e){return e.neighborhood==o})),i(null,n)}})}},{key:"fetchNeighborhoods",value:function(o){a.fetchRestaurants(function(e,n){if(e)o(e,null);else{var r=n.map(function(e,t){return n[t].neighborhood}),t=r.filter(function(e,t){return r.indexOf(e)==t});o(null,t)}})}},{key:"fetchCuisines",value:function(o){a.fetchRestaurants(function(e,n){if(e)o(e,null);else{var r=n.map(function(e,t){return n[t].cuisine_type}),t=r.filter(function(e,t){return r.indexOf(e)==t});o(null,t)}})}},{key:"urlForRestaurant",value:function(e){return"./restaurant.html?id="+e.id}},{key:"imageUrlForRestaurant",value:function(e){return"/img/"+e.photograph}},{key:"mapMarkerForRestaurant",value:function(e,t){var n=new L.marker([e.latlng.lat,e.latlng.lng],{title:e.name,alt:e.name,url:a.urlForRestaurant(e)});return n.addTo(newMap),n}},{key:"DATABASE_URL",get:function(){return"http://localhost:1337/restaurants"}}]),a}(),restaurant=void 0;document.addEventListener("DOMContentLoaded",function(e){initMap()});var initMap=function(){fetchRestaurantFromURL(function(e,t){e?console.error(e):(self.newMap=L.map("map",{center:[t.latlng.lat,t.latlng.lng],zoom:16,scrollWheelZoom:!1}),L.tileLayer("https://api.tiles.mapbox.com/v4/{id}/{z}/{x}/{y}.jpg70?access_token={mapboxToken}",{mapboxToken:"pk.eyJ1IjoiZm91YWQtYXNocmFmIiwiYSI6ImNqazE0dm1iNjA3eGszcnQ0dDNlN3k3bnAifQ.uKTfhCxs1NtirqEcRaAZwg",maxZoom:18,attribution:'Map data &copy; <a href="https://www.openstreetmap.org/">OpenStreetMap</a> contributors, <a href="https://creativecommons.org/licenses/by-sa/2.0/">CC-BY-SA</a>, Imagery Â© <a href="https://www.mapbox.com/">Mapbox</a>',id:"mapbox.streets"}).addTo(newMap),fillBreadcrumb(),DBHelper.mapMarkerForRestaurant(self.restaurant,self.newMap))})},fetchRestaurantFromURL=function(n){if(self.restaurant)n(null,self.restaurant);else{var e=getParameterByName("id");e?DBHelper.fetchRestaurantById(e,function(e,t){(self.restaurant=t)?(resetRestaurant(),fillRestaurantHTML(),n(null,t)):console.error(e)}):(error="No restaurant id in URL",n(error,null))}},fillRestaurantHTML=function(){var e=0<arguments.length&&void 0!==arguments[0]?arguments[0]:self.restaurant;document.getElementById("restaurant-name").innerHTML=e.name,document.getElementById("restaurant-address").innerHTML=e.address;var t=document.getElementById("restaurant-img");t.className="restaurant-img";var n=DBHelper.imageUrlForRestaurant(e),r="webp";t.src=n+"-800_2x."+r,t.setAttribute("srcset",n+"-800_2x."+r+" 800w, "+n+"-400_1x."+r+" 400w"),t.setAttribute("alt",e.name+" Restaurant"),document.getElementById("restaurant-cuisine").innerHTML=e.cuisine_type,e.operating_hours&&fillRestaurantHoursHTML(),fillReviewsHTML()},fillRestaurantHoursHTML=function(){var e=0<arguments.length&&void 0!==arguments[0]?arguments[0]:self.restaurant.operating_hours,t=document.getElementById("restaurant-hours");for(var n in e){var r=document.createElement("tr"),o=document.createElement("td");o.innerHTML=n,r.appendChild(o);var i=document.createElement("td");i.innerHTML=e[n],r.appendChild(i),t.appendChild(r)}},fillReviewsHTML=function(){var e=0<arguments.length&&void 0!==arguments[0]?arguments[0]:self.restaurant.reviews,t=document.getElementById("reviews-container"),n=document.createElement("h2");if(n.setAttribute("id","reviewsTitle"),n.innerHTML="Reviews",t.appendChild(n),!e){var r=document.createElement("p");return r.innerHTML="No reviews yet!",void t.appendChild(r)}var o=document.getElementById("reviews-list");e.forEach(function(e){o.appendChild(createReviewHTML(e))}),t.appendChild(o)},createReviewHTML=function(e){var t=document.createElement("li"),n=document.createElement("p");n.innerHTML=e.name,t.appendChild(n);var r=document.createElement("p");r.innerHTML=e.date,t.appendChild(r);var o=document.createElement("p");o.innerHTML="Rating: "+e.rating,t.appendChild(o);var i=document.createElement("p");return i.innerHTML=e.comments,t.appendChild(i),t},fillBreadcrumb=function(){var e=0<arguments.length&&void 0!==arguments[0]?arguments[0]:self.restaurant,t=document.getElementById("breadcrumb"),n=document.createElement("li");n.innerHTML=e.name,t.appendChild(n)},getParameterByName=function(e,t){t||(t=window.location.href),e=e.replace(/[\[\]]/g,"\\$&");var n=new RegExp("[?&]"+e+"(=([^&#]*)|&|#|$)").exec(t);return n?n[2]?decodeURIComponent(n[2].replace(/\+/g," ")):"":null},resetRestaurant=function(){self.newMap&&self.newMap.remove();var e=document.getElementById("breadcrumb");e.innerHTML="";var t=document.createElement("li");t.innerHTML="<a href='/'>Home</a>",e.appendChild(t);var n=document.getElementById("restaurant-hours");n&&(n.innerHTML="");var r=document.getElementById("reviewsTitle");r&&r.remove();var o=document.getElementById("reviews-list");o.innerHTML&&(o.innerHTML="")},_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};!function(e,t){"object"===("undefined"==typeof exports?"undefined":_typeof(exports))&&"undefined"!=typeof module?t():"function"==typeof define&&define.amd?define(t):t()}(0,function(){"undefined"!=typeof document&&function(e){var t;function n(){t||(t=!0,e())}0<=["interactive","complete"].indexOf(document.readyState)?e():(t=!1,document.addEventListener("DOMContentLoaded",n,!1),window.addEventListener("load",n,!1))}(function(){var o=!0,n=!1,r=null,i={text:!0,search:!0,url:!0,tel:!0,email:!0,password:!0,number:!0,date:!0,month:!0,week:!0,time:!0,datetime:!0,"datetime-local":!0};function a(e){return!!(e&&e!==document&&"HTML"!==e.nodeName&&"BODY"!==e.nodeName&&"classList"in e&&"contains"in e.classList)}function u(e){e.classList.contains("focus-visible")||(e.classList.add("focus-visible"),e.setAttribute("data-focus-visible-added",""))}function e(e){o=!1}function t(){document.addEventListener("mousemove",s),document.addEventListener("mousedown",s),document.addEventListener("mouseup",s),document.addEventListener("pointermove",s),document.addEventListener("pointerdown",s),document.addEventListener("pointerup",s),document.addEventListener("touchmove",s),document.addEventListener("touchstart",s),document.addEventListener("touchend",s)}function s(e){"html"!==e.target.nodeName.toLowerCase()&&(o=!1,document.removeEventListener("mousemove",s),document.removeEventListener("mousedown",s),document.removeEventListener("mouseup",s),document.removeEventListener("pointermove",s),document.removeEventListener("pointerdown",s),document.removeEventListener("pointerup",s),document.removeEventListener("touchmove",s),document.removeEventListener("touchstart",s),document.removeEventListener("touchend",s))}document.addEventListener("keydown",function(e){a(document.activeElement)&&u(document.activeElement),o=!0},!0),document.addEventListener("mousedown",e,!0),document.addEventListener("pointerdown",e,!0),document.addEventListener("touchstart",e,!0),document.addEventListener("focus",function(e){var t,n,r;a(e.target)&&(o||(t=e.target,n=t.type,"INPUT"==(r=t.tagName)&&i[n]&&!t.readOnly||"TEXTAREA"==r&&!t.readOnly||t.isContentEditable))&&u(e.target)},!0),document.addEventListener("blur",function(e){var t;a(e.target)&&(e.target.classList.contains("focus-visible")||e.target.hasAttribute("data-focus-visible-added"))&&(n=!0,window.clearTimeout(r),r=window.setTimeout(function(){n=!1,window.clearTimeout(r)},100),(t=e.target).hasAttribute("data-focus-visible-added")&&(t.classList.remove("focus-visible"),t.removeAttribute("data-focus-visible-added")))},!0),document.addEventListener("visibilitychange",function(e){"hidden"==document.visibilityState&&(n&&(o=!0),t())},!0),t(),document.body.classList.add("js-focus-visible")})});
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImlkYi5qcyIsImRiaGVscGVyLmpzIiwicmVzdGF1cmFudF9pbmZvLmpzIiwiZm9jdXMtdmlzaWJsZS5qcyJdLCJuYW1lcyI6WyJwcm9taXNpZnlSZXF1ZXN0IiwicmVxdWVzdCIsIlByb21pc2UiLCJyZXNvbHZlIiwicmVqZWN0Iiwib25zdWNjZXNzIiwicmVzdWx0Iiwib25lcnJvciIsImVycm9yIiwicHJvbWlzaWZ5UmVxdWVzdENhbGwiLCJvYmoiLCJtZXRob2QiLCJhcmdzIiwicCIsImFwcGx5IiwidGhlbiIsInByb3h5UHJvcGVydGllcyIsIlByb3h5Q2xhc3MiLCJ0YXJnZXRQcm9wIiwicHJvcGVydGllcyIsImZvckVhY2giLCJwcm9wIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJwcm90b3R5cGUiLCJnZXQiLCJ0aGlzIiwic2V0IiwidmFsIiwicHJveHlSZXF1ZXN0TWV0aG9kcyIsIkNvbnN0cnVjdG9yIiwiYXJndW1lbnRzIiwicHJveHlNZXRob2RzIiwicHJveHlDdXJzb3JSZXF1ZXN0TWV0aG9kcyIsInZhbHVlIiwiQ3Vyc29yIiwiSW5kZXgiLCJpbmRleCIsIl9pbmRleCIsImN1cnNvciIsIl9jdXJzb3IiLCJfcmVxdWVzdCIsIk9iamVjdFN0b3JlIiwic3RvcmUiLCJfc3RvcmUiLCJUcmFuc2FjdGlvbiIsImlkYlRyYW5zYWN0aW9uIiwiX3R4IiwiY29tcGxldGUiLCJvbmNvbXBsZXRlIiwib25hYm9ydCIsIlVwZ3JhZGVEQiIsImRiIiwib2xkVmVyc2lvbiIsInRyYW5zYWN0aW9uIiwiX2RiIiwiREIiLCJJREJJbmRleCIsIklEQkN1cnNvciIsIm1ldGhvZE5hbWUiLCJjcmVhdGVJbmRleCIsIklEQk9iamVjdFN0b3JlIiwib2JqZWN0U3RvcmUiLCJJREJUcmFuc2FjdGlvbiIsImNyZWF0ZU9iamVjdFN0b3JlIiwiSURCRGF0YWJhc2UiLCJmdW5jTmFtZSIsInJlcGxhY2UiLCJhcnIiLCJBcnJheSIsInNsaWNlIiwiY2FsbCIsImNhbGxiYWNrIiwibGVuZ3RoIiwibmF0aXZlT2JqZWN0IiwiZ2V0QWxsIiwicXVlcnkiLCJjb3VudCIsImluc3RhbmNlIiwiaXRlbXMiLCJpdGVyYXRlQ3Vyc29yIiwicHVzaCIsInVuZGVmaW5lZCIsImNvbnRpbnVlIiwiZXhwIiwib3BlbiIsIm5hbWUiLCJ2ZXJzaW9uIiwidXBncmFkZUNhbGxiYWNrIiwiaW5kZXhlZERCIiwib251cGdyYWRlbmVlZGVkIiwiZXZlbnQiLCJkZWxldGUiLCJtb2R1bGUiLCJleHBvcnRzIiwiZGVmYXVsdCIsInNlbGYiLCJpZGIiLCJfY3JlYXRlQ2xhc3MiLCJkZWZpbmVQcm9wZXJ0aWVzIiwidGFyZ2V0IiwicHJvcHMiLCJpIiwiZGVzY3JpcHRvciIsImVudW1lcmFibGUiLCJjb25maWd1cmFibGUiLCJ3cml0YWJsZSIsImtleSIsInByb3RvUHJvcHMiLCJzdGF0aWNQcm9wcyIsIl9jbGFzc0NhbGxDaGVjayIsIlR5cGVFcnJvciIsIm5ld01hcCIsIkRCSGVscGVyIiwidXBncmFkZURiIiwia2V5UGF0aCIsIm9wZW5JZGIiLCJyZXN0YXVyYW50cyIsInJldmVyc2UiLCJnZXRDYWNoZWRSZXN0YXVyYW50cyIsImZldGNoIiwiREFUQUJBU0VfVVJMIiwicmVzcG9uc2UiLCJqc29uIiwicmVzdGF1cmFudCIsInB1dCIsImNhdGNoIiwiZXJyIiwiaWQiLCJmZXRjaFJlc3RhdXJhbnRzIiwiZmluZCIsInIiLCJjdWlzaW5lIiwicmVzdWx0cyIsImZpbHRlciIsImN1aXNpbmVfdHlwZSIsIm5laWdoYm9yaG9vZCIsIm5laWdoYm9yaG9vZHMiLCJtYXAiLCJ2IiwidW5pcXVlTmVpZ2hib3Job29kcyIsImluZGV4T2YiLCJjdWlzaW5lcyIsInVuaXF1ZUN1aXNpbmVzIiwicGhvdG9ncmFwaCIsIm1hcmtlciIsIkwiLCJsYXRsbmciLCJsYXQiLCJsbmciLCJ0aXRsZSIsImFsdCIsInVybCIsInVybEZvclJlc3RhdXJhbnQiLCJhZGRUbyIsImRvY3VtZW50IiwiYWRkRXZlbnRMaXN0ZW5lciIsImluaXRNYXAiLCJmZXRjaFJlc3RhdXJhbnRGcm9tVVJMIiwiY29uc29sZSIsImNlbnRlciIsInpvb20iLCJzY3JvbGxXaGVlbFpvb20iLCJ0aWxlTGF5ZXIiLCJtYXBib3hUb2tlbiIsIm1heFpvb20iLCJhdHRyaWJ1dGlvbiIsImZpbGxCcmVhZGNydW1iIiwibWFwTWFya2VyRm9yUmVzdGF1cmFudCIsImdldFBhcmFtZXRlckJ5TmFtZSIsImZldGNoUmVzdGF1cmFudEJ5SWQiLCJyZXNldFJlc3RhdXJhbnQiLCJmaWxsUmVzdGF1cmFudEhUTUwiLCJnZXRFbGVtZW50QnlJZCIsImlubmVySFRNTCIsImFkZHJlc3MiLCJpbWFnZSIsImNsYXNzTmFtZSIsImltYWdlVXJsTmFtZSIsImltYWdlVXJsRm9yUmVzdGF1cmFudCIsImltYWdlVHlwZSIsInNyYyIsInNldEF0dHJpYnV0ZSIsIm9wZXJhdGluZ19ob3VycyIsImZpbGxSZXN0YXVyYW50SG91cnNIVE1MIiwiZmlsbFJldmlld3NIVE1MIiwib3BlcmF0aW5nSG91cnMiLCJob3VycyIsInJvdyIsImNyZWF0ZUVsZW1lbnQiLCJkYXkiLCJhcHBlbmRDaGlsZCIsInRpbWUiLCJyZXZpZXdzIiwiY29udGFpbmVyIiwibm9SZXZpZXdzIiwidWwiLCJyZXZpZXciLCJjcmVhdGVSZXZpZXdIVE1MIiwibGkiLCJkYXRlIiwicmF0aW5nIiwiY29tbWVudHMiLCJicmVhZGNydW1iIiwid2luZG93IiwibG9jYXRpb24iLCJocmVmIiwiUmVnRXhwIiwiZXhlYyIsImRlY29kZVVSSUNvbXBvbmVudCIsInJlbW92ZSIsImhvdXJzVGFibGUiLCJyZXZpZXdzVGl0bGUiLCJyZXZpZXdzTGlzdCIsIl90eXBlb2YiLCJTeW1ib2wiLCJpdGVyYXRvciIsImNvbnN0cnVjdG9yIiwiZ2xvYmFsIiwiZmFjdG9yeSIsImRlZmluZSIsImFtZCIsImxvYWRlZCIsImxvYWQiLCJyZWFkeVN0YXRlIiwib25ET01SZWFkeSIsImhhZEtleWJvYXJkRXZlbnQiLCJoYWRGb2N1c1Zpc2libGVSZWNlbnRseSIsImhhZEZvY3VzVmlzaWJsZVJlY2VudGx5VGltZW91dCIsImlucHV0VHlwZXNXaGl0ZWxpc3QiLCJ0ZXh0Iiwic2VhcmNoIiwidGVsIiwiZW1haWwiLCJwYXNzd29yZCIsIm51bWJlciIsIm1vbnRoIiwid2VlayIsImRhdGV0aW1lIiwiZGF0ZXRpbWUtbG9jYWwiLCJpc1ZhbGlkRm9jdXNUYXJnZXQiLCJlbCIsIm5vZGVOYW1lIiwiY2xhc3NMaXN0IiwiYWRkRm9jdXNWaXNpYmxlQ2xhc3MiLCJjb250YWlucyIsImFkZCIsIm9uUG9pbnRlckRvd24iLCJlIiwiYWRkSW5pdGlhbFBvaW50ZXJNb3ZlTGlzdGVuZXJzIiwib25Jbml0aWFsUG9pbnRlck1vdmUiLCJ0b0xvd2VyQ2FzZSIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJhY3RpdmVFbGVtZW50IiwidHlwZSIsInRhZ05hbWUiLCJyZWFkT25seSIsImlzQ29udGVudEVkaXRhYmxlIiwiaGFzQXR0cmlidXRlIiwiY2xlYXJUaW1lb3V0Iiwic2V0VGltZW91dCIsInJlbW92ZUF0dHJpYnV0ZSIsInZpc2liaWxpdHlTdGF0ZSIsImJvZHkiXSwibWFwcGluZ3MiOiJBQUFBLGNBRUEsV0FLQSxTQUFBQSxFQUFBQyxHQUNBLE9BQUEsSUFBQUMsUUFBQSxTQUFBQyxFQUFBQyxHQUNBSCxFQUFBSSxVQUFBLFdBQ0FGLEVBQUFGLEVBQUFLLFNBR0FMLEVBQUFNLFFBQUEsV0FDQUgsRUFBQUgsRUFBQU8sVUFLQSxTQUFBQyxFQUFBQyxFQUFBQyxFQUFBQyxHQUNBLElBQUFYLEVBQ0FZLEVBQUEsSUFBQVgsUUFBQSxTQUFBQyxFQUFBQyxHQUVBSixFQURBQyxFQUFBUyxFQUFBQyxHQUFBRyxNQUFBSixFQUFBRSxJQUNBRyxLQUFBWixFQUFBQyxLQUlBLE9BREFTLEVBQUFaLFFBQUFBLEVBQ0FZLEVBV0EsU0FBQUcsRUFBQUMsRUFBQUMsRUFBQUMsR0FDQUEsRUFBQUMsUUFBQSxTQUFBQyxHQUNBQyxPQUFBQyxlQUFBTixFQUFBTyxVQUFBSCxFQUFBLENBQ0FJLElBQUEsV0FDQSxPQUFBQyxLQUFBUixHQUFBRyxJQUVBTSxJQUFBLFNBQUFDLEdBQ0FGLEtBQUFSLEdBQUFHLEdBQUFPLE9BTUEsU0FBQUMsRUFBQVosRUFBQUMsRUFBQVksRUFBQVgsR0FDQUEsRUFBQUMsUUFBQSxTQUFBQyxHQUNBQSxLQUFBUyxFQUFBTixZQUNBUCxFQUFBTyxVQUFBSCxHQUFBLFdBQ0EsT0FBQVosRUFBQWlCLEtBQUFSLEdBQUFHLEVBQUFVLGVBS0EsU0FBQUMsRUFBQWYsRUFBQUMsRUFBQVksRUFBQVgsR0FDQUEsRUFBQUMsUUFBQSxTQUFBQyxHQUNBQSxLQUFBUyxFQUFBTixZQUNBUCxFQUFBTyxVQUFBSCxHQUFBLFdBQ0EsT0FBQUssS0FBQVIsR0FBQUcsR0FBQVAsTUFBQVksS0FBQVIsR0FBQWEsZUFLQSxTQUFBRSxFQUFBaEIsRUFBQUMsRUFBQVksRUFBQVgsR0FDQUEsRUFBQUMsUUFBQSxTQUFBQyxHQUNBQSxLQUFBUyxFQUFBTixZQUNBUCxFQUFBTyxVQUFBSCxHQUFBLFdBQ0EsT0EzQ0FYLEVBMkNBZ0IsS0FBQVIsSUExQ0FMLEVBQUFKLEVBQUFDLEVBMENBVyxFQUFBVSxZQXpDQWhCLEtBQUEsU0FBQW1CLEdBQ0EsR0FBQUEsRUFDQSxPQUFBLElBQUFDLEVBQUFELEVBQUFyQixFQUFBWixXQUpBLElBQUFTLEVBQ0FHLE1BK0NBLFNBQUF1QixFQUFBQyxHQUNBWCxLQUFBWSxPQUFBRCxFQVNBLFNBQUFGLEVBQUFJLEVBQUF0QyxHQUNBeUIsS0FBQWMsUUFBQUQsRUFDQWIsS0FBQWUsU0FBQXhDLEVBdUJBLFNBQUF5QyxFQUFBQyxHQUNBakIsS0FBQWtCLE9BQUFELEVBbUJBLFNBQUFFLEVBQUFDLEdBQ0FwQixLQUFBcUIsSUFBQUQsRUFDQXBCLEtBQUFzQixTQUFBLElBQUE5QyxRQUFBLFNBQUFDLEVBQUFDLEdBQ0EwQyxFQUFBRyxXQUFBLFdBQ0E5QyxLQUVBMkMsRUFBQXZDLFFBQUEsV0FDQUgsRUFBQTBDLEVBQUF0QyxRQUVBc0MsRUFBQUksUUFBQSxXQUNBOUMsRUFBQTBDLEVBQUF0QyxVQWFBLFNBQUEyQyxFQUFBQyxFQUFBQyxFQUFBQyxHQUNBNUIsS0FBQTZCLElBQUFILEVBQ0ExQixLQUFBMkIsV0FBQUEsRUFDQTNCLEtBQUE0QixZQUFBLElBQUFULEVBQUFTLEdBV0EsU0FBQUUsRUFBQUosR0FDQTFCLEtBQUE2QixJQUFBSCxFQXpGQXBDLEVBQUFvQixFQUFBLFNBQUEsQ0FBQSxPQUFBLFVBQUEsYUFBQSxXQUVBUCxFQUFBTyxFQUFBLFNBQUFxQixTQUFBLENBQUEsTUFBQSxTQUFBLFNBQUEsYUFBQSxVQUVBeEIsRUFBQUcsRUFBQSxTQUFBcUIsU0FBQSxDQUFBLGFBQUEsa0JBT0F6QyxFQUFBbUIsRUFBQSxVQUFBLENBQUEsWUFBQSxNQUFBLGFBQUEsVUFFQU4sRUFBQU0sRUFBQSxVQUFBdUIsVUFBQSxDQUFBLFNBQUEsV0FHQSxDQUFBLFVBQUEsV0FBQSxzQkFBQXRDLFFBQUEsU0FBQXVDLEdBQ0FBLEtBQUFELFVBQUFsQyxZQUNBVyxFQUFBWCxVQUFBbUMsR0FBQSxXQUNBLElBQUFwQixFQUFBYixLQUNBZCxFQUFBbUIsVUFDQSxPQUFBN0IsUUFBQUMsVUFBQVksS0FBQSxXQUVBLE9BREF3QixFQUFBQyxRQUFBbUIsR0FBQTdDLE1BQUF5QixFQUFBQyxRQUFBNUIsR0FDQVosRUFBQXVDLEVBQUFFLFVBQUExQixLQUFBLFNBQUFtQixHQUNBLEdBQUFBLEVBQ0EsT0FBQSxJQUFBQyxFQUFBRCxFQUFBSyxFQUFBRSxrQkFVQUMsRUFBQWxCLFVBQUFvQyxZQUFBLFdBQ0EsT0FBQSxJQUFBeEIsRUFBQVYsS0FBQWtCLE9BQUFnQixZQUFBOUMsTUFBQVksS0FBQWtCLE9BQUFiLGFBR0FXLEVBQUFsQixVQUFBYSxNQUFBLFdBQ0EsT0FBQSxJQUFBRCxFQUFBVixLQUFBa0IsT0FBQVAsTUFBQXZCLE1BQUFZLEtBQUFrQixPQUFBYixhQUdBZixFQUFBMEIsRUFBQSxTQUFBLENBQUEsT0FBQSxVQUFBLGFBQUEsa0JBRUFiLEVBQUFhLEVBQUEsU0FBQW1CLGVBQUEsQ0FBQSxNQUFBLE1BQUEsU0FBQSxRQUFBLE1BQUEsU0FBQSxTQUFBLGFBQUEsVUFFQTVCLEVBQUFTLEVBQUEsU0FBQW1CLGVBQUEsQ0FBQSxhQUFBLGtCQUVBN0IsRUFBQVUsRUFBQSxTQUFBbUIsZUFBQSxDQUFBLGdCQWlCQWhCLEVBQUFyQixVQUFBc0MsWUFBQSxXQUNBLE9BQUEsSUFBQXBCLEVBQUFoQixLQUFBcUIsSUFBQWUsWUFBQWhELE1BQUFZLEtBQUFxQixJQUFBaEIsYUFHQWYsRUFBQTZCLEVBQUEsTUFBQSxDQUFBLG1CQUFBLFNBRUFiLEVBQUFhLEVBQUEsTUFBQWtCLGVBQUEsQ0FBQSxVQVFBWixFQUFBM0IsVUFBQXdDLGtCQUFBLFdBQ0EsT0FBQSxJQUFBdEIsRUFBQWhCLEtBQUE2QixJQUFBUyxrQkFBQWxELE1BQUFZLEtBQUE2QixJQUFBeEIsYUFHQWYsRUFBQW1DLEVBQUEsTUFBQSxDQUFBLE9BQUEsVUFBQSxxQkFFQW5CLEVBQUFtQixFQUFBLE1BQUFjLFlBQUEsQ0FBQSxvQkFBQSxVQU1BVCxFQUFBaEMsVUFBQThCLFlBQUEsV0FDQSxPQUFBLElBQUFULEVBQUFuQixLQUFBNkIsSUFBQUQsWUFBQXhDLE1BQUFZLEtBQUE2QixJQUFBeEIsYUFHQWYsRUFBQXdDLEVBQUEsTUFBQSxDQUFBLE9BQUEsVUFBQSxxQkFFQXhCLEVBQUF3QixFQUFBLE1BQUFTLFlBQUEsQ0FBQSxVQUlBLENBQUEsYUFBQSxpQkFBQTdDLFFBQUEsU0FBQThDLEdBQ0EsQ0FBQXhCLEVBQUFOLEdBQUFoQixRQUFBLFNBQUFVLEdBRUFvQyxLQUFBcEMsRUFBQU4sWUFFQU0sRUFBQU4sVUFBQTBDLEVBQUFDLFFBQUEsT0FBQSxZQUFBLFdBQ0EsSUEzTEFDLEVBMkxBeEQsR0EzTEF3RCxFQTJMQXJDLFVBMUxBc0MsTUFBQTdDLFVBQUE4QyxNQUFBQyxLQUFBSCxJQTJMQUksRUFBQTVELEVBQUFBLEVBQUE2RCxPQUFBLEdBQ0FDLEVBQUFoRCxLQUFBa0IsUUFBQWxCLEtBQUFZLE9BQ0FyQyxFQUFBeUUsRUFBQVIsR0FBQXBELE1BQUE0RCxFQUFBOUQsRUFBQTBELE1BQUEsR0FBQSxJQUNBckUsRUFBQUksVUFBQSxXQUNBbUUsRUFBQXZFLEVBQUFLLGVBT0EsQ0FBQThCLEVBQUFNLEdBQUF0QixRQUFBLFNBQUFVLEdBQ0FBLEVBQUFOLFVBQUFtRCxTQUNBN0MsRUFBQU4sVUFBQW1ELE9BQUEsU0FBQUMsRUFBQUMsR0FDQSxJQUFBQyxFQUFBcEQsS0FDQXFELEVBQUEsR0FFQSxPQUFBLElBQUE3RSxRQUFBLFNBQUFDLEdBQ0EyRSxFQUFBRSxjQUFBSixFQUFBLFNBQUFyQyxHQUNBQSxHQUlBd0MsRUFBQUUsS0FBQTFDLEVBQUFMLFlBRUFnRCxJQUFBTCxHQUFBRSxFQUFBTixRQUFBSSxFQUlBdEMsRUFBQTRDLFdBSEFoRixFQUFBNEUsSUFOQTVFLEVBQUE0RSxXQWVBLElBQUFLLEVBQUEsQ0FDQUMsS0FBQSxTQUFBQyxFQUFBQyxFQUFBQyxHQUNBLElBQUEzRSxFQUFBSixFQUFBZ0YsVUFBQSxPQUFBLENBQUFILEVBQUFDLElBQ0F0RixFQUFBWSxFQUFBWixRQVVBLE9BUkFBLElBQ0FBLEVBQUF5RixnQkFBQSxTQUFBQyxHQUNBSCxHQUNBQSxFQUFBLElBQUFyQyxFQUFBbEQsRUFBQUssT0FBQXFGLEVBQUF0QyxXQUFBcEQsRUFBQXFELGdCQUtBekMsRUFBQUUsS0FBQSxTQUFBcUMsR0FDQSxPQUFBLElBQUFJLEVBQUFKLE1BR0F3QyxPQUFBLFNBQUFOLEdBQ0EsT0FBQTdFLEVBQUFnRixVQUFBLGlCQUFBLENBQUFILE1BSUEsb0JBQUFPLFFBQ0FBLE9BQUFDLFFBQUFWLEVBQ0FTLE9BQUFDLFFBQUFDLFFBQUFGLE9BQUFDLFNBRUFFLEtBQUFDLElBQUFiLEVBMVBBLEdDQUEsSUFBQWMsYUFBQSxXQUFBLFNBQUFDLEVBQUFDLEVBQUFDLEdBQUEsSUFBQSxJQUFBQyxFQUFBLEVBQUFBLEVBQUFELEVBQUE1QixPQUFBNkIsSUFBQSxDQUFBLElBQUFDLEVBQUFGLEVBQUFDLEdBQUFDLEVBQUFDLFdBQUFELEVBQUFDLGFBQUEsRUFBQUQsRUFBQUUsY0FBQSxFQUFBLFVBQUFGLElBQUFBLEVBQUFHLFVBQUEsR0FBQXBGLE9BQUFDLGVBQUE2RSxFQUFBRyxFQUFBSSxJQUFBSixJQUFBLE9BQUEsU0FBQXpFLEVBQUE4RSxFQUFBQyxHQUFBLE9BQUFELEdBQUFULEVBQUFyRSxFQUFBTixVQUFBb0YsR0FBQUMsR0FBQVYsRUFBQXJFLEVBQUErRSxHQUFBL0UsR0FBQSxHQUVBLFNBQUFnRixnQkFBQWhDLEVBQUFoRCxHQUFBLEtBQUFnRCxhQUFBaEQsR0FBQSxNQUFBLElBQUFpRixVQUFBLHFDQU1BLElDUEFDLE9ET0FDLFNBQUEsV0FDQSxTQUFBQSxJQUNBSCxnQkFBQXBGLEtBQUF1RixHQThQQSxPQTNQQWYsYUFBQWUsRUFBQSxLQUFBLENBQUEsQ0FDQU4sSUFBQSxVQUNBekUsTUFBQSxXQUNBLE9BQUErRCxJQUFBWixLQUFBLHFCQUFBLEVBQUEsU0FBQTZCLEdBQ0FBLEVBQUFsRCxrQkFBQSxxQkFBQSxDQUNBbUQsUUFBQSxPQUVBdkQsWUFBQSxVQUFBLGlCQUdBLENBQ0ErQyxJQUFBLHVCQUNBekUsTUFBQSxXQUNBLE9BQUErRSxFQUFBRyxVQUFBckcsS0FBQSxTQUFBcUMsR0FDQSxHQUFBQSxFQUdBLE9BRkFBLEVBQUFFLFlBQUEsc0JBQUFRLFlBQUEsc0JBQUF6QixNQUFBLFdBRUFzQyxTQUFBNUQsS0FBQSxTQUFBc0csR0FDQSxPQUFBQSxFQUFBQyxnQkFRQSxDQUNBWCxJQUFBLG1CQUNBekUsTUFBQSxTQUFBc0MsR0FFQXlDLEVBQUFNLHVCQUFBeEcsS0FBQSxTQUFBc0csR0FDQSxHQUFBLEVBQUFBLEVBQUE1QyxPQUNBLE9BQUFELEVBQUEsS0FBQTZDLEtBS0FHLE1BQUFQLEVBQUFRLGNBQUExRyxLQUFBLFNBQUEyRyxHQUNBLE9BQUFBLEVBQUFDLFNBQ0E1RyxLQUFBLFNBQUFzRyxHQVNBLE9BUkFKLEVBQUFHLFVBQUFyRyxLQUFBLFNBQUFxQyxHQUNBLEdBQUFBLEVBQUEsQ0FDQSxJQUNBVCxFQURBUyxFQUFBRSxZQUFBLHFCQUFBLGFBQ0FRLFlBQUEsc0JBQ0F1RCxFQUFBakcsUUFBQSxTQUFBd0csR0FDQWpGLEVBQUFrRixJQUFBRCxRQUdBcEQsRUFBQSxLQUFBNkMsS0FDQVMsTUFBQSxTQUFBQyxHQUNBLE9BQUF2RCxFQUFBdUQsRUFBQSxVQVFBLENBQ0FwQixJQUFBLHNCQUNBekUsTUFBQSxTQUFBOEYsRUFBQXhELEdBRUF5QyxFQUFBZ0IsaUJBQUEsU0FBQXpILEVBQUE2RyxHQUNBLEdBQUE3RyxFQUNBZ0UsRUFBQWhFLEVBQUEsVUFDQSxDQUNBLElBQUFvSCxFQUFBUCxFQUFBYSxLQUFBLFNBQUFDLEdBQ0EsT0FBQUEsRUFBQUgsSUFBQUEsSUFFQUosRUFFQXBELEVBQUEsS0FBQW9ELEdBR0FwRCxFQUFBLDRCQUFBLFdBVUEsQ0FDQW1DLElBQUEsMkJBQ0F6RSxNQUFBLFNBQUFrRyxFQUFBNUQsR0FFQXlDLEVBQUFnQixpQkFBQSxTQUFBekgsRUFBQTZHLEdBQ0EsR0FBQTdHLEVBQ0FnRSxFQUFBaEUsRUFBQSxVQUNBLENBRUEsSUFBQTZILEVBQUFoQixFQUFBaUIsT0FBQSxTQUFBSCxHQUNBLE9BQUFBLEVBQUFJLGNBQUFILElBRUE1RCxFQUFBLEtBQUE2RCxRQVNBLENBQ0ExQixJQUFBLGdDQUNBekUsTUFBQSxTQUFBc0csRUFBQWhFLEdBRUF5QyxFQUFBZ0IsaUJBQUEsU0FBQXpILEVBQUE2RyxHQUNBLEdBQUE3RyxFQUNBZ0UsRUFBQWhFLEVBQUEsVUFDQSxDQUVBLElBQUE2SCxFQUFBaEIsRUFBQWlCLE9BQUEsU0FBQUgsR0FDQSxPQUFBQSxFQUFBSyxjQUFBQSxJQUVBaEUsRUFBQSxLQUFBNkQsUUFTQSxDQUNBMUIsSUFBQSwwQ0FDQXpFLE1BQUEsU0FBQWtHLEVBQUFJLEVBQUFoRSxHQUVBeUMsRUFBQWdCLGlCQUFBLFNBQUF6SCxFQUFBNkcsR0FDQSxHQUFBN0csRUFDQWdFLEVBQUFoRSxFQUFBLFVBQ0EsQ0FDQSxJQUFBNkgsRUFBQWhCLEVBQ0EsT0FBQWUsSUFFQUMsRUFBQUEsRUFBQUMsT0FBQSxTQUFBSCxHQUNBLE9BQUFBLEVBQUFJLGNBQUFILEtBR0EsT0FBQUksSUFFQUgsRUFBQUEsRUFBQUMsT0FBQSxTQUFBSCxHQUNBLE9BQUFBLEVBQUFLLGNBQUFBLEtBR0FoRSxFQUFBLEtBQUE2RCxRQVNBLENBQ0ExQixJQUFBLHFCQUNBekUsTUFBQSxTQUFBc0MsR0FFQXlDLEVBQUFnQixpQkFBQSxTQUFBekgsRUFBQTZHLEdBQ0EsR0FBQTdHLEVBQ0FnRSxFQUFBaEUsRUFBQSxVQUNBLENBRUEsSUFBQWlJLEVBQUFwQixFQUFBcUIsSUFBQSxTQUFBQyxFQUFBckMsR0FDQSxPQUFBZSxFQUFBZixHQUFBa0MsZUFHQUksRUFBQUgsRUFBQUgsT0FBQSxTQUFBSyxFQUFBckMsR0FDQSxPQUFBbUMsRUFBQUksUUFBQUYsSUFBQXJDLElBRUE5QixFQUFBLEtBQUFvRSxRQVNBLENBQ0FqQyxJQUFBLGdCQUNBekUsTUFBQSxTQUFBc0MsR0FFQXlDLEVBQUFnQixpQkFBQSxTQUFBekgsRUFBQTZHLEdBQ0EsR0FBQTdHLEVBQ0FnRSxFQUFBaEUsRUFBQSxVQUNBLENBRUEsSUFBQXNJLEVBQUF6QixFQUFBcUIsSUFBQSxTQUFBQyxFQUFBckMsR0FDQSxPQUFBZSxFQUFBZixHQUFBaUMsZUFHQVEsRUFBQUQsRUFBQVIsT0FBQSxTQUFBSyxFQUFBckMsR0FDQSxPQUFBd0MsRUFBQUQsUUFBQUYsSUFBQXJDLElBRUE5QixFQUFBLEtBQUF1RSxRQVNBLENBQ0FwQyxJQUFBLG1CQUNBekUsTUFBQSxTQUFBMEYsR0FDQSxNQUFBLHdCQUFBQSxFQUFBSSxLQU9BLENBQ0FyQixJQUFBLHdCQUNBekUsTUFBQSxTQUFBMEYsR0FDQSxNQUFBLFFBQUFBLEVBQUFvQixhQU9BLENBQ0FyQyxJQUFBLHlCQUNBekUsTUFBQSxTQUFBMEYsRUFBQWMsR0FFQSxJQUFBTyxFQUFBLElBQUFDLEVBQUFELE9BQUEsQ0FBQXJCLEVBQUF1QixPQUFBQyxJQUFBeEIsRUFBQXVCLE9BQUFFLEtBQUEsQ0FBQUMsTUFBQTFCLEVBQUF0QyxLQUNBaUUsSUFBQTNCLEVBQUF0QyxLQUNBa0UsSUFBQXZDLEVBQUF3QyxpQkFBQTdCLEtBR0EsT0FEQXFCLEVBQUFTLE1BQUExQyxRQUNBaUMsSUFFQSxDQUNBdEMsSUFBQSxlQU9BbEYsSUFBQSxXQUVBLE1BQUEsd0NBSUF3RixFQWhRQSxHQ1JBVyxnQkFBQSxFQU1BK0IsU0FBQUMsaUJBQUEsbUJBQUEsU0FBQWpFLEdBQ0FrRSxZQU1BLElBQUFBLFFBQUEsV0FDQUMsdUJBQUEsU0FBQXRKLEVBQUFvSCxHQUNBcEgsRUFFQXVKLFFBQUF2SixNQUFBQSxJQUVBd0YsS0FBQWdCLE9BQUFrQyxFQUFBUixJQUFBLE1BQUEsQ0FDQXNCLE9BQUEsQ0FBQXBDLEVBQUF1QixPQUFBQyxJQUFBeEIsRUFBQXVCLE9BQUFFLEtBQ0FZLEtBQUEsR0FDQUMsaUJBQUEsSUFFQWhCLEVBQUFpQixVQUFBLG9GQUFBLENBQ0FDLFlBQUEsbUdBQ0FDLFFBQUEsR0FDQUMsWUFBQSwwTkFDQXRDLEdBQUEsbUJBQ0EwQixNQUFBMUMsUUFDQXVELGlCQUNBdEQsU0FBQXVELHVCQUFBeEUsS0FBQTRCLFdBQUE1QixLQUFBZ0IsWUFRQThDLHVCQUFBLFNBQUF0RixHQUNBLEdBQUF3QixLQUFBNEIsV0FFQXBELEVBQUEsS0FBQXdCLEtBQUE0QixnQkFGQSxDQUtBLElBQUFJLEVBQUF5QyxtQkFBQSxNQUNBekMsRUFLQWYsU0FBQXlELG9CQUFBMUMsRUFBQSxTQUFBeEgsRUFBQW9ILElBQ0E1QixLQUFBNEIsV0FBQUEsSUFNQStDLGtCQUNBQyxxQkFDQXBHLEVBQUEsS0FBQW9ELElBTkFtQyxRQUFBdkosTUFBQUEsTUFOQUEsTUFBQSwwQkFDQWdFLEVBQUFoRSxNQUFBLFNBbUJBb0ssbUJBQUEsV0FDQSxJQUFBaEQsRUFBQSxFQUFBN0YsVUFBQTBDLGFBQUFTLElBQUFuRCxVQUFBLEdBQUFBLFVBQUEsR0FBQWlFLEtBQUE0QixXQUVBK0IsU0FBQWtCLGVBQUEsbUJBQ0FDLFVBQUFsRCxFQUFBdEMsS0FFQXFFLFNBQUFrQixlQUFBLHNCQUNBQyxVQUFBbEQsRUFBQW1ELFFBRUEsSUFBQUMsRUFBQXJCLFNBQUFrQixlQUFBLGtCQUNBRyxFQUFBQyxVQUFBLGlCQUNBLElBQ0FDLEVBREFqRSxTQUFBa0Usc0JBQUF2RCxHQUVBd0QsRUFBQSxPQUNBSixFQUFBSyxJQUFBSCxFQUFBLFdBQUFFLEVBQ0FKLEVBQUFNLGFBQUEsU0FBQUosRUFBQSxXQUFBRSxFQUFBLFVBQUFGLEVBQUEsV0FBQUUsRUFBQSxTQUNBSixFQUFBTSxhQUFBLE1BQUExRCxFQUFBdEMsS0FBQSxlQUNBcUUsU0FBQWtCLGVBQUEsc0JBQ0FDLFVBQUFsRCxFQUFBVyxhQUdBWCxFQUFBMkQsaUJBQ0FDLDBCQUdBQyxtQkFNQUQsd0JBQUEsV0FDQSxJQUFBRSxFQUFBLEVBQUEzSixVQUFBMEMsYUFBQVMsSUFBQW5ELFVBQUEsR0FBQUEsVUFBQSxHQUFBaUUsS0FBQTRCLFdBQUEyRCxnQkFFQUksRUFBQWhDLFNBQUFrQixlQUFBLG9CQUNBLElBQUEsSUFBQWxFLEtBQUErRSxFQUFBLENBQ0EsSUFBQUUsRUFBQWpDLFNBQUFrQyxjQUFBLE1BRUFDLEVBQUFuQyxTQUFBa0MsY0FBQSxNQUNBQyxFQUFBaEIsVUFBQW5FLEVBQ0FpRixFQUFBRyxZQUFBRCxHQUVBLElBQUFFLEVBQUFyQyxTQUFBa0MsY0FBQSxNQUNBRyxFQUFBbEIsVUFBQVksRUFBQS9FLEdBQ0FpRixFQUFBRyxZQUFBQyxHQUVBTCxFQUFBSSxZQUFBSCxLQU9BSCxnQkFBQSxXQUNBLElBQUFRLEVBQUEsRUFBQWxLLFVBQUEwQyxhQUFBUyxJQUFBbkQsVUFBQSxHQUFBQSxVQUFBLEdBQUFpRSxLQUFBNEIsV0FBQXFFLFFBRUFDLEVBQUF2QyxTQUFBa0IsZUFBQSxxQkFDQXZCLEVBQUFLLFNBQUFrQyxjQUFBLE1BS0EsR0FKQXZDLEVBQUFnQyxhQUFBLEtBQUEsZ0JBQ0FoQyxFQUFBd0IsVUFBQSxVQUNBb0IsRUFBQUgsWUFBQXpDLElBRUEyQyxFQUFBLENBQ0EsSUFBQUUsRUFBQXhDLFNBQUFrQyxjQUFBLEtBR0EsT0FGQU0sRUFBQXJCLFVBQUEsdUJBQ0FvQixFQUFBSCxZQUFBSSxHQUdBLElBQUFDLEVBQUF6QyxTQUFBa0IsZUFBQSxnQkFDQW9CLEVBQUE3SyxRQUFBLFNBQUFpTCxHQUNBRCxFQUFBTCxZQUFBTyxpQkFBQUQsTUFFQUgsRUFBQUgsWUFBQUssSUFNQUUsaUJBQUEsU0FBQUQsR0FDQSxJQUFBRSxFQUFBNUMsU0FBQWtDLGNBQUEsTUFDQXZHLEVBQUFxRSxTQUFBa0MsY0FBQSxLQUNBdkcsRUFBQXdGLFVBQUF1QixFQUFBL0csS0FDQWlILEVBQUFSLFlBQUF6RyxHQUVBLElBQUFrSCxFQUFBN0MsU0FBQWtDLGNBQUEsS0FDQVcsRUFBQTFCLFVBQUF1QixFQUFBRyxLQUNBRCxFQUFBUixZQUFBUyxHQUVBLElBQUFDLEVBQUE5QyxTQUFBa0MsY0FBQSxLQUNBWSxFQUFBM0IsVUFBQSxXQUFBdUIsRUFBQUksT0FDQUYsRUFBQVIsWUFBQVUsR0FFQSxJQUFBQyxFQUFBL0MsU0FBQWtDLGNBQUEsS0FJQSxPQUhBYSxFQUFBNUIsVUFBQXVCLEVBQUFLLFNBQ0FILEVBQUFSLFlBQUFXLEdBRUFILEdBTUFoQyxlQUFBLFdBQ0EsSUFBQTNDLEVBQUEsRUFBQTdGLFVBQUEwQyxhQUFBUyxJQUFBbkQsVUFBQSxHQUFBQSxVQUFBLEdBQUFpRSxLQUFBNEIsV0FFQStFLEVBQUFoRCxTQUFBa0IsZUFBQSxjQUNBMEIsRUFBQTVDLFNBQUFrQyxjQUFBLE1BQ0FVLEVBQUF6QixVQUFBbEQsRUFBQXRDLEtBQ0FxSCxFQUFBWixZQUFBUSxJQU1BOUIsbUJBQUEsU0FBQW5GLEVBQUFrRSxHQUNBQSxJQUFBQSxFQUFBb0QsT0FBQUMsU0FBQUMsTUFDQXhILEVBQUFBLEVBQUFuQixRQUFBLFVBQUEsUUFDQSxJQUNBa0UsRUFEQSxJQUFBMEUsT0FBQSxPQUFBekgsRUFBQSxxQkFDQTBILEtBQUF4RCxHQUNBLE9BQUFuQixFQUNBQSxFQUFBLEdBQ0E0RSxtQkFBQTVFLEVBQUEsR0FBQWxFLFFBQUEsTUFBQSxNQURBLEdBREEsTUFRQXdHLGdCQUFBLFdBRUEzRSxLQUFBZ0IsUUFDQWhCLEtBQUFnQixPQUFBa0csU0FJQSxJQUFBUCxFQUFBaEQsU0FBQWtCLGVBQUEsY0FDQThCLEVBQUE3QixVQUFBLEdBR0EsSUFBQXlCLEVBQUE1QyxTQUFBa0MsY0FBQSxNQUNBVSxFQUFBekIsVUFBQSx1QkFDQTZCLEVBQUFaLFlBQUFRLEdBR0EsSUFBQVksRUFBQXhELFNBQUFrQixlQUFBLG9CQUNBc0MsSUFDQUEsRUFBQXJDLFVBQUEsSUFJQSxJQUFBc0MsRUFBQXpELFNBQUFrQixlQUFBLGdCQUNBdUMsR0FDQUEsRUFBQUYsU0FJQSxJQUFBRyxFQUFBMUQsU0FBQWtCLGVBQUEsZ0JBQ0F3QyxFQUFBdkMsWUFDQXVDLEVBQUF2QyxVQUFBLEtDak9Bd0MsUUFBQSxtQkFBQUMsUUFBQSxpQkFBQUEsT0FBQUMsU0FBQSxTQUFBOU0sR0FBQSxjQUFBQSxHQUFBLFNBQUFBLEdBQUEsT0FBQUEsR0FBQSxtQkFBQTZNLFFBQUE3TSxFQUFBK00sY0FBQUYsUUFBQTdNLElBQUE2TSxPQUFBL0wsVUFBQSxnQkFBQWQsSUFFQSxTQUFBZ04sRUFBQUMsR0FDQSxZQUFBLG9CQUFBN0gsUUFBQSxZQUFBd0gsUUFBQXhILFdBQUEsb0JBQUFELE9BQUE4SCxJQUFBLG1CQUFBQyxRQUFBQSxPQUFBQyxJQUFBRCxPQUFBRCxHQUFBQSxJQURBLENBRUF6SSxFQUFBLFdBdVFBLG9CQUFBeUUsVUF2QkEsU0FBQW5GLEdBQ0EsSUFBQXNKLEVBS0EsU0FBQUMsSUFDQUQsSUFDQUEsR0FBQSxFQUVBdEosS0FJQSxHQUFBLENBQUEsY0FBQSxZQUFBcUUsUUFBQWMsU0FBQXFFLFlBQ0F4SixLQUVBc0osR0FBQSxFQUNBbkUsU0FBQUMsaUJBQUEsbUJBQUFtRSxHQUFBLEdBQ0FuQixPQUFBaEQsaUJBQUEsT0FBQW1FLEdBQUEsSUFLQUUsQ0FuUUEsV0FDQSxJQUFBQyxHQUFBLEVBQ0FDLEdBQUEsRUFDQUMsRUFBQSxLQUVBQyxFQUFBLENBQ0FDLE1BQUEsRUFDQUMsUUFBQSxFQUNBL0UsS0FBQSxFQUNBZ0YsS0FBQSxFQUNBQyxPQUFBLEVBQ0FDLFVBQUEsRUFDQUMsUUFBQSxFQUNBbkMsTUFBQSxFQUNBb0MsT0FBQSxFQUNBQyxNQUFBLEVBQ0E3QyxNQUFBLEVBQ0E4QyxVQUFBLEVBQ0FDLGtCQUFBLEdBUUEsU0FBQUMsRUFBQUMsR0FDQSxTQUFBQSxHQUFBQSxJQUFBdEYsVUFBQSxTQUFBc0YsRUFBQUMsVUFBQSxTQUFBRCxFQUFBQyxVQUFBLGNBQUFELEdBQUEsYUFBQUEsRUFBQUUsV0FxQ0EsU0FBQUMsRUFBQUgsR0FDQUEsRUFBQUUsVUFBQUUsU0FBQSxtQkFHQUosRUFBQUUsVUFBQUcsSUFBQSxpQkFDQUwsRUFBQTNELGFBQUEsMkJBQUEsS0FzQ0EsU0FBQWlFLEVBQUFDLEdBQ0F0QixHQUFBLEVBcUVBLFNBQUF1QixJQUNBOUYsU0FBQUMsaUJBQUEsWUFBQThGLEdBQ0EvRixTQUFBQyxpQkFBQSxZQUFBOEYsR0FDQS9GLFNBQUFDLGlCQUFBLFVBQUE4RixHQUNBL0YsU0FBQUMsaUJBQUEsY0FBQThGLEdBQ0EvRixTQUFBQyxpQkFBQSxjQUFBOEYsR0FDQS9GLFNBQUFDLGlCQUFBLFlBQUE4RixHQUNBL0YsU0FBQUMsaUJBQUEsWUFBQThGLEdBQ0EvRixTQUFBQyxpQkFBQSxhQUFBOEYsR0FDQS9GLFNBQUFDLGlCQUFBLFdBQUE4RixHQXNCQSxTQUFBQSxFQUFBRixHQUdBLFNBQUFBLEVBQUFwSixPQUFBOEksU0FBQVMsZ0JBSUF6QixHQUFBLEVBekJBdkUsU0FBQWlHLG9CQUFBLFlBQUFGLEdBQ0EvRixTQUFBaUcsb0JBQUEsWUFBQUYsR0FDQS9GLFNBQUFpRyxvQkFBQSxVQUFBRixHQUNBL0YsU0FBQWlHLG9CQUFBLGNBQUFGLEdBQ0EvRixTQUFBaUcsb0JBQUEsY0FBQUYsR0FDQS9GLFNBQUFpRyxvQkFBQSxZQUFBRixHQUNBL0YsU0FBQWlHLG9CQUFBLFlBQUFGLEdBQ0EvRixTQUFBaUcsb0JBQUEsYUFBQUYsR0FDQS9GLFNBQUFpRyxvQkFBQSxXQUFBRixJQXFCQS9GLFNBQUFDLGlCQUFBLFVBaElBLFNBQUE0RixHQUNBUixFQUFBckYsU0FBQWtHLGdCQUNBVCxFQUFBekYsU0FBQWtHLGVBR0EzQixHQUFBLElBMkhBLEdBQ0F2RSxTQUFBQyxpQkFBQSxZQUFBMkYsR0FBQSxHQUNBNUYsU0FBQUMsaUJBQUEsY0FBQTJGLEdBQUEsR0FDQTVGLFNBQUFDLGlCQUFBLGFBQUEyRixHQUFBLEdBQ0E1RixTQUFBQyxpQkFBQSxRQXpHQSxTQUFBNEYsR0E5RUEsSUFBQVAsRUFDQWEsRUFDQUMsRUE4RUFmLEVBQUFRLEVBQUFwSixVQUlBOEgsSUFwRkFlLEVBb0ZBTyxFQUFBcEosT0FuRkEwSixFQUFBYixFQUFBYSxLQUdBLFVBRkFDLEVBQUFkLEVBQUFjLFVBRUExQixFQUFBeUIsS0FBQWIsRUFBQWUsVUFJQSxZQUFBRCxJQUFBZCxFQUFBZSxVQUlBZixFQUFBZ0IscUJBeUVBYixFQUFBSSxFQUFBcEosVUFrR0EsR0FDQXVELFNBQUFDLGlCQUFBLE9BM0ZBLFNBQUE0RixHQXhEQSxJQUFBUCxFQXlEQUQsRUFBQVEsRUFBQXBKLFVBSUFvSixFQUFBcEosT0FBQStJLFVBQUFFLFNBQUEsa0JBQUFHLEVBQUFwSixPQUFBOEosYUFBQSwrQkFLQS9CLEdBQUEsRUFDQXZCLE9BQUF1RCxhQUFBL0IsR0FDQUEsRUFBQXhCLE9BQUF3RCxXQUFBLFdBQ0FqQyxHQUFBLEVBQ0F2QixPQUFBdUQsYUFBQS9CLElBQ0EsTUF2RUFhLEVBd0VBTyxFQUFBcEosUUF2RUE4SixhQUFBLDhCQUdBakIsRUFBQUUsVUFBQWpDLE9BQUEsaUJBQ0ErQixFQUFBb0IsZ0JBQUEsZ0NBOElBLEdBQ0ExRyxTQUFBQyxpQkFBQSxtQkFuRUEsU0FBQTRGLEdBQ0EsVUFBQTdGLFNBQUEyRyxrQkFLQW5DLElBQ0FELEdBQUEsR0FFQXVCLE9BMERBLEdBQ0FBLElBRUE5RixTQUFBNEcsS0FBQXBCLFVBQUFHLElBQUEiLCJmaWxlIjoicmVzdGF1cmFudC5idW5kbGUuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbihmdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIHRvQXJyYXkoYXJyKSB7XG4gICAgcmV0dXJuIEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFycik7XG4gIH1cblxuICBmdW5jdGlvbiBwcm9taXNpZnlSZXF1ZXN0KHJlcXVlc3QpIHtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgcmVxdWVzdC5vbnN1Y2Nlc3MgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJlc29sdmUocmVxdWVzdC5yZXN1bHQpO1xuICAgICAgfTtcblxuICAgICAgcmVxdWVzdC5vbmVycm9yID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZWplY3QocmVxdWVzdC5lcnJvcik7XG4gICAgICB9O1xuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gcHJvbWlzaWZ5UmVxdWVzdENhbGwob2JqLCBtZXRob2QsIGFyZ3MpIHtcbiAgICB2YXIgcmVxdWVzdDtcbiAgICB2YXIgcCA9IG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgIHJlcXVlc3QgPSBvYmpbbWV0aG9kXS5hcHBseShvYmosIGFyZ3MpO1xuICAgICAgcHJvbWlzaWZ5UmVxdWVzdChyZXF1ZXN0KS50aGVuKHJlc29sdmUsIHJlamVjdCk7XG4gICAgfSk7XG5cbiAgICBwLnJlcXVlc3QgPSByZXF1ZXN0O1xuICAgIHJldHVybiBwO1xuICB9XG5cbiAgZnVuY3Rpb24gcHJvbWlzaWZ5Q3Vyc29yUmVxdWVzdENhbGwob2JqLCBtZXRob2QsIGFyZ3MpIHtcbiAgICB2YXIgcCA9IHByb21pc2lmeVJlcXVlc3RDYWxsKG9iaiwgbWV0aG9kLCBhcmdzKTtcbiAgICByZXR1cm4gcC50aGVuKGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgaWYgKCF2YWx1ZSkgcmV0dXJuO1xuICAgICAgcmV0dXJuIG5ldyBDdXJzb3IodmFsdWUsIHAucmVxdWVzdCk7XG4gICAgfSk7XG4gIH1cblxuICBmdW5jdGlvbiBwcm94eVByb3BlcnRpZXMoUHJveHlDbGFzcywgdGFyZ2V0UHJvcCwgcHJvcGVydGllcykge1xuICAgIHByb3BlcnRpZXMuZm9yRWFjaChmdW5jdGlvbiAocHJvcCkge1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFByb3h5Q2xhc3MucHJvdG90eXBlLCBwcm9wLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICAgIHJldHVybiB0aGlzW3RhcmdldFByb3BdW3Byb3BdO1xuICAgICAgICB9LFxuICAgICAgICBzZXQ6IGZ1bmN0aW9uIHNldCh2YWwpIHtcbiAgICAgICAgICB0aGlzW3RhcmdldFByb3BdW3Byb3BdID0gdmFsO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHByb3h5UmVxdWVzdE1ldGhvZHMoUHJveHlDbGFzcywgdGFyZ2V0UHJvcCwgQ29uc3RydWN0b3IsIHByb3BlcnRpZXMpIHtcbiAgICBwcm9wZXJ0aWVzLmZvckVhY2goZnVuY3Rpb24gKHByb3ApIHtcbiAgICAgIGlmICghKHByb3AgaW4gQ29uc3RydWN0b3IucHJvdG90eXBlKSkgcmV0dXJuO1xuICAgICAgUHJveHlDbGFzcy5wcm90b3R5cGVbcHJvcF0gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBwcm9taXNpZnlSZXF1ZXN0Q2FsbCh0aGlzW3RhcmdldFByb3BdLCBwcm9wLCBhcmd1bWVudHMpO1xuICAgICAgfTtcbiAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHByb3h5TWV0aG9kcyhQcm94eUNsYXNzLCB0YXJnZXRQcm9wLCBDb25zdHJ1Y3RvciwgcHJvcGVydGllcykge1xuICAgIHByb3BlcnRpZXMuZm9yRWFjaChmdW5jdGlvbiAocHJvcCkge1xuICAgICAgaWYgKCEocHJvcCBpbiBDb25zdHJ1Y3Rvci5wcm90b3R5cGUpKSByZXR1cm47XG4gICAgICBQcm94eUNsYXNzLnByb3RvdHlwZVtwcm9wXSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXNbdGFyZ2V0UHJvcF1bcHJvcF0uYXBwbHkodGhpc1t0YXJnZXRQcm9wXSwgYXJndW1lbnRzKTtcbiAgICAgIH07XG4gICAgfSk7XG4gIH1cblxuICBmdW5jdGlvbiBwcm94eUN1cnNvclJlcXVlc3RNZXRob2RzKFByb3h5Q2xhc3MsIHRhcmdldFByb3AsIENvbnN0cnVjdG9yLCBwcm9wZXJ0aWVzKSB7XG4gICAgcHJvcGVydGllcy5mb3JFYWNoKGZ1bmN0aW9uIChwcm9wKSB7XG4gICAgICBpZiAoIShwcm9wIGluIENvbnN0cnVjdG9yLnByb3RvdHlwZSkpIHJldHVybjtcbiAgICAgIFByb3h5Q2xhc3MucHJvdG90eXBlW3Byb3BdID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gcHJvbWlzaWZ5Q3Vyc29yUmVxdWVzdENhbGwodGhpc1t0YXJnZXRQcm9wXSwgcHJvcCwgYXJndW1lbnRzKTtcbiAgICAgIH07XG4gICAgfSk7XG4gIH1cblxuICBmdW5jdGlvbiBJbmRleChpbmRleCkge1xuICAgIHRoaXMuX2luZGV4ID0gaW5kZXg7XG4gIH1cblxuICBwcm94eVByb3BlcnRpZXMoSW5kZXgsICdfaW5kZXgnLCBbJ25hbWUnLCAna2V5UGF0aCcsICdtdWx0aUVudHJ5JywgJ3VuaXF1ZSddKTtcblxuICBwcm94eVJlcXVlc3RNZXRob2RzKEluZGV4LCAnX2luZGV4JywgSURCSW5kZXgsIFsnZ2V0JywgJ2dldEtleScsICdnZXRBbGwnLCAnZ2V0QWxsS2V5cycsICdjb3VudCddKTtcblxuICBwcm94eUN1cnNvclJlcXVlc3RNZXRob2RzKEluZGV4LCAnX2luZGV4JywgSURCSW5kZXgsIFsnb3BlbkN1cnNvcicsICdvcGVuS2V5Q3Vyc29yJ10pO1xuXG4gIGZ1bmN0aW9uIEN1cnNvcihjdXJzb3IsIHJlcXVlc3QpIHtcbiAgICB0aGlzLl9jdXJzb3IgPSBjdXJzb3I7XG4gICAgdGhpcy5fcmVxdWVzdCA9IHJlcXVlc3Q7XG4gIH1cblxuICBwcm94eVByb3BlcnRpZXMoQ3Vyc29yLCAnX2N1cnNvcicsIFsnZGlyZWN0aW9uJywgJ2tleScsICdwcmltYXJ5S2V5JywgJ3ZhbHVlJ10pO1xuXG4gIHByb3h5UmVxdWVzdE1ldGhvZHMoQ3Vyc29yLCAnX2N1cnNvcicsIElEQkN1cnNvciwgWyd1cGRhdGUnLCAnZGVsZXRlJ10pO1xuXG4gIC8vIHByb3h5ICduZXh0JyBtZXRob2RzXG4gIFsnYWR2YW5jZScsICdjb250aW51ZScsICdjb250aW51ZVByaW1hcnlLZXknXS5mb3JFYWNoKGZ1bmN0aW9uIChtZXRob2ROYW1lKSB7XG4gICAgaWYgKCEobWV0aG9kTmFtZSBpbiBJREJDdXJzb3IucHJvdG90eXBlKSkgcmV0dXJuO1xuICAgIEN1cnNvci5wcm90b3R5cGVbbWV0aG9kTmFtZV0gPSBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgY3Vyc29yID0gdGhpcztcbiAgICAgIHZhciBhcmdzID0gYXJndW1lbnRzO1xuICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgICBjdXJzb3IuX2N1cnNvclttZXRob2ROYW1lXS5hcHBseShjdXJzb3IuX2N1cnNvciwgYXJncyk7XG4gICAgICAgIHJldHVybiBwcm9taXNpZnlSZXF1ZXN0KGN1cnNvci5fcmVxdWVzdCkudGhlbihmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICBpZiAoIXZhbHVlKSByZXR1cm47XG4gICAgICAgICAgcmV0dXJuIG5ldyBDdXJzb3IodmFsdWUsIGN1cnNvci5fcmVxdWVzdCk7XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfTtcbiAgfSk7XG5cbiAgZnVuY3Rpb24gT2JqZWN0U3RvcmUoc3RvcmUpIHtcbiAgICB0aGlzLl9zdG9yZSA9IHN0b3JlO1xuICB9XG5cbiAgT2JqZWN0U3RvcmUucHJvdG90eXBlLmNyZWF0ZUluZGV4ID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBuZXcgSW5kZXgodGhpcy5fc3RvcmUuY3JlYXRlSW5kZXguYXBwbHkodGhpcy5fc3RvcmUsIGFyZ3VtZW50cykpO1xuICB9O1xuXG4gIE9iamVjdFN0b3JlLnByb3RvdHlwZS5pbmRleCA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gbmV3IEluZGV4KHRoaXMuX3N0b3JlLmluZGV4LmFwcGx5KHRoaXMuX3N0b3JlLCBhcmd1bWVudHMpKTtcbiAgfTtcblxuICBwcm94eVByb3BlcnRpZXMoT2JqZWN0U3RvcmUsICdfc3RvcmUnLCBbJ25hbWUnLCAna2V5UGF0aCcsICdpbmRleE5hbWVzJywgJ2F1dG9JbmNyZW1lbnQnXSk7XG5cbiAgcHJveHlSZXF1ZXN0TWV0aG9kcyhPYmplY3RTdG9yZSwgJ19zdG9yZScsIElEQk9iamVjdFN0b3JlLCBbJ3B1dCcsICdhZGQnLCAnZGVsZXRlJywgJ2NsZWFyJywgJ2dldCcsICdnZXRBbGwnLCAnZ2V0S2V5JywgJ2dldEFsbEtleXMnLCAnY291bnQnXSk7XG5cbiAgcHJveHlDdXJzb3JSZXF1ZXN0TWV0aG9kcyhPYmplY3RTdG9yZSwgJ19zdG9yZScsIElEQk9iamVjdFN0b3JlLCBbJ29wZW5DdXJzb3InLCAnb3BlbktleUN1cnNvciddKTtcblxuICBwcm94eU1ldGhvZHMoT2JqZWN0U3RvcmUsICdfc3RvcmUnLCBJREJPYmplY3RTdG9yZSwgWydkZWxldGVJbmRleCddKTtcblxuICBmdW5jdGlvbiBUcmFuc2FjdGlvbihpZGJUcmFuc2FjdGlvbikge1xuICAgIHRoaXMuX3R4ID0gaWRiVHJhbnNhY3Rpb247XG4gICAgdGhpcy5jb21wbGV0ZSA9IG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgIGlkYlRyYW5zYWN0aW9uLm9uY29tcGxldGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJlc29sdmUoKTtcbiAgICAgIH07XG4gICAgICBpZGJUcmFuc2FjdGlvbi5vbmVycm9yID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZWplY3QoaWRiVHJhbnNhY3Rpb24uZXJyb3IpO1xuICAgICAgfTtcbiAgICAgIGlkYlRyYW5zYWN0aW9uLm9uYWJvcnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJlamVjdChpZGJUcmFuc2FjdGlvbi5lcnJvcik7XG4gICAgICB9O1xuICAgIH0pO1xuICB9XG5cbiAgVHJhbnNhY3Rpb24ucHJvdG90eXBlLm9iamVjdFN0b3JlID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBuZXcgT2JqZWN0U3RvcmUodGhpcy5fdHgub2JqZWN0U3RvcmUuYXBwbHkodGhpcy5fdHgsIGFyZ3VtZW50cykpO1xuICB9O1xuXG4gIHByb3h5UHJvcGVydGllcyhUcmFuc2FjdGlvbiwgJ190eCcsIFsnb2JqZWN0U3RvcmVOYW1lcycsICdtb2RlJ10pO1xuXG4gIHByb3h5TWV0aG9kcyhUcmFuc2FjdGlvbiwgJ190eCcsIElEQlRyYW5zYWN0aW9uLCBbJ2Fib3J0J10pO1xuXG4gIGZ1bmN0aW9uIFVwZ3JhZGVEQihkYiwgb2xkVmVyc2lvbiwgdHJhbnNhY3Rpb24pIHtcbiAgICB0aGlzLl9kYiA9IGRiO1xuICAgIHRoaXMub2xkVmVyc2lvbiA9IG9sZFZlcnNpb247XG4gICAgdGhpcy50cmFuc2FjdGlvbiA9IG5ldyBUcmFuc2FjdGlvbih0cmFuc2FjdGlvbik7XG4gIH1cblxuICBVcGdyYWRlREIucHJvdG90eXBlLmNyZWF0ZU9iamVjdFN0b3JlID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBuZXcgT2JqZWN0U3RvcmUodGhpcy5fZGIuY3JlYXRlT2JqZWN0U3RvcmUuYXBwbHkodGhpcy5fZGIsIGFyZ3VtZW50cykpO1xuICB9O1xuXG4gIHByb3h5UHJvcGVydGllcyhVcGdyYWRlREIsICdfZGInLCBbJ25hbWUnLCAndmVyc2lvbicsICdvYmplY3RTdG9yZU5hbWVzJ10pO1xuXG4gIHByb3h5TWV0aG9kcyhVcGdyYWRlREIsICdfZGInLCBJREJEYXRhYmFzZSwgWydkZWxldGVPYmplY3RTdG9yZScsICdjbG9zZSddKTtcblxuICBmdW5jdGlvbiBEQihkYikge1xuICAgIHRoaXMuX2RiID0gZGI7XG4gIH1cblxuICBEQi5wcm90b3R5cGUudHJhbnNhY3Rpb24gPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIG5ldyBUcmFuc2FjdGlvbih0aGlzLl9kYi50cmFuc2FjdGlvbi5hcHBseSh0aGlzLl9kYiwgYXJndW1lbnRzKSk7XG4gIH07XG5cbiAgcHJveHlQcm9wZXJ0aWVzKERCLCAnX2RiJywgWyduYW1lJywgJ3ZlcnNpb24nLCAnb2JqZWN0U3RvcmVOYW1lcyddKTtcblxuICBwcm94eU1ldGhvZHMoREIsICdfZGInLCBJREJEYXRhYmFzZSwgWydjbG9zZSddKTtcblxuICAvLyBBZGQgY3Vyc29yIGl0ZXJhdG9yc1xuICAvLyBUT0RPOiByZW1vdmUgdGhpcyBvbmNlIGJyb3dzZXJzIGRvIHRoZSByaWdodCB0aGluZyB3aXRoIHByb21pc2VzXG4gIFsnb3BlbkN1cnNvcicsICdvcGVuS2V5Q3Vyc29yJ10uZm9yRWFjaChmdW5jdGlvbiAoZnVuY05hbWUpIHtcbiAgICBbT2JqZWN0U3RvcmUsIEluZGV4XS5mb3JFYWNoKGZ1bmN0aW9uIChDb25zdHJ1Y3Rvcikge1xuICAgICAgLy8gRG9uJ3QgY3JlYXRlIGl0ZXJhdGVLZXlDdXJzb3IgaWYgb3BlbktleUN1cnNvciBkb2Vzbid0IGV4aXN0LlxuICAgICAgaWYgKCEoZnVuY05hbWUgaW4gQ29uc3RydWN0b3IucHJvdG90eXBlKSkgcmV0dXJuO1xuXG4gICAgICBDb25zdHJ1Y3Rvci5wcm90b3R5cGVbZnVuY05hbWUucmVwbGFjZSgnb3BlbicsICdpdGVyYXRlJyldID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgYXJncyA9IHRvQXJyYXkoYXJndW1lbnRzKTtcbiAgICAgICAgdmFyIGNhbGxiYWNrID0gYXJnc1thcmdzLmxlbmd0aCAtIDFdO1xuICAgICAgICB2YXIgbmF0aXZlT2JqZWN0ID0gdGhpcy5fc3RvcmUgfHwgdGhpcy5faW5kZXg7XG4gICAgICAgIHZhciByZXF1ZXN0ID0gbmF0aXZlT2JqZWN0W2Z1bmNOYW1lXS5hcHBseShuYXRpdmVPYmplY3QsIGFyZ3Muc2xpY2UoMCwgLTEpKTtcbiAgICAgICAgcmVxdWVzdC5vbnN1Y2Nlc3MgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgY2FsbGJhY2socmVxdWVzdC5yZXN1bHQpO1xuICAgICAgICB9O1xuICAgICAgfTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgLy8gcG9seWZpbGwgZ2V0QWxsXG4gIFtJbmRleCwgT2JqZWN0U3RvcmVdLmZvckVhY2goZnVuY3Rpb24gKENvbnN0cnVjdG9yKSB7XG4gICAgaWYgKENvbnN0cnVjdG9yLnByb3RvdHlwZS5nZXRBbGwpIHJldHVybjtcbiAgICBDb25zdHJ1Y3Rvci5wcm90b3R5cGUuZ2V0QWxsID0gZnVuY3Rpb24gKHF1ZXJ5LCBjb3VudCkge1xuICAgICAgdmFyIGluc3RhbmNlID0gdGhpcztcbiAgICAgIHZhciBpdGVtcyA9IFtdO1xuXG4gICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUpIHtcbiAgICAgICAgaW5zdGFuY2UuaXRlcmF0ZUN1cnNvcihxdWVyeSwgZnVuY3Rpb24gKGN1cnNvcikge1xuICAgICAgICAgIGlmICghY3Vyc29yKSB7XG4gICAgICAgICAgICByZXNvbHZlKGl0ZW1zKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG4gICAgICAgICAgaXRlbXMucHVzaChjdXJzb3IudmFsdWUpO1xuXG4gICAgICAgICAgaWYgKGNvdW50ICE9PSB1bmRlZmluZWQgJiYgaXRlbXMubGVuZ3RoID09IGNvdW50KSB7XG4gICAgICAgICAgICByZXNvbHZlKGl0ZW1zKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG4gICAgICAgICAgY3Vyc29yLmNvbnRpbnVlKCk7XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfTtcbiAgfSk7XG5cbiAgdmFyIGV4cCA9IHtcbiAgICBvcGVuOiBmdW5jdGlvbiBvcGVuKG5hbWUsIHZlcnNpb24sIHVwZ3JhZGVDYWxsYmFjaykge1xuICAgICAgdmFyIHAgPSBwcm9taXNpZnlSZXF1ZXN0Q2FsbChpbmRleGVkREIsICdvcGVuJywgW25hbWUsIHZlcnNpb25dKTtcbiAgICAgIHZhciByZXF1ZXN0ID0gcC5yZXF1ZXN0O1xuXG4gICAgICBpZiAocmVxdWVzdCkge1xuICAgICAgICByZXF1ZXN0Lm9udXBncmFkZW5lZWRlZCA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICAgIGlmICh1cGdyYWRlQ2FsbGJhY2spIHtcbiAgICAgICAgICAgIHVwZ3JhZGVDYWxsYmFjayhuZXcgVXBncmFkZURCKHJlcXVlc3QucmVzdWx0LCBldmVudC5vbGRWZXJzaW9uLCByZXF1ZXN0LnRyYW5zYWN0aW9uKSk7XG4gICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gcC50aGVuKGZ1bmN0aW9uIChkYikge1xuICAgICAgICByZXR1cm4gbmV3IERCKGRiKTtcbiAgICAgIH0pO1xuICAgIH0sXG4gICAgZGVsZXRlOiBmdW5jdGlvbiBfZGVsZXRlKG5hbWUpIHtcbiAgICAgIHJldHVybiBwcm9taXNpZnlSZXF1ZXN0Q2FsbChpbmRleGVkREIsICdkZWxldGVEYXRhYmFzZScsIFtuYW1lXSk7XG4gICAgfVxuICB9O1xuXG4gIGlmICh0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJykge1xuICAgIG1vZHVsZS5leHBvcnRzID0gZXhwO1xuICAgIG1vZHVsZS5leHBvcnRzLmRlZmF1bHQgPSBtb2R1bGUuZXhwb3J0cztcbiAgfSBlbHNlIHtcbiAgICBzZWxmLmlkYiA9IGV4cDtcbiAgfVxufSkoKTsiLCIndXNlIHN0cmljdCc7XG5cbnZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KCk7XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbi8qKlxyXG4gKiBDb21tb24gZGF0YWJhc2UgaGVscGVyIGZ1bmN0aW9ucy5cclxuICovXG5cbnZhciBEQkhlbHBlciA9IGZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gREJIZWxwZXIoKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIERCSGVscGVyKTtcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhEQkhlbHBlciwgbnVsbCwgW3tcbiAgICBrZXk6ICdvcGVuSWRiJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gb3BlbklkYigpIHtcbiAgICAgIHJldHVybiBpZGIub3BlbigncmVzdGF1cmFudC1yZXZpZXdzJywgMSwgZnVuY3Rpb24gKHVwZ3JhZGVEYikge1xuICAgICAgICB2YXIgc3RvcmUgPSB1cGdyYWRlRGIuY3JlYXRlT2JqZWN0U3RvcmUoJ3Jlc3RhdXJhbnQtcmV2aWV3cycsIHtcbiAgICAgICAgICBrZXlQYXRoOiAnaWQnXG4gICAgICAgIH0pO1xuICAgICAgICBzdG9yZS5jcmVhdGVJbmRleCgnYnktZGF0ZScsICd1cGRhdGVkQXQnKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2dldENhY2hlZFJlc3RhdXJhbnRzJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0Q2FjaGVkUmVzdGF1cmFudHMoKSB7XG4gICAgICByZXR1cm4gREJIZWxwZXIub3BlbklkYigpLnRoZW4oZnVuY3Rpb24gKGRiKSB7XG4gICAgICAgIGlmICghZGIpIHJldHVybjtcbiAgICAgICAgdmFyIGluZGV4ID0gZGIudHJhbnNhY3Rpb24oJ3Jlc3RhdXJhbnQtcmV2aWV3cycpLm9iamVjdFN0b3JlKCdyZXN0YXVyYW50LXJldmlld3MnKS5pbmRleCgnYnktZGF0ZScpO1xuXG4gICAgICAgIHJldHVybiBpbmRleC5nZXRBbGwoKS50aGVuKGZ1bmN0aW9uIChyZXN0YXVyYW50cykge1xuICAgICAgICAgIHJldHVybiByZXN0YXVyYW50cy5yZXZlcnNlKCk7XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfVxuICAgIC8qKlxyXG4gICAgICogRmV0Y2ggYWxsIHJlc3RhdXJhbnRzLlxyXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ2ZldGNoUmVzdGF1cmFudHMnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBmZXRjaFJlc3RhdXJhbnRzKGNhbGxiYWNrKSB7XG4gICAgICAvLyBnZXQgZGF0YSBmcm9tIGlkYiBpZiB0aGVyZSBhcmUgZGF0YVxuICAgICAgREJIZWxwZXIuZ2V0Q2FjaGVkUmVzdGF1cmFudHMoKS50aGVuKGZ1bmN0aW9uIChyZXN0YXVyYW50cykge1xuICAgICAgICBpZiAocmVzdGF1cmFudHMubGVuZ3RoID4gMCkge1xuICAgICAgICAgIHJldHVybiBjYWxsYmFjayhudWxsLCByZXN0YXVyYW50cyk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuXG4gICAgICAvLyBmZXRjaCBkYXRhIGZyb20gdGhlIG5ldHdvcmsgYW5kIHVwZGF0ZSB0aGUgaWRiXG4gICAgICBmZXRjaChEQkhlbHBlci5EQVRBQkFTRV9VUkwpLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7XG4gICAgICAgIHJldHVybiByZXNwb25zZS5qc29uKCk7XG4gICAgICB9KS50aGVuKGZ1bmN0aW9uIChyZXN0YXVyYW50cykge1xuICAgICAgICBEQkhlbHBlci5vcGVuSWRiKCkudGhlbihmdW5jdGlvbiAoZGIpIHtcbiAgICAgICAgICBpZiAoIWRiKSByZXR1cm47XG4gICAgICAgICAgdmFyIHR4ID0gZGIudHJhbnNhY3Rpb24oJ3Jlc3RhdXJhbnQtcmV2aWV3cycsICdyZWFkd3JpdGUnKTtcbiAgICAgICAgICB2YXIgc3RvcmUgPSB0eC5vYmplY3RTdG9yZSgncmVzdGF1cmFudC1yZXZpZXdzJyk7XG4gICAgICAgICAgcmVzdGF1cmFudHMuZm9yRWFjaChmdW5jdGlvbiAocmVzdGF1cmFudCkge1xuICAgICAgICAgICAgc3RvcmUucHV0KHJlc3RhdXJhbnQpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIGNhbGxiYWNrKG51bGwsIHJlc3RhdXJhbnRzKTtcbiAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgcmV0dXJuIGNhbGxiYWNrKGVyciwgbnVsbCk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcclxuICAgICAqIEZldGNoIGEgcmVzdGF1cmFudCBieSBpdHMgSUQuXHJcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnZmV0Y2hSZXN0YXVyYW50QnlJZCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGZldGNoUmVzdGF1cmFudEJ5SWQoaWQsIGNhbGxiYWNrKSB7XG4gICAgICAvLyBmZXRjaCBhbGwgcmVzdGF1cmFudHMgd2l0aCBwcm9wZXIgZXJyb3IgaGFuZGxpbmcuXG4gICAgICBEQkhlbHBlci5mZXRjaFJlc3RhdXJhbnRzKGZ1bmN0aW9uIChlcnJvciwgcmVzdGF1cmFudHMpIHtcbiAgICAgICAgaWYgKGVycm9yKSB7XG4gICAgICAgICAgY2FsbGJhY2soZXJyb3IsIG51bGwpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHZhciByZXN0YXVyYW50ID0gcmVzdGF1cmFudHMuZmluZChmdW5jdGlvbiAocikge1xuICAgICAgICAgICAgcmV0dXJuIHIuaWQgPT0gaWQ7XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgaWYgKHJlc3RhdXJhbnQpIHtcbiAgICAgICAgICAgIC8vIEdvdCB0aGUgcmVzdGF1cmFudFxuICAgICAgICAgICAgY2FsbGJhY2sobnVsbCwgcmVzdGF1cmFudCk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIFJlc3RhdXJhbnQgZG9lcyBub3QgZXhpc3QgaW4gdGhlIGRhdGFiYXNlXG4gICAgICAgICAgICBjYWxsYmFjaygnUmVzdGF1cmFudCBkb2VzIG5vdCBleGlzdCcsIG51bGwpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLyoqXHJcbiAgICAgKiBGZXRjaCByZXN0YXVyYW50cyBieSBhIGN1aXNpbmUgdHlwZSB3aXRoIHByb3BlciBlcnJvciBoYW5kbGluZy5cclxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdmZXRjaFJlc3RhdXJhbnRCeUN1aXNpbmUnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBmZXRjaFJlc3RhdXJhbnRCeUN1aXNpbmUoY3Vpc2luZSwgY2FsbGJhY2spIHtcbiAgICAgIC8vIEZldGNoIGFsbCByZXN0YXVyYW50cyAgd2l0aCBwcm9wZXIgZXJyb3IgaGFuZGxpbmdcbiAgICAgIERCSGVscGVyLmZldGNoUmVzdGF1cmFudHMoZnVuY3Rpb24gKGVycm9yLCByZXN0YXVyYW50cykge1xuICAgICAgICBpZiAoZXJyb3IpIHtcbiAgICAgICAgICBjYWxsYmFjayhlcnJvciwgbnVsbCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gRmlsdGVyIHJlc3RhdXJhbnRzIHRvIGhhdmUgb25seSBnaXZlbiBjdWlzaW5lIHR5cGVcbiAgICAgICAgICB2YXIgcmVzdWx0cyA9IHJlc3RhdXJhbnRzLmZpbHRlcihmdW5jdGlvbiAocikge1xuICAgICAgICAgICAgcmV0dXJuIHIuY3Vpc2luZV90eXBlID09IGN1aXNpbmU7XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgY2FsbGJhY2sobnVsbCwgcmVzdWx0cyk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxyXG4gICAgICogRmV0Y2ggcmVzdGF1cmFudHMgYnkgYSBuZWlnaGJvcmhvb2Qgd2l0aCBwcm9wZXIgZXJyb3IgaGFuZGxpbmcuXHJcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnZmV0Y2hSZXN0YXVyYW50QnlOZWlnaGJvcmhvb2QnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBmZXRjaFJlc3RhdXJhbnRCeU5laWdoYm9yaG9vZChuZWlnaGJvcmhvb2QsIGNhbGxiYWNrKSB7XG4gICAgICAvLyBGZXRjaCBhbGwgcmVzdGF1cmFudHNcbiAgICAgIERCSGVscGVyLmZldGNoUmVzdGF1cmFudHMoZnVuY3Rpb24gKGVycm9yLCByZXN0YXVyYW50cykge1xuICAgICAgICBpZiAoZXJyb3IpIHtcbiAgICAgICAgICBjYWxsYmFjayhlcnJvciwgbnVsbCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gRmlsdGVyIHJlc3RhdXJhbnRzIHRvIGhhdmUgb25seSBnaXZlbiBuZWlnaGJvcmhvb2RcbiAgICAgICAgICB2YXIgcmVzdWx0cyA9IHJlc3RhdXJhbnRzLmZpbHRlcihmdW5jdGlvbiAocikge1xuICAgICAgICAgICAgcmV0dXJuIHIubmVpZ2hib3Job29kID09IG5laWdoYm9yaG9vZDtcbiAgICAgICAgICB9KTtcbiAgICAgICAgICBjYWxsYmFjayhudWxsLCByZXN1bHRzKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLyoqXHJcbiAgICAgKiBGZXRjaCByZXN0YXVyYW50cyBieSBhIGN1aXNpbmUgYW5kIGEgbmVpZ2hib3Job29kIHdpdGggcHJvcGVyIGVycm9yIGhhbmRsaW5nLlxyXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ2ZldGNoUmVzdGF1cmFudEJ5Q3Vpc2luZUFuZE5laWdoYm9yaG9vZCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGZldGNoUmVzdGF1cmFudEJ5Q3Vpc2luZUFuZE5laWdoYm9yaG9vZChjdWlzaW5lLCBuZWlnaGJvcmhvb2QsIGNhbGxiYWNrKSB7XG4gICAgICAvLyBGZXRjaCBhbGwgcmVzdGF1cmFudHNcbiAgICAgIERCSGVscGVyLmZldGNoUmVzdGF1cmFudHMoZnVuY3Rpb24gKGVycm9yLCByZXN0YXVyYW50cykge1xuICAgICAgICBpZiAoZXJyb3IpIHtcbiAgICAgICAgICBjYWxsYmFjayhlcnJvciwgbnVsbCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdmFyIHJlc3VsdHMgPSByZXN0YXVyYW50cztcbiAgICAgICAgICBpZiAoY3Vpc2luZSAhPSAnYWxsJykge1xuICAgICAgICAgICAgLy8gZmlsdGVyIGJ5IGN1aXNpbmVcbiAgICAgICAgICAgIHJlc3VsdHMgPSByZXN1bHRzLmZpbHRlcihmdW5jdGlvbiAocikge1xuICAgICAgICAgICAgICByZXR1cm4gci5jdWlzaW5lX3R5cGUgPT0gY3Vpc2luZTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAobmVpZ2hib3Job29kICE9ICdhbGwnKSB7XG4gICAgICAgICAgICAvLyBmaWx0ZXIgYnkgbmVpZ2hib3Job29kXG4gICAgICAgICAgICByZXN1bHRzID0gcmVzdWx0cy5maWx0ZXIoZnVuY3Rpb24gKHIpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIHIubmVpZ2hib3Job29kID09IG5laWdoYm9yaG9vZDtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgICBjYWxsYmFjayhudWxsLCByZXN1bHRzKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLyoqXHJcbiAgICAgKiBGZXRjaCBhbGwgbmVpZ2hib3Job29kcyB3aXRoIHByb3BlciBlcnJvciBoYW5kbGluZy5cclxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdmZXRjaE5laWdoYm9yaG9vZHMnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBmZXRjaE5laWdoYm9yaG9vZHMoY2FsbGJhY2spIHtcbiAgICAgIC8vIEZldGNoIGFsbCByZXN0YXVyYW50c1xuICAgICAgREJIZWxwZXIuZmV0Y2hSZXN0YXVyYW50cyhmdW5jdGlvbiAoZXJyb3IsIHJlc3RhdXJhbnRzKSB7XG4gICAgICAgIGlmIChlcnJvcikge1xuICAgICAgICAgIGNhbGxiYWNrKGVycm9yLCBudWxsKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyBHZXQgYWxsIG5laWdoYm9yaG9vZHMgZnJvbSBhbGwgcmVzdGF1cmFudHNcbiAgICAgICAgICB2YXIgbmVpZ2hib3Job29kcyA9IHJlc3RhdXJhbnRzLm1hcChmdW5jdGlvbiAodiwgaSkge1xuICAgICAgICAgICAgcmV0dXJuIHJlc3RhdXJhbnRzW2ldLm5laWdoYm9yaG9vZDtcbiAgICAgICAgICB9KTtcbiAgICAgICAgICAvLyBSZW1vdmUgZHVwbGljYXRlcyBmcm9tIG5laWdoYm9yaG9vZHNcbiAgICAgICAgICB2YXIgdW5pcXVlTmVpZ2hib3Job29kcyA9IG5laWdoYm9yaG9vZHMuZmlsdGVyKGZ1bmN0aW9uICh2LCBpKSB7XG4gICAgICAgICAgICByZXR1cm4gbmVpZ2hib3Job29kcy5pbmRleE9mKHYpID09IGk7XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgY2FsbGJhY2sobnVsbCwgdW5pcXVlTmVpZ2hib3Job29kcyk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxyXG4gICAgICogRmV0Y2ggYWxsIGN1aXNpbmVzIHdpdGggcHJvcGVyIGVycm9yIGhhbmRsaW5nLlxyXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ2ZldGNoQ3Vpc2luZXMnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBmZXRjaEN1aXNpbmVzKGNhbGxiYWNrKSB7XG4gICAgICAvLyBGZXRjaCBhbGwgcmVzdGF1cmFudHNcbiAgICAgIERCSGVscGVyLmZldGNoUmVzdGF1cmFudHMoZnVuY3Rpb24gKGVycm9yLCByZXN0YXVyYW50cykge1xuICAgICAgICBpZiAoZXJyb3IpIHtcbiAgICAgICAgICBjYWxsYmFjayhlcnJvciwgbnVsbCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gR2V0IGFsbCBjdWlzaW5lcyBmcm9tIGFsbCByZXN0YXVyYW50c1xuICAgICAgICAgIHZhciBjdWlzaW5lcyA9IHJlc3RhdXJhbnRzLm1hcChmdW5jdGlvbiAodiwgaSkge1xuICAgICAgICAgICAgcmV0dXJuIHJlc3RhdXJhbnRzW2ldLmN1aXNpbmVfdHlwZTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgICAvLyBSZW1vdmUgZHVwbGljYXRlcyBmcm9tIGN1aXNpbmVzXG4gICAgICAgICAgdmFyIHVuaXF1ZUN1aXNpbmVzID0gY3Vpc2luZXMuZmlsdGVyKGZ1bmN0aW9uICh2LCBpKSB7XG4gICAgICAgICAgICByZXR1cm4gY3Vpc2luZXMuaW5kZXhPZih2KSA9PSBpO1xuICAgICAgICAgIH0pO1xuICAgICAgICAgIGNhbGxiYWNrKG51bGwsIHVuaXF1ZUN1aXNpbmVzKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLyoqXHJcbiAgICAgKiBSZXN0YXVyYW50IHBhZ2UgVVJMLlxyXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ3VybEZvclJlc3RhdXJhbnQnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiB1cmxGb3JSZXN0YXVyYW50KHJlc3RhdXJhbnQpIHtcbiAgICAgIHJldHVybiAnLi9yZXN0YXVyYW50Lmh0bWw/aWQ9JyArIHJlc3RhdXJhbnQuaWQ7XG4gICAgfVxuXG4gICAgLyoqXHJcbiAgICAgKiBSZXN0YXVyYW50IGltYWdlIFVSTC5cclxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdpbWFnZVVybEZvclJlc3RhdXJhbnQnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBpbWFnZVVybEZvclJlc3RhdXJhbnQocmVzdGF1cmFudCkge1xuICAgICAgcmV0dXJuICcvaW1nLycgKyByZXN0YXVyYW50LnBob3RvZ3JhcGg7XG4gICAgfVxuXG4gICAgLyoqXHJcbiAgICAgKiBNYXAgbWFya2VyIGZvciBhIHJlc3RhdXJhbnQuXHJcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnbWFwTWFya2VyRm9yUmVzdGF1cmFudCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIG1hcE1hcmtlckZvclJlc3RhdXJhbnQocmVzdGF1cmFudCwgbWFwKSB7XG4gICAgICAvLyBodHRwczovL2xlYWZsZXRqcy5jb20vcmVmZXJlbmNlLTEuMy4wLmh0bWwjbWFya2VyICBcbiAgICAgIHZhciBtYXJrZXIgPSBuZXcgTC5tYXJrZXIoW3Jlc3RhdXJhbnQubGF0bG5nLmxhdCwgcmVzdGF1cmFudC5sYXRsbmcubG5nXSwgeyB0aXRsZTogcmVzdGF1cmFudC5uYW1lLFxuICAgICAgICBhbHQ6IHJlc3RhdXJhbnQubmFtZSxcbiAgICAgICAgdXJsOiBEQkhlbHBlci51cmxGb3JSZXN0YXVyYW50KHJlc3RhdXJhbnQpXG4gICAgICB9KTtcbiAgICAgIG1hcmtlci5hZGRUbyhuZXdNYXApO1xuICAgICAgcmV0dXJuIG1hcmtlcjtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdEQVRBQkFTRV9VUkwnLFxuXG5cbiAgICAvKipcclxuICAgICAqIERhdGFiYXNlIFVSTC5cclxuICAgICAqIENoYW5nZSB0aGlzIHRvIHJlc3RhdXJhbnRzLmpzb24gZmlsZSBsb2NhdGlvbiBvbiB5b3VyIHNlcnZlci5cclxuICAgICAqL1xuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgdmFyIHBvcnQgPSAxMzM3O1xuICAgICAgcmV0dXJuICdodHRwOi8vbG9jYWxob3N0OicgKyBwb3J0ICsgJy9yZXN0YXVyYW50cyc7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIERCSGVscGVyO1xufSgpOyIsIid1c2Ugc3RyaWN0JztcblxudmFyIHJlc3RhdXJhbnQgPSB2b2lkIDA7XG52YXIgbmV3TWFwO1xuXG4vKipcbiAqIEluaXRpYWxpemUgbWFwIGFzIHNvb24gYXMgdGhlIHBhZ2UgaXMgbG9hZGVkLlxuICovXG5kb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdET01Db250ZW50TG9hZGVkJywgZnVuY3Rpb24gKGV2ZW50KSB7XG4gIGluaXRNYXAoKTtcbn0pO1xuXG4vKipcbiAqIEluaXRpYWxpemUgbGVhZmxldCBtYXBcbiAqL1xudmFyIGluaXRNYXAgPSBmdW5jdGlvbiBpbml0TWFwKCkge1xuICBmZXRjaFJlc3RhdXJhbnRGcm9tVVJMKGZ1bmN0aW9uIChlcnJvciwgcmVzdGF1cmFudCkge1xuICAgIGlmIChlcnJvcikge1xuICAgICAgLy8gR290IGFuIGVycm9yIVxuICAgICAgY29uc29sZS5lcnJvcihlcnJvcik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHNlbGYubmV3TWFwID0gTC5tYXAoJ21hcCcsIHtcbiAgICAgICAgY2VudGVyOiBbcmVzdGF1cmFudC5sYXRsbmcubGF0LCByZXN0YXVyYW50LmxhdGxuZy5sbmddLFxuICAgICAgICB6b29tOiAxNixcbiAgICAgICAgc2Nyb2xsV2hlZWxab29tOiBmYWxzZVxuICAgICAgfSk7XG4gICAgICBMLnRpbGVMYXllcignaHR0cHM6Ly9hcGkudGlsZXMubWFwYm94LmNvbS92NC97aWR9L3t6fS97eH0ve3l9LmpwZzcwP2FjY2Vzc190b2tlbj17bWFwYm94VG9rZW59Jywge1xuICAgICAgICBtYXBib3hUb2tlbjogJ3BrLmV5SjFJam9pWm05MVlXUXRZWE5vY21GbUlpd2lZU0k2SW1OcWF6RTBkbTFpTmpBM2VHc3pjblEwZERObE4zazNibkFpZlEudUtUZmhDeHMxTnRpcnFFY1JhQVp3ZycsXG4gICAgICAgIG1heFpvb206IDE4LFxuICAgICAgICBhdHRyaWJ1dGlvbjogJ01hcCBkYXRhICZjb3B5OyA8YSBocmVmPVwiaHR0cHM6Ly93d3cub3BlbnN0cmVldG1hcC5vcmcvXCI+T3BlblN0cmVldE1hcDwvYT4gY29udHJpYnV0b3JzLCAnICsgJzxhIGhyZWY9XCJodHRwczovL2NyZWF0aXZlY29tbW9ucy5vcmcvbGljZW5zZXMvYnktc2EvMi4wL1wiPkNDLUJZLVNBPC9hPiwgJyArICdJbWFnZXJ5IMKpIDxhIGhyZWY9XCJodHRwczovL3d3dy5tYXBib3guY29tL1wiPk1hcGJveDwvYT4nLFxuICAgICAgICBpZDogJ21hcGJveC5zdHJlZXRzJ1xuICAgICAgfSkuYWRkVG8obmV3TWFwKTtcbiAgICAgIGZpbGxCcmVhZGNydW1iKCk7XG4gICAgICBEQkhlbHBlci5tYXBNYXJrZXJGb3JSZXN0YXVyYW50KHNlbGYucmVzdGF1cmFudCwgc2VsZi5uZXdNYXApO1xuICAgIH1cbiAgfSk7XG59O1xuXG4vKipcbiAqIEdldCBjdXJyZW50IHJlc3RhdXJhbnQgZnJvbSBwYWdlIFVSTC5cbiAqL1xudmFyIGZldGNoUmVzdGF1cmFudEZyb21VUkwgPSBmdW5jdGlvbiBmZXRjaFJlc3RhdXJhbnRGcm9tVVJMKGNhbGxiYWNrKSB7XG4gIGlmIChzZWxmLnJlc3RhdXJhbnQpIHtcbiAgICAvLyByZXN0YXVyYW50IGFscmVhZHkgZmV0Y2hlZCFcbiAgICBjYWxsYmFjayhudWxsLCBzZWxmLnJlc3RhdXJhbnQpO1xuICAgIHJldHVybjtcbiAgfVxuICB2YXIgaWQgPSBnZXRQYXJhbWV0ZXJCeU5hbWUoJ2lkJyk7XG4gIGlmICghaWQpIHtcbiAgICAvLyBubyBpZCBmb3VuZCBpbiBVUkxcbiAgICBlcnJvciA9ICdObyByZXN0YXVyYW50IGlkIGluIFVSTCc7XG4gICAgY2FsbGJhY2soZXJyb3IsIG51bGwpO1xuICB9IGVsc2Uge1xuICAgIERCSGVscGVyLmZldGNoUmVzdGF1cmFudEJ5SWQoaWQsIGZ1bmN0aW9uIChlcnJvciwgcmVzdGF1cmFudCkge1xuICAgICAgc2VsZi5yZXN0YXVyYW50ID0gcmVzdGF1cmFudDtcbiAgICAgIGlmICghcmVzdGF1cmFudCkge1xuICAgICAgICBjb25zb2xlLmVycm9yKGVycm9yKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgLy8gY2xlYXIgb2xkIHJlc3RhdXJhbnQgZGF0YVxuICAgICAgcmVzZXRSZXN0YXVyYW50KCk7XG4gICAgICBmaWxsUmVzdGF1cmFudEhUTUwoKTtcbiAgICAgIGNhbGxiYWNrKG51bGwsIHJlc3RhdXJhbnQpO1xuICAgIH0pO1xuICB9XG59O1xuXG4vKipcbiAqIENyZWF0ZSByZXN0YXVyYW50IEhUTUwgYW5kIGFkZCBpdCB0byB0aGUgd2VicGFnZVxuICovXG52YXIgZmlsbFJlc3RhdXJhbnRIVE1MID0gZnVuY3Rpb24gZmlsbFJlc3RhdXJhbnRIVE1MKCkge1xuICB2YXIgcmVzdGF1cmFudCA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogc2VsZi5yZXN0YXVyYW50O1xuXG4gIHZhciBuYW1lID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3Jlc3RhdXJhbnQtbmFtZScpO1xuICBuYW1lLmlubmVySFRNTCA9IHJlc3RhdXJhbnQubmFtZTtcblxuICB2YXIgYWRkcmVzcyA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdyZXN0YXVyYW50LWFkZHJlc3MnKTtcbiAgYWRkcmVzcy5pbm5lckhUTUwgPSByZXN0YXVyYW50LmFkZHJlc3M7XG5cbiAgdmFyIGltYWdlID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3Jlc3RhdXJhbnQtaW1nJyk7XG4gIGltYWdlLmNsYXNzTmFtZSA9ICdyZXN0YXVyYW50LWltZyc7XG4gIHZhciBpbWFnZVVybCA9IERCSGVscGVyLmltYWdlVXJsRm9yUmVzdGF1cmFudChyZXN0YXVyYW50KTtcbiAgdmFyIGltYWdlVXJsTmFtZSA9IGltYWdlVXJsO1xuICB2YXIgaW1hZ2VUeXBlID0gJ3dlYnAnO1xuICBpbWFnZS5zcmMgPSBpbWFnZVVybE5hbWUgKyAnLTgwMF8yeC4nICsgaW1hZ2VUeXBlO1xuICBpbWFnZS5zZXRBdHRyaWJ1dGUoJ3NyY3NldCcsIGltYWdlVXJsTmFtZSArICctODAwXzJ4LicgKyBpbWFnZVR5cGUgKyAnIDgwMHcsICcgKyBpbWFnZVVybE5hbWUgKyAnLTQwMF8xeC4nICsgaW1hZ2VUeXBlICsgJyA0MDB3Jyk7XG4gIGltYWdlLnNldEF0dHJpYnV0ZSgnYWx0JywgcmVzdGF1cmFudC5uYW1lICsgJyBSZXN0YXVyYW50Jyk7XG4gIHZhciBjdWlzaW5lID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3Jlc3RhdXJhbnQtY3Vpc2luZScpO1xuICBjdWlzaW5lLmlubmVySFRNTCA9IHJlc3RhdXJhbnQuY3Vpc2luZV90eXBlO1xuXG4gIC8vIGZpbGwgb3BlcmF0aW5nIGhvdXJzXG4gIGlmIChyZXN0YXVyYW50Lm9wZXJhdGluZ19ob3Vycykge1xuICAgIGZpbGxSZXN0YXVyYW50SG91cnNIVE1MKCk7XG4gIH1cbiAgLy8gZmlsbCByZXZpZXdzXG4gIGZpbGxSZXZpZXdzSFRNTCgpO1xufTtcblxuLyoqXG4gKiBDcmVhdGUgcmVzdGF1cmFudCBvcGVyYXRpbmcgaG91cnMgSFRNTCB0YWJsZSBhbmQgYWRkIGl0IHRvIHRoZSB3ZWJwYWdlLlxuICovXG52YXIgZmlsbFJlc3RhdXJhbnRIb3Vyc0hUTUwgPSBmdW5jdGlvbiBmaWxsUmVzdGF1cmFudEhvdXJzSFRNTCgpIHtcbiAgdmFyIG9wZXJhdGluZ0hvdXJzID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiBzZWxmLnJlc3RhdXJhbnQub3BlcmF0aW5nX2hvdXJzO1xuXG4gIHZhciBob3VycyA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdyZXN0YXVyYW50LWhvdXJzJyk7XG4gIGZvciAodmFyIGtleSBpbiBvcGVyYXRpbmdIb3Vycykge1xuICAgIHZhciByb3cgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCd0cicpO1xuXG4gICAgdmFyIGRheSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3RkJyk7XG4gICAgZGF5LmlubmVySFRNTCA9IGtleTtcbiAgICByb3cuYXBwZW5kQ2hpbGQoZGF5KTtcblxuICAgIHZhciB0aW1lID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndGQnKTtcbiAgICB0aW1lLmlubmVySFRNTCA9IG9wZXJhdGluZ0hvdXJzW2tleV07XG4gICAgcm93LmFwcGVuZENoaWxkKHRpbWUpO1xuXG4gICAgaG91cnMuYXBwZW5kQ2hpbGQocm93KTtcbiAgfVxufTtcblxuLyoqXG4gKiBDcmVhdGUgYWxsIHJldmlld3MgSFRNTCBhbmQgYWRkIHRoZW0gdG8gdGhlIHdlYnBhZ2UuXG4gKi9cbnZhciBmaWxsUmV2aWV3c0hUTUwgPSBmdW5jdGlvbiBmaWxsUmV2aWV3c0hUTUwoKSB7XG4gIHZhciByZXZpZXdzID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiBzZWxmLnJlc3RhdXJhbnQucmV2aWV3cztcblxuICB2YXIgY29udGFpbmVyID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3Jldmlld3MtY29udGFpbmVyJyk7XG4gIHZhciB0aXRsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2gyJyk7XG4gIHRpdGxlLnNldEF0dHJpYnV0ZSgnaWQnLCAncmV2aWV3c1RpdGxlJyk7XG4gIHRpdGxlLmlubmVySFRNTCA9ICdSZXZpZXdzJztcbiAgY29udGFpbmVyLmFwcGVuZENoaWxkKHRpdGxlKTtcblxuICBpZiAoIXJldmlld3MpIHtcbiAgICB2YXIgbm9SZXZpZXdzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgncCcpO1xuICAgIG5vUmV2aWV3cy5pbm5lckhUTUwgPSAnTm8gcmV2aWV3cyB5ZXQhJztcbiAgICBjb250YWluZXIuYXBwZW5kQ2hpbGQobm9SZXZpZXdzKTtcbiAgICByZXR1cm47XG4gIH1cbiAgdmFyIHVsID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3Jldmlld3MtbGlzdCcpO1xuICByZXZpZXdzLmZvckVhY2goZnVuY3Rpb24gKHJldmlldykge1xuICAgIHVsLmFwcGVuZENoaWxkKGNyZWF0ZVJldmlld0hUTUwocmV2aWV3KSk7XG4gIH0pO1xuICBjb250YWluZXIuYXBwZW5kQ2hpbGQodWwpO1xufTtcblxuLyoqXG4gKiBDcmVhdGUgcmV2aWV3IEhUTUwgYW5kIGFkZCBpdCB0byB0aGUgd2VicGFnZS5cbiAqL1xudmFyIGNyZWF0ZVJldmlld0hUTUwgPSBmdW5jdGlvbiBjcmVhdGVSZXZpZXdIVE1MKHJldmlldykge1xuICB2YXIgbGkgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdsaScpO1xuICB2YXIgbmFtZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3AnKTtcbiAgbmFtZS5pbm5lckhUTUwgPSByZXZpZXcubmFtZTtcbiAgbGkuYXBwZW5kQ2hpbGQobmFtZSk7XG5cbiAgdmFyIGRhdGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdwJyk7XG4gIGRhdGUuaW5uZXJIVE1MID0gcmV2aWV3LmRhdGU7XG4gIGxpLmFwcGVuZENoaWxkKGRhdGUpO1xuXG4gIHZhciByYXRpbmcgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdwJyk7XG4gIHJhdGluZy5pbm5lckhUTUwgPSAnUmF0aW5nOiAnICsgcmV2aWV3LnJhdGluZztcbiAgbGkuYXBwZW5kQ2hpbGQocmF0aW5nKTtcblxuICB2YXIgY29tbWVudHMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdwJyk7XG4gIGNvbW1lbnRzLmlubmVySFRNTCA9IHJldmlldy5jb21tZW50cztcbiAgbGkuYXBwZW5kQ2hpbGQoY29tbWVudHMpO1xuXG4gIHJldHVybiBsaTtcbn07XG5cbi8qKlxuICogQWRkIHJlc3RhdXJhbnQgbmFtZSB0byB0aGUgYnJlYWRjcnVtYiBuYXZpZ2F0aW9uIG1lbnVcbiAqL1xudmFyIGZpbGxCcmVhZGNydW1iID0gZnVuY3Rpb24gZmlsbEJyZWFkY3J1bWIoKSB7XG4gIHZhciByZXN0YXVyYW50ID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiBzZWxmLnJlc3RhdXJhbnQ7XG5cbiAgdmFyIGJyZWFkY3J1bWIgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnYnJlYWRjcnVtYicpO1xuICB2YXIgbGkgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdsaScpO1xuICBsaS5pbm5lckhUTUwgPSByZXN0YXVyYW50Lm5hbWU7XG4gIGJyZWFkY3J1bWIuYXBwZW5kQ2hpbGQobGkpO1xufTtcblxuLyoqXG4gKiBHZXQgYSBwYXJhbWV0ZXIgYnkgbmFtZSBmcm9tIHBhZ2UgVVJMLlxuICovXG52YXIgZ2V0UGFyYW1ldGVyQnlOYW1lID0gZnVuY3Rpb24gZ2V0UGFyYW1ldGVyQnlOYW1lKG5hbWUsIHVybCkge1xuICBpZiAoIXVybCkgdXJsID0gd2luZG93LmxvY2F0aW9uLmhyZWY7XG4gIG5hbWUgPSBuYW1lLnJlcGxhY2UoL1tcXFtcXF1dL2csICdcXFxcJCYnKTtcbiAgdmFyIHJlZ2V4ID0gbmV3IFJlZ0V4cCgnWz8mXScgKyBuYW1lICsgJyg9KFteJiNdKil8JnwjfCQpJyksXG4gICAgICByZXN1bHRzID0gcmVnZXguZXhlYyh1cmwpO1xuICBpZiAoIXJlc3VsdHMpIHJldHVybiBudWxsO1xuICBpZiAoIXJlc3VsdHNbMl0pIHJldHVybiAnJztcbiAgcmV0dXJuIGRlY29kZVVSSUNvbXBvbmVudChyZXN1bHRzWzJdLnJlcGxhY2UoL1xcKy9nLCAnICcpKTtcbn07XG5cbi8qKlxuICogcmVtb3ZlIHRoZSBvbGQgcmVzdGF1cmFudCBkYXRhXG4gKi9cbnZhciByZXNldFJlc3RhdXJhbnQgPSBmdW5jdGlvbiByZXNldFJlc3RhdXJhbnQoKSB7XG4gIC8vIHJlbW92ZSByZXN0YXVyYW50IG1hcCBkYXRhXG4gIGlmIChzZWxmLm5ld01hcCkge1xuICAgIHNlbGYubmV3TWFwLnJlbW92ZSgpO1xuICB9XG5cbiAgLy8gcmVtb3ZlIHJlc3RhdXJhbnQgYnJlYWRjcnVtYiBhbmQgY3JlYXRlIEhvbWUgb25seSBpbiBicmVhZGNydW1iXG4gIHZhciBicmVhZGNydW1iID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2JyZWFkY3J1bWInKTtcbiAgYnJlYWRjcnVtYi5pbm5lckhUTUwgPSAnJztcblxuICAvLyBjbGVhciByZXN0YXVyYW50IGJyZWFkY3J1bWIgYW5kIGNyZWF0ZSBIb21lIG9ubHkgaW4gYnJlYWRjcnVtYlxuICB2YXIgbGkgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdsaScpO1xuICBsaS5pbm5lckhUTUwgPSAnPGEgaHJlZj1cXCcvXFwnPkhvbWU8L2E+JztcbiAgYnJlYWRjcnVtYi5hcHBlbmRDaGlsZChsaSk7XG5cbiAgLy8gY2xlYXIgcmVzdGF1cmFudCBob3VycyBkYXRhXG4gIHZhciBob3Vyc1RhYmxlID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3Jlc3RhdXJhbnQtaG91cnMnKTtcbiAgaWYgKGhvdXJzVGFibGUpIHtcbiAgICBob3Vyc1RhYmxlLmlubmVySFRNTCA9ICcnO1xuICB9XG5cbiAgLy8gcmVtb3ZlIHJldmlld3MgdGl0bGVcbiAgdmFyIHJldmlld3NUaXRsZSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdyZXZpZXdzVGl0bGUnKTtcbiAgaWYgKHJldmlld3NUaXRsZSkge1xuICAgIHJldmlld3NUaXRsZS5yZW1vdmUoKTtcbiAgfVxuXG4gIC8vIHJlbW92ZSByZXZpZXdzIGxpc3QgZGF0YVxuICB2YXIgcmV2aWV3c0xpc3QgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncmV2aWV3cy1saXN0Jyk7XG4gIGlmIChyZXZpZXdzTGlzdC5pbm5lckhUTUwpIHtcbiAgICByZXZpZXdzTGlzdC5pbm5lckhUTUwgPSAnJztcbiAgfVxufTsiLCIndXNlIHN0cmljdCc7XG5cbnZhciBfdHlwZW9mID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIgPyBmdW5jdGlvbiAob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9IDogZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajsgfTtcblxuKGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgKHR5cGVvZiBleHBvcnRzID09PSAndW5kZWZpbmVkJyA/ICd1bmRlZmluZWQnIDogX3R5cGVvZihleHBvcnRzKSkgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnID8gZmFjdG9yeSgpIDogdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKGZhY3RvcnkpIDogZmFjdG9yeSgpO1xufSkodW5kZWZpbmVkLCBmdW5jdGlvbiAoKSB7XG5cbiAgLyoqXG4gICAqIGh0dHBzOi8vZ2l0aHViLmNvbS9XSUNHL2ZvY3VzLXZpc2libGVcbiAgICovXG4gIGZ1bmN0aW9uIGluaXQoKSB7XG4gICAgdmFyIGhhZEtleWJvYXJkRXZlbnQgPSB0cnVlO1xuICAgIHZhciBoYWRGb2N1c1Zpc2libGVSZWNlbnRseSA9IGZhbHNlO1xuICAgIHZhciBoYWRGb2N1c1Zpc2libGVSZWNlbnRseVRpbWVvdXQgPSBudWxsO1xuXG4gICAgdmFyIGlucHV0VHlwZXNXaGl0ZWxpc3QgPSB7XG4gICAgICB0ZXh0OiB0cnVlLFxuICAgICAgc2VhcmNoOiB0cnVlLFxuICAgICAgdXJsOiB0cnVlLFxuICAgICAgdGVsOiB0cnVlLFxuICAgICAgZW1haWw6IHRydWUsXG4gICAgICBwYXNzd29yZDogdHJ1ZSxcbiAgICAgIG51bWJlcjogdHJ1ZSxcbiAgICAgIGRhdGU6IHRydWUsXG4gICAgICBtb250aDogdHJ1ZSxcbiAgICAgIHdlZWs6IHRydWUsXG4gICAgICB0aW1lOiB0cnVlLFxuICAgICAgZGF0ZXRpbWU6IHRydWUsXG4gICAgICAnZGF0ZXRpbWUtbG9jYWwnOiB0cnVlXG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIEhlbHBlciBmdW5jdGlvbiBmb3IgbGVnYWN5IGJyb3dzZXJzIGFuZCBpZnJhbWVzIHdoaWNoIHNvbWV0aW1lcyBmb2N1c1xuICAgICAqIGVsZW1lbnRzIGxpa2UgZG9jdW1lbnQsIGJvZHksIGFuZCBub24taW50ZXJhY3RpdmUgU1ZHLlxuICAgICAqIEBwYXJhbSB7RWxlbWVudH0gZWxcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc1ZhbGlkRm9jdXNUYXJnZXQoZWwpIHtcbiAgICAgIGlmIChlbCAmJiBlbCAhPT0gZG9jdW1lbnQgJiYgZWwubm9kZU5hbWUgIT09ICdIVE1MJyAmJiBlbC5ub2RlTmFtZSAhPT0gJ0JPRFknICYmICdjbGFzc0xpc3QnIGluIGVsICYmICdjb250YWlucycgaW4gZWwuY2xhc3NMaXN0KSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvbXB1dGVzIHdoZXRoZXIgdGhlIGdpdmVuIGVsZW1lbnQgc2hvdWxkIGF1dG9tYXRpY2FsbHkgdHJpZ2dlciB0aGVcbiAgICAgKiBgZm9jdXMtdmlzaWJsZWAgY2xhc3MgYmVpbmcgYWRkZWQsIGkuZS4gd2hldGhlciBpdCBzaG91bGQgYWx3YXlzIG1hdGNoXG4gICAgICogYDpmb2N1cy12aXNpYmxlYCB3aGVuIGZvY3VzZWQuXG4gICAgICogQHBhcmFtIHtFbGVtZW50fSBlbFxuICAgICAqIEByZXR1cm4ge2Jvb2xlYW59XG4gICAgICovXG4gICAgZnVuY3Rpb24gZm9jdXNUcmlnZ2Vyc0tleWJvYXJkTW9kYWxpdHkoZWwpIHtcbiAgICAgIHZhciB0eXBlID0gZWwudHlwZTtcbiAgICAgIHZhciB0YWdOYW1lID0gZWwudGFnTmFtZTtcblxuICAgICAgaWYgKHRhZ05hbWUgPT0gJ0lOUFVUJyAmJiBpbnB1dFR5cGVzV2hpdGVsaXN0W3R5cGVdICYmICFlbC5yZWFkT25seSkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cblxuICAgICAgaWYgKHRhZ05hbWUgPT0gJ1RFWFRBUkVBJyAmJiAhZWwucmVhZE9ubHkpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG5cbiAgICAgIGlmIChlbC5pc0NvbnRlbnRFZGl0YWJsZSkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEFkZCB0aGUgYGZvY3VzLXZpc2libGVgIGNsYXNzIHRvIHRoZSBnaXZlbiBlbGVtZW50IGlmIGl0IHdhcyBub3QgYWRkZWQgYnlcbiAgICAgKiB0aGUgYXV0aG9yLlxuICAgICAqIEBwYXJhbSB7RWxlbWVudH0gZWxcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBhZGRGb2N1c1Zpc2libGVDbGFzcyhlbCkge1xuICAgICAgaWYgKGVsLmNsYXNzTGlzdC5jb250YWlucygnZm9jdXMtdmlzaWJsZScpKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGVsLmNsYXNzTGlzdC5hZGQoJ2ZvY3VzLXZpc2libGUnKTtcbiAgICAgIGVsLnNldEF0dHJpYnV0ZSgnZGF0YS1mb2N1cy12aXNpYmxlLWFkZGVkJywgJycpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlbW92ZSB0aGUgYGZvY3VzLXZpc2libGVgIGNsYXNzIGZyb20gdGhlIGdpdmVuIGVsZW1lbnQgaWYgaXQgd2FzIG5vdFxuICAgICAqIG9yaWdpbmFsbHkgYWRkZWQgYnkgdGhlIGF1dGhvci5cbiAgICAgKiBAcGFyYW0ge0VsZW1lbnR9IGVsXG4gICAgICovXG4gICAgZnVuY3Rpb24gcmVtb3ZlRm9jdXNWaXNpYmxlQ2xhc3MoZWwpIHtcbiAgICAgIGlmICghZWwuaGFzQXR0cmlidXRlKCdkYXRhLWZvY3VzLXZpc2libGUtYWRkZWQnKSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBlbC5jbGFzc0xpc3QucmVtb3ZlKCdmb2N1cy12aXNpYmxlJyk7XG4gICAgICBlbC5yZW1vdmVBdHRyaWJ1dGUoJ2RhdGEtZm9jdXMtdmlzaWJsZS1hZGRlZCcpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRyZWF0IGBrZXlkb3duYCBhcyBhIHNpZ25hbCB0aGF0IHRoZSB1c2VyIGlzIGluIGtleWJvYXJkIG1vZGFsaXR5LlxuICAgICAqIEFwcGx5IGBmb2N1cy12aXNpYmxlYCB0byBhbnkgY3VycmVudCBhY3RpdmUgZWxlbWVudCBhbmQga2VlcCB0cmFja1xuICAgICAqIG9mIG91ciBrZXlib2FyZCBtb2RhbGl0eSBzdGF0ZSB3aXRoIGBoYWRLZXlib2FyZEV2ZW50YC5cbiAgICAgKiBAcGFyYW0ge0V2ZW50fSBlXG4gICAgICovXG4gICAgZnVuY3Rpb24gb25LZXlEb3duKGUpIHtcbiAgICAgIGlmIChpc1ZhbGlkRm9jdXNUYXJnZXQoZG9jdW1lbnQuYWN0aXZlRWxlbWVudCkpIHtcbiAgICAgICAgYWRkRm9jdXNWaXNpYmxlQ2xhc3MoZG9jdW1lbnQuYWN0aXZlRWxlbWVudCk7XG4gICAgICB9XG5cbiAgICAgIGhhZEtleWJvYXJkRXZlbnQgPSB0cnVlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIElmIGF0IGFueSBwb2ludCBhIHVzZXIgY2xpY2tzIHdpdGggYSBwb2ludGluZyBkZXZpY2UsIGVuc3VyZSB0aGF0IHdlIGNoYW5nZVxuICAgICAqIHRoZSBtb2RhbGl0eSBhd2F5IGZyb20ga2V5Ym9hcmQuXG4gICAgICogVGhpcyBhdm9pZHMgdGhlIHNpdHVhdGlvbiB3aGVyZSBhIHVzZXIgcHJlc3NlcyBhIGtleSBvbiBhbiBhbHJlYWR5IGZvY3VzZWRcbiAgICAgKiBlbGVtZW50LCBhbmQgdGhlbiBjbGlja3Mgb24gYSBkaWZmZXJlbnQgZWxlbWVudCwgZm9jdXNpbmcgaXQgd2l0aCBhXG4gICAgICogcG9pbnRpbmcgZGV2aWNlLCB3aGlsZSB3ZSBzdGlsbCB0aGluayB3ZSdyZSBpbiBrZXlib2FyZCBtb2RhbGl0eS5cbiAgICAgKiBAcGFyYW0ge0V2ZW50fSBlXG4gICAgICovXG4gICAgZnVuY3Rpb24gb25Qb2ludGVyRG93bihlKSB7XG4gICAgICBoYWRLZXlib2FyZEV2ZW50ID0gZmFsc2U7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogT24gYGZvY3VzYCwgYWRkIHRoZSBgZm9jdXMtdmlzaWJsZWAgY2xhc3MgdG8gdGhlIHRhcmdldCBpZjpcbiAgICAgKiAtIHRoZSB0YXJnZXQgcmVjZWl2ZWQgZm9jdXMgYXMgYSByZXN1bHQgb2Yga2V5Ym9hcmQgbmF2aWdhdGlvbiwgb3JcbiAgICAgKiAtIHRoZSBldmVudCB0YXJnZXQgaXMgYW4gZWxlbWVudCB0aGF0IHdpbGwgbGlrZWx5IHJlcXVpcmUgaW50ZXJhY3Rpb25cbiAgICAgKiAgIHZpYSB0aGUga2V5Ym9hcmQgKGUuZy4gYSB0ZXh0IGJveClcbiAgICAgKiBAcGFyYW0ge0V2ZW50fSBlXG4gICAgICovXG4gICAgZnVuY3Rpb24gb25Gb2N1cyhlKSB7XG4gICAgICAvLyBQcmV2ZW50IElFIGZyb20gZm9jdXNpbmcgdGhlIGRvY3VtZW50IG9yIEhUTUwgZWxlbWVudC5cbiAgICAgIGlmICghaXNWYWxpZEZvY3VzVGFyZ2V0KGUudGFyZ2V0KSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGlmIChoYWRLZXlib2FyZEV2ZW50IHx8IGZvY3VzVHJpZ2dlcnNLZXlib2FyZE1vZGFsaXR5KGUudGFyZ2V0KSkge1xuICAgICAgICBhZGRGb2N1c1Zpc2libGVDbGFzcyhlLnRhcmdldCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogT24gYGJsdXJgLCByZW1vdmUgdGhlIGBmb2N1cy12aXNpYmxlYCBjbGFzcyBmcm9tIHRoZSB0YXJnZXQuXG4gICAgICogQHBhcmFtIHtFdmVudH0gZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG9uQmx1cihlKSB7XG4gICAgICBpZiAoIWlzVmFsaWRGb2N1c1RhcmdldChlLnRhcmdldCkpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAoZS50YXJnZXQuY2xhc3NMaXN0LmNvbnRhaW5zKCdmb2N1cy12aXNpYmxlJykgfHwgZS50YXJnZXQuaGFzQXR0cmlidXRlKCdkYXRhLWZvY3VzLXZpc2libGUtYWRkZWQnKSkge1xuICAgICAgICAvLyBUbyBkZXRlY3QgYSB0YWIvd2luZG93IHN3aXRjaCwgd2UgbG9vayBmb3IgYSBibHVyIGV2ZW50IGZvbGxvd2VkXG4gICAgICAgIC8vIHJhcGlkbHkgYnkgYSB2aXNpYmlsaXR5IGNoYW5nZS5cbiAgICAgICAgLy8gSWYgd2UgZG9uJ3Qgc2VlIGEgdmlzaWJpbGl0eSBjaGFuZ2Ugd2l0aGluIDEwMG1zLCBpdCdzIHByb2JhYmx5IGFcbiAgICAgICAgLy8gcmVndWxhciBmb2N1cyBjaGFuZ2UuXG4gICAgICAgIGhhZEZvY3VzVmlzaWJsZVJlY2VudGx5ID0gdHJ1ZTtcbiAgICAgICAgd2luZG93LmNsZWFyVGltZW91dChoYWRGb2N1c1Zpc2libGVSZWNlbnRseVRpbWVvdXQpO1xuICAgICAgICBoYWRGb2N1c1Zpc2libGVSZWNlbnRseVRpbWVvdXQgPSB3aW5kb3cuc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgaGFkRm9jdXNWaXNpYmxlUmVjZW50bHkgPSBmYWxzZTtcbiAgICAgICAgICB3aW5kb3cuY2xlYXJUaW1lb3V0KGhhZEZvY3VzVmlzaWJsZVJlY2VudGx5VGltZW91dCk7XG4gICAgICAgIH0sIDEwMCk7XG4gICAgICAgIHJlbW92ZUZvY3VzVmlzaWJsZUNsYXNzKGUudGFyZ2V0KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBJZiB0aGUgdXNlciBjaGFuZ2VzIHRhYnMsIGtlZXAgdHJhY2sgb2Ygd2hldGhlciBvciBub3QgdGhlIHByZXZpb3VzbHlcbiAgICAgKiBmb2N1c2VkIGVsZW1lbnQgaGFkIC5mb2N1cy12aXNpYmxlLlxuICAgICAqIEBwYXJhbSB7RXZlbnR9IGVcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBvblZpc2liaWxpdHlDaGFuZ2UoZSkge1xuICAgICAgaWYgKGRvY3VtZW50LnZpc2liaWxpdHlTdGF0ZSA9PSAnaGlkZGVuJykge1xuICAgICAgICAvLyBJZiB0aGUgdGFiIGJlY29tZXMgYWN0aXZlIGFnYWluLCB0aGUgYnJvd3NlciB3aWxsIGhhbmRsZSBjYWxsaW5nIGZvY3VzXG4gICAgICAgIC8vIG9uIHRoZSBlbGVtZW50IChTYWZhcmkgYWN0dWFsbHkgY2FsbHMgaXQgdHdpY2UpLlxuICAgICAgICAvLyBJZiB0aGlzIHRhYiBjaGFuZ2UgY2F1c2VkIGEgYmx1ciBvbiBhbiBlbGVtZW50IHdpdGggZm9jdXMtdmlzaWJsZSxcbiAgICAgICAgLy8gcmUtYXBwbHkgdGhlIGNsYXNzIHdoZW4gdGhlIHVzZXIgc3dpdGNoZXMgYmFjayB0byB0aGUgdGFiLlxuICAgICAgICBpZiAoaGFkRm9jdXNWaXNpYmxlUmVjZW50bHkpIHtcbiAgICAgICAgICBoYWRLZXlib2FyZEV2ZW50ID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBhZGRJbml0aWFsUG9pbnRlck1vdmVMaXN0ZW5lcnMoKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBZGQgYSBncm91cCBvZiBsaXN0ZW5lcnMgdG8gZGV0ZWN0IHVzYWdlIG9mIGFueSBwb2ludGluZyBkZXZpY2VzLlxuICAgICAqIFRoZXNlIGxpc3RlbmVycyB3aWxsIGJlIGFkZGVkIHdoZW4gdGhlIHBvbHlmaWxsIGZpcnN0IGxvYWRzLCBhbmQgYW55dGltZVxuICAgICAqIHRoZSB3aW5kb3cgaXMgYmx1cnJlZCwgc28gdGhhdCB0aGV5IGFyZSBhY3RpdmUgd2hlbiB0aGUgd2luZG93IHJlZ2FpbnNcbiAgICAgKiBmb2N1cy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBhZGRJbml0aWFsUG9pbnRlck1vdmVMaXN0ZW5lcnMoKSB7XG4gICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdtb3VzZW1vdmUnLCBvbkluaXRpYWxQb2ludGVyTW92ZSk7XG4gICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdtb3VzZWRvd24nLCBvbkluaXRpYWxQb2ludGVyTW92ZSk7XG4gICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdtb3VzZXVwJywgb25Jbml0aWFsUG9pbnRlck1vdmUpO1xuICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcigncG9pbnRlcm1vdmUnLCBvbkluaXRpYWxQb2ludGVyTW92ZSk7XG4gICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdwb2ludGVyZG93bicsIG9uSW5pdGlhbFBvaW50ZXJNb3ZlKTtcbiAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ3BvaW50ZXJ1cCcsIG9uSW5pdGlhbFBvaW50ZXJNb3ZlKTtcbiAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ3RvdWNobW92ZScsIG9uSW5pdGlhbFBvaW50ZXJNb3ZlKTtcbiAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ3RvdWNoc3RhcnQnLCBvbkluaXRpYWxQb2ludGVyTW92ZSk7XG4gICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCd0b3VjaGVuZCcsIG9uSW5pdGlhbFBvaW50ZXJNb3ZlKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiByZW1vdmVJbml0aWFsUG9pbnRlck1vdmVMaXN0ZW5lcnMoKSB7XG4gICAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdtb3VzZW1vdmUnLCBvbkluaXRpYWxQb2ludGVyTW92ZSk7XG4gICAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdtb3VzZWRvd24nLCBvbkluaXRpYWxQb2ludGVyTW92ZSk7XG4gICAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdtb3VzZXVwJywgb25Jbml0aWFsUG9pbnRlck1vdmUpO1xuICAgICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcigncG9pbnRlcm1vdmUnLCBvbkluaXRpYWxQb2ludGVyTW92ZSk7XG4gICAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdwb2ludGVyZG93bicsIG9uSW5pdGlhbFBvaW50ZXJNb3ZlKTtcbiAgICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3BvaW50ZXJ1cCcsIG9uSW5pdGlhbFBvaW50ZXJNb3ZlKTtcbiAgICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3RvdWNobW92ZScsIG9uSW5pdGlhbFBvaW50ZXJNb3ZlKTtcbiAgICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3RvdWNoc3RhcnQnLCBvbkluaXRpYWxQb2ludGVyTW92ZSk7XG4gICAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCd0b3VjaGVuZCcsIG9uSW5pdGlhbFBvaW50ZXJNb3ZlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBXaGVuIHRoZSBwb2xmeWlsbCBmaXJzdCBsb2FkcywgYXNzdW1lIHRoZSB1c2VyIGlzIGluIGtleWJvYXJkIG1vZGFsaXR5LlxuICAgICAqIElmIGFueSBldmVudCBpcyByZWNlaXZlZCBmcm9tIGEgcG9pbnRpbmcgZGV2aWNlIChlLmcuIG1vdXNlLCBwb2ludGVyLFxuICAgICAqIHRvdWNoKSwgdHVybiBvZmYga2V5Ym9hcmQgbW9kYWxpdHkuXG4gICAgICogVGhpcyBhY2NvdW50cyBmb3Igc2l0dWF0aW9ucyB3aGVyZSBmb2N1cyBlbnRlcnMgdGhlIHBhZ2UgZnJvbSB0aGUgVVJMIGJhci5cbiAgICAgKiBAcGFyYW0ge0V2ZW50fSBlXG4gICAgICovXG4gICAgZnVuY3Rpb24gb25Jbml0aWFsUG9pbnRlck1vdmUoZSkge1xuICAgICAgLy8gV29yayBhcm91bmQgYSBTYWZhcmkgcXVpcmsgdGhhdCBmaXJlcyBhIG1vdXNlbW92ZSBvbiA8aHRtbD4gd2hlbmV2ZXIgdGhlXG4gICAgICAvLyB3aW5kb3cgYmx1cnMsIGV2ZW4gaWYgeW91J3JlIHRhYmJpbmcgb3V0IG9mIHRoZSBwYWdlLiDCr1xcXyjjg4QpXy/Cr1xuICAgICAgaWYgKGUudGFyZ2V0Lm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09ICdodG1sJykge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGhhZEtleWJvYXJkRXZlbnQgPSBmYWxzZTtcbiAgICAgIHJlbW92ZUluaXRpYWxQb2ludGVyTW92ZUxpc3RlbmVycygpO1xuICAgIH1cblxuICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCBvbktleURvd24sIHRydWUpO1xuICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlZG93bicsIG9uUG9pbnRlckRvd24sIHRydWUpO1xuICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ3BvaW50ZXJkb3duJywgb25Qb2ludGVyRG93biwgdHJ1ZSk7XG4gICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcigndG91Y2hzdGFydCcsIG9uUG9pbnRlckRvd24sIHRydWUpO1xuICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2ZvY3VzJywgb25Gb2N1cywgdHJ1ZSk7XG4gICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignYmx1cicsIG9uQmx1ciwgdHJ1ZSk7XG4gICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcigndmlzaWJpbGl0eWNoYW5nZScsIG9uVmlzaWJpbGl0eUNoYW5nZSwgdHJ1ZSk7XG4gICAgYWRkSW5pdGlhbFBvaW50ZXJNb3ZlTGlzdGVuZXJzKCk7XG5cbiAgICBkb2N1bWVudC5ib2R5LmNsYXNzTGlzdC5hZGQoJ2pzLWZvY3VzLXZpc2libGUnKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTdWJzY3JpcHRpb24gd2hlbiB0aGUgRE9NIGlzIHJlYWR5XG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrXG4gICAqL1xuICBmdW5jdGlvbiBvbkRPTVJlYWR5KGNhbGxiYWNrKSB7XG4gICAgdmFyIGxvYWRlZDtcblxuICAgIC8qKlxuICAgICAqIENhbGxiYWNrIHdyYXBwZXIgZm9yIGNoZWNrIGxvYWRlZCBzdGF0ZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGxvYWQoKSB7XG4gICAgICBpZiAoIWxvYWRlZCkge1xuICAgICAgICBsb2FkZWQgPSB0cnVlO1xuXG4gICAgICAgIGNhbGxiYWNrKCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKFsnaW50ZXJhY3RpdmUnLCAnY29tcGxldGUnXS5pbmRleE9mKGRvY3VtZW50LnJlYWR5U3RhdGUpID49IDApIHtcbiAgICAgIGNhbGxiYWNrKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGxvYWRlZCA9IGZhbHNlO1xuICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignRE9NQ29udGVudExvYWRlZCcsIGxvYWQsIGZhbHNlKTtcbiAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdsb2FkJywgbG9hZCwgZmFsc2UpO1xuICAgIH1cbiAgfVxuXG4gIGlmICh0eXBlb2YgZG9jdW1lbnQgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgb25ET01SZWFkeShpbml0KTtcbiAgfVxufSk7Il19
